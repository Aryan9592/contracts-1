{
  "address": "0xB144f3B2b5828D7E122E266E11D250a2E5a1C626",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "SupraSValueFeed",
          "name": "feed_",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "pairIndex_",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "description_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidOracleRound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "atVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "oracleVersion",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentVersion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "oracleVersion",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feed",
      "outputs": [
        {
          "internalType": "SupraSValueFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleProviderName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairIndex",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            }
          ],
          "internalType": "struct IOracleProvider.OracleVersion",
          "name": "oracleVersion",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc144d8325273e227d5d82d195ae82881d1bd806a0cdac16e098637c15054caa",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0xB144f3B2b5828D7E122E266E11D250a2E5a1C626",
    "transactionIndex": 0,
    "gasUsed": "786555",
    "logsBloom": "0x
    "blockHash": "0x393602cd9eba3c550d6aef7ace659be7cc1e969d58dcf44fec59f398aa635004",
    "transactionHash": "0xdc144d8325273e227d5d82d195ae82881d1bd806a0cdac16e098637c15054caa",
    "logs": [],
    "blockNumber": 22786200,
    "cumulativeGasUsed": "786555",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4Ce261C19af540f1175CdeB9E3490DC8937D78e5",
    "18",
    "BTC/USD"
  ],
  "numDeployments": 2,
  "solcInputHash": "5e7a085bdb3f6e98aebebf27106d4c12",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"SupraSValueFeed\",\"name\":\"feed_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"pairIndex_\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidOracleRound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"atVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"oracleVersion\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentVersion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"oracleVersion\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feed\",\"outputs\":[{\"internalType\":\"SupraSValueFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleProviderName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"internalType\":\"struct IOracleProvider.OracleVersion\",\"name\":\"oracleVersion\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidOracleRound()\":[{\"details\":\"Error for invalid oracle round\"}]},\"kind\":\"dev\",\"methods\":{\"atVersion(uint256)\":{\"params\":{\"version\":\"The version of which to lookup\"},\"returns\":{\"oracleVersion\":\"Oracle version at version `version`\"}},\"constructor\":{\"params\":{\"description_\":\"The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)\",\"feed_\":\"Supra address (https://supraoracles.com/docs/price-feeds/networks)\",\"pairIndex_\":\"The index of supra trading pair (https://supraoracles.com/docs/price-feeds/trading-pairs)\"}},\"currentVersion()\":{\"returns\":{\"oracleVersion\":\"Current oracle version\"}},\"description()\":{\"returns\":{\"_0\":\"A string representing the description of the Oracle Provider.\"}},\"oracleProviderName()\":{\"returns\":{\"_0\":\"A string representing the name of the Oracle Provider.\"}},\"sync()\":{\"details\":\"`sync` is expected to be called soon after a phase update occurs in the underlying proxy.      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call      This is feasible in the short term due to how infrequent phase updates are, but phase update      and roundCount detection should eventually be implemented at the contract level.      Reverts if there is more than 1 phase to update in a single sync because we currently cannot      determine the startingRoundId for the intermediary phase.\",\"returns\":{\"oracleVersion\":\"The current oracle version after sync\"}}},\"stateVariables\":{\"_description\":{\"details\":\"The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)\"},\"feed\":{\"details\":\"Supra feed address (https://supraoracles.com/docs/price-feeds/networks)\"},\"lastSyncedVersion\":{\"details\":\"Last version seen when `sync` was called\"},\"oracleVersions\":{\"details\":\"Mapping of version to OracleVersion\"},\"pairIndex\":{\"details\":\"The index of supra trading pair (https://supraoracles.com/docs/price-feeds/trading-pairs)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"atVersion(uint256)\":{\"notice\":\"Returns the current oracle version\"},\"constructor\":{\"notice\":\"Initializes the contract state\"},\"currentVersion()\":{\"notice\":\"Returns the current oracle version\"},\"description()\":{\"notice\":\"Retrieves the description of the Oracle Provider.\"},\"oracleProviderName()\":{\"notice\":\"Retrieves the name of the Oracle Provider.\"},\"sync()\":{\"notice\":\"Checks for a new price and updates the internal phase annotation state accordingly\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/SupraFeedOracle.sol\":\"SupraFeedOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/oracle/SupraFeedOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./interfaces/IOracleProvider.sol\\\";\\nimport \\\"./types/SupraSValueFeed.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract SupraFeedOracle is IOracleProvider {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant BASE = 1e18;\\n\\n    /// @dev Supra feed address (https://supraoracles.com/docs/price-feeds/networks)\\n    SupraSValueFeed public immutable feed;\\n\\n    /// @dev The index of supra trading pair (https://supraoracles.com/docs/price-feeds/trading-pairs)\\n    uint64 public immutable pairIndex;\\n\\n    /// @dev The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)\\n    string private _description;\\n\\n    /// @dev Last version seen when `sync` was called\\n    uint256 private lastSyncedVersion;\\n\\n    /// @dev Mapping of version to OracleVersion\\n    mapping(uint256 => OracleVersion) private oracleVersions;\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @param feed_ Supra address (https://supraoracles.com/docs/price-feeds/networks)\\n     * @param pairIndex_ The index of supra trading pair (https://supraoracles.com/docs/price-feeds/trading-pairs)\\n     * @param description_ The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)\\n     */\\n    constructor(SupraSValueFeed feed_, uint64 pairIndex_, string memory description_) {\\n        feed = feed_;\\n        pairIndex = pairIndex_;\\n        _description = description_;\\n        sync();\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProvider\\n     */\\n    function sync() public returns (OracleVersion memory oracleVersion) {\\n        (uint256 supraDecimal, uint256 timestamp, uint256 price) = feed.getPrice(pairIndex);\\n        oracleVersion = oracleVersions[lastSyncedVersion];\\n        if (timestamp > oracleVersion.timestamp) {\\n            lastSyncedVersion++;\\n            oracleVersion = OracleVersion({\\n                version: lastSyncedVersion,\\n                timestamp: timestamp,\\n                price: int256(price.mul(BASE).div(10 ** supraDecimal))\\n            });\\n            oracleVersions[lastSyncedVersion] = oracleVersion;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProvider\\n     */\\n    function currentVersion() public view returns (OracleVersion memory oracleVersion) {\\n        (uint256 supraDecimal, uint256 timestamp, uint256 price) = feed.getPrice(pairIndex);\\n        oracleVersion = oracleVersions[lastSyncedVersion];\\n        if (timestamp > oracleVersion.timestamp) {\\n            oracleVersion = OracleVersion({\\n                version: lastSyncedVersion + 1,\\n                timestamp: timestamp,\\n                price: int256(price.mul(BASE).div(10 ** supraDecimal))\\n            });\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProvider\\n     */\\n    function atVersion(uint256 version) public view returns (OracleVersion memory oracleVersion) {\\n        return oracleVersions[version];\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProvider\\n     */\\n    function description() external view override returns (string memory) {\\n        return _description;\\n    }\\n\\n    /**\\n     * @inheritdoc IOracleProvider\\n     */\\n    function oracleProviderName() external pure override returns (string memory) {\\n        return \\\"supra\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x569bab2fa514266b8deb8553d930c22218efa53418bf1f5820c9cf719ce18b00\",\"license\":\"Apache-2.0\"},\"contracts/oracle/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IOracleProvider {\\n    /// @dev Error for invalid oracle round\\n    error InvalidOracleRound();\\n\\n    /**\\n     * @dev A singular oracle version with its corresponding data\\n     * @param version The iterative version\\n     * @param timestamp the timestamp of the oracle update\\n     * @param price The oracle price of the corresponding version\\n     */\\n    struct OracleVersion {\\n        uint256 version;\\n        uint256 timestamp;\\n        int256 price;\\n    }\\n\\n    /**\\n     * @notice Checks for a new price and updates the internal phase annotation state accordingly\\n     * @dev `sync` is expected to be called soon after a phase update occurs in the underlying proxy.\\n     *      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call\\n     *      This is feasible in the short term due to how infrequent phase updates are, but phase update\\n     *      and roundCount detection should eventually be implemented at the contract level.\\n     *      Reverts if there is more than 1 phase to update in a single sync because we currently cannot\\n     *      determine the startingRoundId for the intermediary phase.\\n     * @return The current oracle version after sync\\n     */\\n    function sync() external returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @return oracleVersion Current oracle version\\n     */\\n    function currentVersion() external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @param version The version of which to lookup\\n     * @return oracleVersion Oracle version at version `version`\\n     */\\n    function atVersion(uint256 version) external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Retrieves the description of the Oracle Provider.\\n     * @return A string representing the description of the Oracle Provider.\\n     */\\n    function description() external view returns (string memory);\\n\\n    /**\\n     * @notice Retrieves the name of the Oracle Provider.\\n     * @return A string representing the name of the Oracle Provider.\\n     */\\n    function oracleProviderName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7578ac3fc7a41e93a3e3d0c8eebebd559a0a34f8464079914e9f4f5cf39e427d\",\"license\":\"Apache-2.0\"},\"contracts/oracle/interfaces/ISupraSValueFeed.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface ISupraSValueFeed {\\n\\n    function getSvalue(uint64 _pairIndex) external view returns (bytes32, bool);\\n\\n    function getSvalues(uint64[] memory _pairIndexes) external view returns (bytes32[] memory, bool[] memory);\\n\\n}\",\"keccak256\":\"0xfee27bd7c9d094a18529692eb064c334796da8ffdf2212f06c3b29d74b2975f9\",\"license\":\"Apache-2.0\"},\"contracts/oracle/types/ChainlinkRound.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @dev ChainlinkRound type\\nstruct ChainlinkRound {\\n    uint256 timestamp;\\n    int256 answer;\\n    uint256 roundId;\\n}\\nusing ChainlinkRoundLib for ChainlinkRound global;\\n\\n/**\\n * @title ChainlinkRoundLib\\n * @notice Library that manages Chainlink round parsing.\\n */\\nlibrary ChainlinkRoundLib {\\n    /// @dev Phase ID offset location in the round ID\\n    uint256 constant private PHASE_OFFSET = 64;\\n\\n    /**\\n     * @notice Computes the chainlink phase ID from a round\\n     * @param self Round to compute from\\n     * @return Chainlink phase ID\\n     */\\n    function phaseId(ChainlinkRound memory self) internal pure returns (uint16) {\\n        return uint16(self.roundId >> PHASE_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0x30932df9b202188bc3ef87cbd08a0dd8972f2fb033a657bce46ee967688a6abe\",\"license\":\"Apache-2.0\"},\"contracts/oracle/types/SupraSValueFeed.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport \\\"../interfaces/ISupraSValueFeed.sol\\\";\\nimport \\\"./ChainlinkRound.sol\\\";\\n\\ntype SupraSValueFeed is address;\\nusing SupraSValueFeedLib for SupraSValueFeed global;\\n\\nlibrary SupraSValueFeedLib {\\n\\n    function getPrice(\\n        SupraSValueFeed self,\\n        uint64 pareIndex\\n    ) internal view returns (uint256 decimal, uint256 timestamp, uint256 price) {\\n        // \\n        /**\\n         * flag indicating if the value is available or not.\\n         * https://arbiscan.io/address/0x8a358F391d93f7558D5F5E61BDf533e2cc3Cf7a3#code\\n         * if (supraStorage[_pairIndex] == bytes32(0)) {\\n         *   flag = true;\\n         * }\\n         */\\n        (bytes32 data, bool flag) = ISupraSValueFeed(SupraSValueFeed.unwrap(self)).getSvalue(pareIndex);\\n\\n        require(!flag, \\\"PriceFeedNotExist\\\");\\n\\n        // round = bytesToUint256(abi.encodePacked(data >> 192));\\n        decimal = bytesToUint256(abi.encodePacked((data << 64) >> 248));\\n        timestamp = bytesToUint256(abi.encodePacked((data << 72) >> 192)) / 1000; // MillSecond to Second\\n        price = bytesToUint256(abi.encodePacked((data << 136) >> 160));\\n    }\\n\\n    function bytesToUint256(bytes memory _bs) internal pure returns (uint256 value) {\\n        require(_bs.length == 32, \\\"bytes length is not 32.\\\");\\n        assembly {\\n            value := mload(add(_bs, 0x20))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc9beda5daf3726d376533e7adc969849284074db7cb723305bbdf9145351c0b0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637ece075d1161005b5780637ece075d146101215780639d888e8614610156578063b32c7af21461015e578063fff6cae91461019e57600080fd5b8063258820871461008257806337a7b7d8146100cd5780637284e41614610119575b600080fd5b60408051808201909152600581527f737570726100000000000000000000000000000000000000000000000000000060208201525b6040516100c49190610749565b60405180910390f35b6100f47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c4565b6100b76101a6565b61013461012f3660046107b5565b610238565b60408051825181526020808401519082015291810151908201526060016100c4565b610134610295565b6101857f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff90911681526020016100c4565b6101346103c6565b6060600080546101b5906107ce565b80601f01602080910402602001604051908101604052809291908181526020018280546101e1906107ce565b801561022e5780601f106102035761010080835404028352916020019161022e565b820191906000526020600020905b81548152906001019060200180831161021157829003601f168201915b5050505050905090565b61025c60405180606001604052806000815260200160008152602001600081525090565b50600090815260026020818152604092839020835160608101855281548152600182015492810192909252909101549181019190915290565b6102b960405180606001604052806000815260200160008152602001600081525090565b6000808061031d73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000610514565b9250925092506002600060015481526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050935083602001518211156103c057604051806060016040528060015460016103899190610850565b8152602081018490526040016103bb6103a386600a610983565b6103b585670de0b6b3a76400006106b3565b906106c8565b905293505b50505090565b6103ea60405180606001604052806000815260200160008152602001600081525090565b6000808061044e73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000610514565b9250925092506002600060015481526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050935083602001518211156103c057600180549060006104b08361098f565b9190505550604051806060016040528060015481526020018381526020016104de85600a6103a39190610983565b90526001805460009081526002602081815260409283902085518155908501519381019390935590830151910155935050505090565b6040517f98f93a9600000000000000000000000000000000000000000000000000000000815267ffffffffffffffff82166004820152600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8816906398f93a96906024016040805180830381865afa158015610592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b691906109c7565b915091508015610627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5072696365466565644e6f74457869737400000000000000000000000000000060448201526064015b60405180910390fd5b6040805160ff60b885901c16602082015261065291015b6040516020818303038152906040526106d4565b94506103e861067560c0604885901b901c60405160200161063e91815260200190565b61067f91906109fc565b604080516bffffffffffffffffffffffff601886901c1660208201529195506106a8910161063e565b925050509250925092565b60006106bf8284610a37565b90505b92915050565b60006106bf82846109fc565b60008151602014610741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6279746573206c656e677468206973206e6f742033322e000000000000000000604482015260640161061e565b506020015190565b600060208083528351808285015260005b818110156107765785810183015185820160400152820161075a565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156107c757600080fd5b5035919050565b600181811c908216806107e257607f821691505b60208210810361081b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156106c2576106c2610821565b600181815b808511156108bc57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156108a2576108a2610821565b808516156108af57918102915b93841c9390800290610868565b509250929050565b6000826108d3575060016106c2565b816108e0575060006106c2565b81600181146108f657600281146109005761091c565b60019150506106c2565b60ff84111561091157610911610821565b50506001821b6106c2565b5060208310610133831016604e8410600b841016171561093f575081810a6106c2565b6109498383610863565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561097b5761097b610821565b029392505050565b60006106bf83836108c4565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109c0576109c0610821565b5060010190565b600080604083850312156109da57600080fd5b82519150602083015180151581146109f157600080fd5b809150509250929050565b600082610a32577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b80820281158282048414176106c2576106c261082156fea264697066735822122058cb20a1681de1d8ba6827e53d9479497f396091518c413da6a2af12687c369d64736f6c63430008130033",
  "devdoc": {
    "errors": {
      "InvalidOracleRound()": [
        {
          "details": "Error for invalid oracle round"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "atVersion(uint256)": {
        "params": {
          "version": "The version of which to lookup"
        },
        "returns": {
          "oracleVersion": "Oracle version at version `version`"
        }
      },
      "constructor": {
        "params": {
          "description_": "The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)",
          "feed_": "Supra address (https://supraoracles.com/docs/price-feeds/networks)",
          "pairIndex_": "The index of supra trading pair (https://supraoracles.com/docs/price-feeds/trading-pairs)"
        }
      },
      "currentVersion()": {
        "returns": {
          "oracleVersion": "Current oracle version"
        }
      },
      "description()": {
        "returns": {
          "_0": "A string representing the description of the Oracle Provider."
        }
      },
      "oracleProviderName()": {
        "returns": {
          "_0": "A string representing the name of the Oracle Provider."
        }
      },
      "sync()": {
        "details": "`sync` is expected to be called soon after a phase update occurs in the underlying proxy.      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call      This is feasible in the short term due to how infrequent phase updates are, but phase update      and roundCount detection should eventually be implemented at the contract level.      Reverts if there is more than 1 phase to update in a single sync because we currently cannot      determine the startingRoundId for the intermediary phase.",
        "returns": {
          "oracleVersion": "The current oracle version after sync"
        }
      }
    },
    "stateVariables": {
      "_description": {
        "details": "The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)"
      },
      "feed": {
        "details": "Supra feed address (https://supraoracles.com/docs/price-feeds/networks)"
      },
      "lastSyncedVersion": {
        "details": "Last version seen when `sync` was called"
      },
      "oracleVersions": {
        "details": "Mapping of version to OracleVersion"
      },
      "pairIndex": {
        "details": "The index of supra trading pair (https://supraoracles.com/docs/price-feeds/trading-pairs)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "atVersion(uint256)": {
        "notice": "Returns the current oracle version"
      },
      "constructor": {
        "notice": "Initializes the contract state"
      },
      "currentVersion()": {
        "notice": "Returns the current oracle version"
      },
      "description()": {
        "notice": "Retrieves the description of the Oracle Provider."
      },
      "oracleProviderName()": {
        "notice": "Retrieves the name of the Oracle Provider."
      },
      "sync()": {
        "notice": "Checks for a new price and updates the internal phase annotation state accordingly"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 438,
        "contract": "contracts/oracle/SupraFeedOracle.sol:SupraFeedOracle",
        "label": "_description",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 441,
        "contract": "contracts/oracle/SupraFeedOracle.sol:SupraFeedOracle",
        "label": "lastSyncedVersion",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 447,
        "contract": "contracts/oracle/SupraFeedOracle.sol:SupraFeedOracle",
        "label": "oracleVersions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(OracleVersion)632_storage)"
      }
    ],
    "types": {
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(OracleVersion)632_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IOracleProvider.OracleVersion)",
        "numberOfBytes": "32",
        "value": "t_struct(OracleVersion)632_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(OracleVersion)632_storage": {
        "encoding": "inplace",
        "label": "struct IOracleProvider.OracleVersion",
        "members": [
          {
            "astId": 627,
            "contract": "contracts/oracle/SupraFeedOracle.sol:SupraFeedOracle",
            "label": "version",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 629,
            "contract": "contracts/oracle/SupraFeedOracle.sol:SupraFeedOracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 631,
            "contract": "contracts/oracle/SupraFeedOracle.sol:SupraFeedOracle",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}