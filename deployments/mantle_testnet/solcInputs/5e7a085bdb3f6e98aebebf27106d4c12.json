{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/oracle/interfaces/IOracleProvider.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IOracleProvider {\n    /// @dev Error for invalid oracle round\n    error InvalidOracleRound();\n\n    /**\n     * @dev A singular oracle version with its corresponding data\n     * @param version The iterative version\n     * @param timestamp the timestamp of the oracle update\n     * @param price The oracle price of the corresponding version\n     */\n    struct OracleVersion {\n        uint256 version;\n        uint256 timestamp;\n        int256 price;\n    }\n\n    /**\n     * @notice Checks for a new price and updates the internal phase annotation state accordingly\n     * @dev `sync` is expected to be called soon after a phase update occurs in the underlying proxy.\n     *      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call\n     *      This is feasible in the short term due to how infrequent phase updates are, but phase update\n     *      and roundCount detection should eventually be implemented at the contract level.\n     *      Reverts if there is more than 1 phase to update in a single sync because we currently cannot\n     *      determine the startingRoundId for the intermediary phase.\n     * @return The current oracle version after sync\n     */\n    function sync() external returns (OracleVersion memory);\n\n    /**\n     * @notice Returns the current oracle version\n     * @return oracleVersion Current oracle version\n     */\n    function currentVersion() external view returns (OracleVersion memory);\n\n    /**\n     * @notice Returns the current oracle version\n     * @param version The version of which to lookup\n     * @return oracleVersion Oracle version at version `version`\n     */\n    function atVersion(uint256 version) external view returns (OracleVersion memory);\n\n    /**\n     * @notice Retrieves the description of the Oracle Provider.\n     * @return A string representing the description of the Oracle Provider.\n     */\n    function description() external view returns (string memory);\n\n    /**\n     * @notice Retrieves the name of the Oracle Provider.\n     * @return A string representing the name of the Oracle Provider.\n     */\n    function oracleProviderName() external view returns (string memory);\n}\n"
    },
    "contracts/oracle/interfaces/ISupraSValueFeed.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.8.0 <0.9.0;\n\ninterface ISupraSValueFeed {\n\n    function getSvalue(uint64 _pairIndex) external view returns (bytes32, bool);\n\n    function getSvalues(uint64[] memory _pairIndexes) external view returns (bytes32[] memory, bool[] memory);\n\n}"
    },
    "contracts/oracle/SupraFeedOracle.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./interfaces/IOracleProvider.sol\";\nimport \"./types/SupraSValueFeed.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract SupraFeedOracle is IOracleProvider {\n    using SafeMath for uint256;\n\n    uint256 private constant BASE = 1e18;\n\n    /// @dev Supra feed address (https://supraoracles.com/docs/price-feeds/networks)\n    SupraSValueFeed public immutable feed;\n\n    /// @dev The index of supra trading pair (https://supraoracles.com/docs/price-feeds/trading-pairs)\n    uint64 public immutable pairIndex;\n\n    /// @dev The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)\n    string private _description;\n\n    /// @dev Last version seen when `sync` was called\n    uint256 private lastSyncedVersion;\n\n    /// @dev Mapping of version to OracleVersion\n    mapping(uint256 => OracleVersion) private oracleVersions;\n\n    /**\n     * @notice Initializes the contract state\n     * @param feed_ Supra address (https://supraoracles.com/docs/price-feeds/networks)\n     * @param pairIndex_ The index of supra trading pair (https://supraoracles.com/docs/price-feeds/trading-pairs)\n     * @param description_ The description of the Oracle Provider('ETH/USD', 'BTC/USD'...)\n     */\n    constructor(SupraSValueFeed feed_, uint64 pairIndex_, string memory description_) {\n        feed = feed_;\n        pairIndex = pairIndex_;\n        _description = description_;\n        sync();\n    }\n\n    /**\n     * @inheritdoc IOracleProvider\n     */\n    function sync() public returns (OracleVersion memory oracleVersion) {\n        (uint256 supraDecimal, uint256 timestamp, uint256 price) = feed.getPrice(pairIndex);\n        oracleVersion = oracleVersions[lastSyncedVersion];\n        if (timestamp > oracleVersion.timestamp) {\n            lastSyncedVersion++;\n            oracleVersion = OracleVersion({\n                version: lastSyncedVersion,\n                timestamp: timestamp,\n                price: int256(price.mul(BASE).div(10 ** supraDecimal))\n            });\n            oracleVersions[lastSyncedVersion] = oracleVersion;\n        }\n    }\n\n    /**\n     * @inheritdoc IOracleProvider\n     */\n    function currentVersion() public view returns (OracleVersion memory oracleVersion) {\n        (uint256 supraDecimal, uint256 timestamp, uint256 price) = feed.getPrice(pairIndex);\n        oracleVersion = oracleVersions[lastSyncedVersion];\n        if (timestamp > oracleVersion.timestamp) {\n            oracleVersion = OracleVersion({\n                version: lastSyncedVersion + 1,\n                timestamp: timestamp,\n                price: int256(price.mul(BASE).div(10 ** supraDecimal))\n            });\n        }\n    }\n\n    /**\n     * @inheritdoc IOracleProvider\n     */\n    function atVersion(uint256 version) public view returns (OracleVersion memory oracleVersion) {\n        return oracleVersions[version];\n    }\n\n    /**\n     * @inheritdoc IOracleProvider\n     */\n    function description() external view override returns (string memory) {\n        return _description;\n    }\n\n    /**\n     * @inheritdoc IOracleProvider\n     */\n    function oracleProviderName() external pure override returns (string memory) {\n        return \"supra\";\n    }\n}\n"
    },
    "contracts/oracle/types/ChainlinkRound.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/// @dev ChainlinkRound type\nstruct ChainlinkRound {\n    uint256 timestamp;\n    int256 answer;\n    uint256 roundId;\n}\nusing ChainlinkRoundLib for ChainlinkRound global;\n\n/**\n * @title ChainlinkRoundLib\n * @notice Library that manages Chainlink round parsing.\n */\nlibrary ChainlinkRoundLib {\n    /// @dev Phase ID offset location in the round ID\n    uint256 constant private PHASE_OFFSET = 64;\n\n    /**\n     * @notice Computes the chainlink phase ID from a round\n     * @param self Round to compute from\n     * @return Chainlink phase ID\n     */\n    function phaseId(ChainlinkRound memory self) internal pure returns (uint16) {\n        return uint16(self.roundId >> PHASE_OFFSET);\n    }\n}\n"
    },
    "contracts/oracle/types/SupraSValueFeed.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\";\nimport \"../interfaces/ISupraSValueFeed.sol\";\nimport \"./ChainlinkRound.sol\";\n\ntype SupraSValueFeed is address;\nusing SupraSValueFeedLib for SupraSValueFeed global;\n\nlibrary SupraSValueFeedLib {\n\n    function getPrice(\n        SupraSValueFeed self,\n        uint64 pareIndex\n    ) internal view returns (uint256 decimal, uint256 timestamp, uint256 price) {\n        // \n        /**\n         * flag indicating if the value is available or not.\n         * https://arbiscan.io/address/0x8a358F391d93f7558D5F5E61BDf533e2cc3Cf7a3#code\n         * if (supraStorage[_pairIndex] == bytes32(0)) {\n         *   flag = true;\n         * }\n         */\n        (bytes32 data, bool flag) = ISupraSValueFeed(SupraSValueFeed.unwrap(self)).getSvalue(pareIndex);\n\n        require(!flag, \"PriceFeedNotExist\");\n\n        // round = bytesToUint256(abi.encodePacked(data >> 192));\n        decimal = bytesToUint256(abi.encodePacked((data << 64) >> 248));\n        timestamp = bytesToUint256(abi.encodePacked((data << 72) >> 192)) / 1000; // MillSecond to Second\n        price = bytesToUint256(abi.encodePacked((data << 136) >> 160));\n    }\n\n    function bytesToUint256(bytes memory _bs) internal pure returns (uint256 value) {\n        require(_bs.length == 32, \"bytes length is not 32.\");\n        assembly {\n            value := mload(add(_bs, 0x20))\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 30000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "@chromatic-protocol/contracts/=contracts/"
    ]
  }
}