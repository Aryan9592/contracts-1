{
  "address": "0x4dd357d78979afE16a8e98333Af205Fa58C61a6f",
  "abi": [],
  "transactionHash": "0xb46ef693ab847093a3cb7562387e1a3e015b640c84d3181227058450bc148204",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0x4dd357d78979afE16a8e98333Af205Fa58C61a6f",
    "transactionIndex": 1,
    "gasUsed": "5176598",
    "logsBloom": "0x
    "blockHash": "0x7b116fddf3a62103a3a4e9f69a3c9857e8276a146dc1f703454280f7fc57b3f4",
    "transactionHash": "0xb46ef693ab847093a3cb7562387e1a3e015b640c84d3181227058450bc148204",
    "logs": [],
    "blockNumber": 27636913,
    "cumulativeGasUsed": "5176598",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6fec6a133006e784ffb2b008df2bee79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(MarketDeployer storage,address,address)\":{\"params\":{\"oracleProvider\":\"The address of the oracle provider\",\"self\":\"The MarketDeployer storage\",\"settlementToken\":\"The address of the settlement token\"},\"returns\":{\"market\":\"The address of the deployed ChromaticMarket contract\"}}},\"title\":\"MarketDeployerLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(MarketDeployer storage,address,address)\":{\"notice\":\"Deploys a ChromaticMarket contract\"}},\"notice\":\"Library for deploying a ChromaticMarket contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/external/deployer/MarketDeployer.sol\":\"MarketDeployerLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@equilibria/root/number/NumberMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\n/**\\n * @title NumberMath\\n * @notice Library for additional math functions that are not included in the OpenZeppelin libraries.\\n */\\nlibrary NumberMath {\\n    error DivisionByZero();\\n\\n    /**\\n     * @notice Divides `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Dividend\\n     * @param b Divisor\\n     * @return Resulting quotient\\n     */\\n    function divOut(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) revert DivisionByZero();\\n        return Math.ceilDiv(a, b);\\n    }\\n\\n    /**\\n     * @notice Divides `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Dividend\\n     * @param b Divisor\\n     * @return Resulting quotient\\n     */\\n    function divOut(int256 a, int256 b) internal pure returns (int256) {\\n        return sign(a) * sign(b) * int256(divOut(SignedMath.abs(a), SignedMath.abs(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the sign of an int256\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a int256 to find the sign of\\n     * @return Sign of the int256\\n     */\\n    function sign(int256 a) internal pure returns (int256) {\\n        if (a > 0) return 1;\\n        if (a < 0) return -1;\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3578ce6e74ee6589ba0468e2c539ef1eb51d6687b508e637620926eb8396b4\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed6.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\nimport \\\"./PackedFixed18.sol\\\";\\n\\n/// @dev Fixed18 type\\ntype Fixed18 is int256;\\nusing Fixed18Lib for Fixed18 global;\\ntype Fixed18Storage is bytes32;\\nusing Fixed18StorageLib for Fixed18Storage global;\\n\\n/**\\n * @title Fixed18Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed18Lib {\\n    error Fixed18OverflowError(uint256 value);\\n    error Fixed18PackingOverflowError(int256 value);\\n    error Fixed18PackingUnderflowError(int256 value);\\n\\n    int256 private constant BASE = 1e18;\\n    Fixed18 public constant ZERO = Fixed18.wrap(0);\\n    Fixed18 public constant ONE = Fixed18.wrap(BASE);\\n    Fixed18 public constant NEG_ONE = Fixed18.wrap(-1 * BASE);\\n    Fixed18 public constant MAX = Fixed18.wrap(type(int256).max);\\n    Fixed18 public constant MIN = Fixed18.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (Fixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed18OverflowError(value);\\n        return Fixed18.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed18 m) internal pure returns (Fixed18) {\\n        if (s > 0) return from(m);\\n        if (s < 0) {\\n            // Since from(m) multiplies m by BASE, from(m) cannot be type(int256).min\\n            // which is the only value that would overflow when negated. Therefore,\\n            // we can safely negate from(m) without checking for overflow.\\n            unchecked { return Fixed18.wrap(-1 * Fixed18.unwrap(from(m))); }\\n        }\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-6 signed fixed-decimal\\n     * @param a Base-6 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed6 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed6.unwrap(a) * 1e12);\\n    }\\n\\n    /**\\n     * @notice Creates a packed signed fixed-decimal from an signed fixed-decimal\\n     * @param a signed fixed-decimal\\n     * @return New packed signed fixed-decimal\\n     */\\n    function pack(Fixed18 a) internal pure returns (PackedFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value > type(int128).max) revert Fixed18PackingOverflowError(value);\\n        if (value < type(int128).min) revert Fixed18PackingUnderflowError(value);\\n        return PackedFixed18.wrap(int128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed18 a) internal pure returns (bool) {\\n        return Fixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) + Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) - Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together, rounding the result away from zero if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mulOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(NumberMath.divOut(Fixed18.unwrap(a) * Fixed18.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * BASE / Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function divOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18Lib.from(sign(a) * sign(b), a.abs().divOut(b.abs()));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldiv(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldivOut(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / Fixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(NumberMath.divOut(Fixed18.unwrap(a) * Fixed18.unwrap(b), Fixed18.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed18 a, Fixed18 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed18.unwrap(a), Fixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.min(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.max(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed18 a) internal pure returns (int256) {\\n        return Fixed18.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed18 a) internal pure returns (int256) {\\n        if (Fixed18.unwrap(a) > 0) return 1;\\n        if (Fixed18.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed18 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(SignedMath.abs(Fixed18.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed18StorageLib {\\n    function read(Fixed18Storage self) internal view returns (Fixed18 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed18Storage self, Fixed18 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c09201756ee291d1a54dd3b04cf0af5bf5fdea47e8f090d5af3c217e926f5ee\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./UFixed6.sol\\\";\\n\\n/// @dev Fixed6 type\\ntype Fixed6 is int256;\\nusing Fixed6Lib for Fixed6 global;\\ntype Fixed6Storage is bytes32;\\nusing Fixed6StorageLib for Fixed6Storage global;\\n\\n/**\\n * @title Fixed6Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed6Lib {\\n    error Fixed6OverflowError(uint256 value);\\n    error Fixed6PackingOverflowError(int256 value);\\n    error Fixed6PackingUnderflowError(int256 value);\\n\\n    int256 private constant BASE = 1e6;\\n    Fixed6 public constant ZERO = Fixed6.wrap(0);\\n    Fixed6 public constant ONE = Fixed6.wrap(BASE);\\n    Fixed6 public constant NEG_ONE = Fixed6.wrap(-1 * BASE);\\n    Fixed6 public constant MAX = Fixed6.wrap(type(int256).max);\\n    Fixed6 public constant MIN = Fixed6.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed6 a) internal pure returns (Fixed6) {\\n        uint256 value = UFixed6.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed6OverflowError(value);\\n        return Fixed6.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed6 m) internal pure returns (Fixed6) {\\n        if (s > 0) return from(m);\\n        if (s < 0) {\\n            // Since from(m) multiplies m by BASE, from(m) cannot be type(int256).min\\n            // which is the only value that would overflow when negated. Therefore,\\n            // we can safely negate from(m) without checking for overflow.\\n            unchecked { return Fixed6.wrap(-1 * Fixed6.unwrap(from(m))); }\\n        }\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-18 signed fixed-decimal\\n     * @param a Base-18 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed18.unwrap(a) / 1e12);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-18 signed fixed-decimal\\n     * @param a Base-18 signed fixed-decimal\\n     * @param roundOut Whether to round the result away from zero if there is a remainder\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed18 a, bool roundOut) internal pure returns (Fixed6) {\\n        return roundOut ? Fixed6.wrap(NumberMath.divOut(Fixed18.unwrap(a), 1e12)): from(a);\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed6 a) internal pure returns (bool) {\\n        return Fixed6.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) + Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) - Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * Fixed6.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together, rounding the result away from zero if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mulOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(NumberMath.divOut(Fixed6.unwrap(a) * Fixed6.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * BASE / Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function divOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(sign(a) * sign(b), a.abs().divOut(b.abs()));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed6 a, int256 b, int256 c) internal pure returns (Fixed6) {\\n        return muldiv(a, Fixed6.wrap(b), Fixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed6 a, int256 b, int256 c) internal pure returns (Fixed6) {\\n        return muldivOut(a, Fixed6.wrap(b), Fixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed6 a, Fixed6 b, Fixed6 c) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * Fixed6.unwrap(b) / Fixed6.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed6 a, Fixed6 b, Fixed6 c) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(NumberMath.divOut(Fixed6.unwrap(a) * Fixed6.unwrap(b), Fixed6.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed6 a, Fixed6 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed6.unwrap(a), Fixed6.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(SignedMath.min(Fixed6.unwrap(a), Fixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(SignedMath.max(Fixed6.unwrap(a), Fixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed6 a) internal pure returns (int256) {\\n        return Fixed6.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed6 a) internal pure returns (int256) {\\n        if (Fixed6.unwrap(a) > 0) return 1;\\n        if (Fixed6.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed6 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(SignedMath.abs(Fixed6.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed6StorageLib {\\n    function read(Fixed6Storage self) internal view returns (Fixed6 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed6Storage self, Fixed6 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x38397d2c63fadcf2787978cd4a4101ccacc4da7b062cd5fa99b36ab3846d7cb2\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Fixed18.sol\\\";\\n\\n/// @dev PackedFixed18 type\\ntype PackedFixed18 is int128;\\nusing PackedFixed18Lib for PackedFixed18 global;\\n\\n/**\\n * @title PackedFixed18Lib\\n * @dev A packed version of the Fixed18 which takes up half the storage space (two PackedFixed18 can be packed\\n *      into a single slot). Only valid within the range -1.7014118e+20 <= x <= 1.7014118e+20.\\n * @notice Library for the packed signed fixed-decimal type.\\n */\\nlibrary PackedFixed18Lib {\\n    PackedFixed18 public constant MAX = PackedFixed18.wrap(type(int128).max);\\n    PackedFixed18 public constant MIN = PackedFixed18.wrap(type(int128).min);\\n\\n    /**\\n     * @notice Creates an unpacked signed fixed-decimal from a packed signed fixed-decimal\\n     * @param self packed signed fixed-decimal\\n     * @return New unpacked signed fixed-decimal\\n     */\\n    function unpack(PackedFixed18 self) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(int256(PackedFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0xb52960cc8e3132e45d342bbbb1c6a96219022cd8557997933bd8250170268b64\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedUFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev PackedUFixed18 type\\ntype PackedUFixed18 is uint128;\\nusing PackedUFixed18Lib for PackedUFixed18 global;\\n\\n/**\\n * @title PackedUFixed18Lib\\n * @dev A packed version of the UFixed18 which takes up half the storage space (two PackedUFixed18 can be packed\\n *      into a single slot). Only valid within the range 0 <= x <= 3.4028237e+20.\\n * @notice Library for the packed unsigned fixed-decimal type.\\n */\\nlibrary PackedUFixed18Lib {\\n    PackedUFixed18 public constant MAX = PackedUFixed18.wrap(type(uint128).max);\\n\\n    /**\\n     * @notice Creates an unpacked unsigned fixed-decimal from a packed unsigned fixed-decimal\\n     * @param self packed unsigned fixed-decimal\\n     * @return New unpacked unsigned fixed-decimal\\n     */\\n    function unpack(PackedUFixed18 self) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(uint256(PackedUFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0xb5c5cd32d6530b2fe75228b6be32ebcb7762f6d7988b85a6b85a289ce8256d51\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./PackedUFixed18.sol\\\";\\nimport \\\"./UFixed6.sol\\\";\\n\\n/// @dev UFixed18 type\\ntype UFixed18 is uint256;\\nusing UFixed18Lib for UFixed18 global;\\ntype UFixed18Storage is bytes32;\\nusing UFixed18StorageLib for UFixed18Storage global;\\n\\n/**\\n * @title UFixed18Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed18Lib {\\n    error UFixed18UnderflowError(int256 value);\\n    error UFixed18PackingOverflowError(uint256 value);\\n\\n    uint256 private constant BASE = 1e18;\\n    UFixed18 public constant ZERO = UFixed18.wrap(0);\\n    UFixed18 public constant ONE = UFixed18.wrap(BASE);\\n    UFixed18 public constant MAX = UFixed18.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (UFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value < 0) revert UFixed18UnderflowError(value);\\n        return UFixed18.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-6 signed fixed-decimal\\n     * @param a Base-6 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed6 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed6.unwrap(a) * 1e12);\\n    }\\n\\n    /**\\n     * @notice Creates a packed unsigned fixed-decimal from an unsigned fixed-decimal\\n     * @param a unsigned fixed-decimal\\n     * @return New packed unsigned fixed-decimal\\n     */\\n    function pack(UFixed18 a) internal pure returns (PackedUFixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > type(uint128).max) revert UFixed18PackingOverflowError(value);\\n        return PackedUFixed18.wrap(uint128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed18 a) internal pure returns (bool) {\\n        return UFixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) + UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) - UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mulOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * UFixed18.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * BASE / UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function divOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * BASE, UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldiv(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldivOut(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / UFixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * UFixed18.unwrap(b), UFixed18.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed18 a, UFixed18 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed18.unwrap(a), UFixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.min(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.max(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed18 a) internal pure returns (uint256) {\\n        return UFixed18.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed18StorageLib {\\n    function read(UFixed18Storage self) internal view returns (UFixed18 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed18Storage self, UFixed18 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbcd3a035fc7129fc746d6dbebb3c9a9473172e3e7b7c01cf44774b71b33da6c\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed6.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev UFixed6 type\\ntype UFixed6 is uint256;\\nusing UFixed6Lib for UFixed6 global;\\ntype UFixed6Storage is bytes32;\\nusing UFixed6StorageLib for UFixed6Storage global;\\n\\n/**\\n * @title UFixed6Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed6Lib {\\n    error UFixed6UnderflowError(int256 value);\\n    error UFixed6PackingOverflowError(uint256 value);\\n\\n    uint256 private constant BASE = 1e6;\\n    UFixed6 public constant ZERO = UFixed6.wrap(0);\\n    UFixed6 public constant ONE = UFixed6.wrap(BASE);\\n    UFixed6 public constant MAX = UFixed6.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed6 a) internal pure returns (UFixed6) {\\n        int256 value = Fixed6.unwrap(a);\\n        if (value < 0) revert UFixed6UnderflowError(value);\\n        return UFixed6.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates an unsigned fixed-decimal from a base-18 unsigned fixed-decimal\\n     * @param a Base-18 unsigned fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed18.unwrap(a) / 1e12);\\n    }\\n\\n    /**\\n     * @notice Creates an unsigned fixed-decimal from a base-18 unsigned fixed-decimal\\n     * @param a Base-18 unsigned fixed-decimal\\n     * @param roundOut Whether to round the result away from zero if there is a remainder\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(UFixed18 a, bool roundOut) internal pure returns (UFixed6) {\\n        return roundOut ? UFixed6.wrap(NumberMath.divOut(UFixed18.unwrap(a), 1e12)): from(a);\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed6 a) internal pure returns (bool) {\\n        return UFixed6.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) + UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) - UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * UFixed6.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mulOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * UFixed6.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * BASE / UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function divOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * BASE, UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed6 a, uint256 b, uint256 c) internal pure returns (UFixed6) {\\n        return muldiv(a, UFixed6.wrap(b), UFixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed6 a, uint256 b, uint256 c) internal pure returns (UFixed6) {\\n        return muldivOut(a, UFixed6.wrap(b), UFixed6.wrap(c));\\n    }\\n\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed6 a, UFixed6 b, UFixed6 c) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * UFixed6.unwrap(b) / UFixed6.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed6 a, UFixed6 b, UFixed6 c) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * UFixed6.unwrap(b), UFixed6.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed6 a, UFixed6 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed6.unwrap(a), UFixed6.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(Math.min(UFixed6.unwrap(a), UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(Math.max(UFixed6.unwrap(a), UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed6 a) internal pure returns (uint256) {\\n        return UFixed6.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed6StorageLib {\\n    function read(UFixed6Storage self) internal view returns (UFixed6 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed6Storage self, UFixed6 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf6407bf4286a410bdec2a39c1cbda92ef775f17ed24d8d174e8dbf45d9018bd6\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\",\"keccak256\":\"0x8b4a492c14765d24f935516cb3437a1b39fbd65f20fc8828e7880fb1bdcfba86\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\n\",\"keccak256\":\"0xdffd96e40500212217d1267d1fa5eb294fe72ce5419638d6801996e0485580b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.4;\\n\\nimport \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n *\\n * _Available since v4.6._\\n */\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\\n\",\"keccak256\":\"0x4859ffd6dd69382a1462930c00b6e394007da80e78e510f56930271034737bf2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/core/CLBToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Base64} from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155Supply, ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\nimport {IChromaticMarket} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarket.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\nimport {BPS} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\n\\n/**\\n * @title CLBToken\\n * @dev CLBToken is an ERC1155 token contract that represents Liquidity Bin tokens.\\n *      CLBToken allows minting and burning of tokens by the Chromatic Market contract.\\n */\\ncontract CLBToken is ERC1155Supply, ICLBToken {\\n    using Strings for uint256;\\n    using Strings for uint128;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n\\n    IChromaticMarket public immutable market;\\n\\n    error OnlyAccessableByMarket();\\n\\n    /**\\n     * @dev Modifier to restrict access to the Chromatic Market contract.\\n     *      Only the market contract is allowed to call functions with this modifier.\\n     *      Reverts with an error if the caller is not the market contract.\\n     */\\n    modifier onlyMarket() {\\n        if (address(market) != (msg.sender)) revert OnlyAccessableByMarket();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the CLBToken contract.\\n     *      The constructor sets the market contract address as the caller.\\n     */\\n    constructor() ERC1155(\\\"\\\") {\\n        market = IChromaticMarket(msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc ICLBToken\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return market.settlementToken().decimals();\\n    }\\n\\n    /**\\n     * @inheritdoc ICLBToken\\n     */\\n    function totalSupply(\\n        uint256 id\\n    ) public view virtual override(ERC1155Supply, ICLBToken) returns (uint256) {\\n        return super.totalSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc ICLBToken\\n     */\\n    function totalSupplyBatch(\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        uint256[] memory supplies = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            supplies[i] = super.totalSupply(ids[i]);\\n        }\\n        return supplies;\\n    }\\n\\n    /**\\n     * @inheritdoc ICLBToken\\n     * @dev This function can only be called by the Chromatic Market contract.\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override onlyMarket {\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ICLBToken\\n     * @dev This function can only be called by the Chromatic Market contract.\\n     */\\n    function burn(address from, uint256 id, uint256 amount) external override onlyMarket {\\n        _burn(from, id, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc ICLBToken\\n     */\\n    function name(uint256 id) public view override returns (string memory) {\\n        return string(abi.encodePacked(\\\"CLB - \\\", description(id)));\\n    }\\n\\n    /**\\n     * @inheritdoc ICLBToken\\n     */\\n    function description(uint256 id) public view override returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _tokenSymbol(),\\n                    \\\" - \\\",\\n                    _indexName(),\\n                    \\\" \\\",\\n                    _formattedFeeRate(decodeId(id))\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc ICLBToken\\n     */\\n    function image(uint256 id) public view override returns (string memory) {\\n        int16 tradingFeeRate = decodeId(id);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(_svg(tradingFeeRate, _tokenSymbol(), _indexName()))\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155MetadataURI\\n     */\\n    function uri(\\n        uint256 id\\n    ) public view override(ERC1155, IERC1155MetadataURI) returns (string memory) {\\n        bytes memory metadata = abi.encodePacked(\\n            '{\\\"name\\\": \\\"',\\n            name(id),\\n            '\\\", \\\"description\\\": \\\"',\\n            description(id),\\n            '\\\", \\\"decimals\\\": \\\"',\\n            uint256(decimals()).toString(),\\n            '\\\", \\\"image\\\":\\\"',\\n            image(id),\\n            '\\\"',\\n            \\\"}\\\"\\n        );\\n\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(metadata)));\\n    }\\n\\n    /**\\n     * @dev Encodes a trading fee rate into a token ID.\\n     * @param tradingFeeRate The trading fee rate to encode.\\n     * @return id The encoded token ID.\\n     */\\n    function encodeId(int16 tradingFeeRate) internal pure returns (uint256 id) {\\n        id = CLBTokenLib.encodeId(tradingFeeRate);\\n    }\\n\\n    /**\\n     * @dev Decodes a token ID into a trading fee rate.\\n     * @param id The token ID to decode.\\n     * @return tradingFeeRate The decoded trading fee rate.\\n     */\\n    function decodeId(uint256 id) internal pure returns (int16 tradingFeeRate) {\\n        tradingFeeRate = CLBTokenLib.decodeId(id);\\n    }\\n\\n    /**\\n     * @dev Retrieves the symbol of the settlement token.\\n     * @return The symbol of the settlement token.\\n     */\\n    function _tokenSymbol() private view returns (string memory) {\\n        return market.settlementToken().symbol();\\n    }\\n\\n    /**\\n     * @dev Retrieves the name of the index.\\n     * @return The name of the index.\\n     */\\n    function _indexName() private view returns (string memory) {\\n        return market.oracleProvider().description();\\n    }\\n\\n    /**\\n     * @dev Formats a fee rate into a human-readable string.\\n     * @param feeRate The fee rate to format.\\n     * @return The formatted fee rate as a bytes array.\\n     */\\n    function _formattedFeeRate(int16 feeRate) private pure returns (bytes memory) {\\n        uint256 absFeeRate = uint16(feeRate < 0 ? -(feeRate) : feeRate);\\n\\n        uint256 pct = BPS / 100;\\n        uint256 integerPart = absFeeRate / pct;\\n        uint256 fractionalPart = absFeeRate % pct;\\n\\n        bytes memory fraction;\\n        if (fractionalPart > 0) {\\n            uint256 fractionalPart1 = fractionalPart / (pct / 10);\\n            uint256 fractionalPart2 = fractionalPart % (pct / 10);\\n\\n            fraction = bytes(\\\".\\\");\\n            if (fractionalPart2 == 0) {\\n                fraction = abi.encodePacked(fraction, fractionalPart1.toString());\\n            } else {\\n                fraction = abi.encodePacked(\\n                    fraction,\\n                    fractionalPart1.toString(),\\n                    fractionalPart2.toString()\\n                );\\n            }\\n        }\\n\\n        return abi.encodePacked(feeRate < 0 ? \\\"-\\\" : \\\"+\\\", integerPart.toString(), fraction, \\\"%\\\");\\n    }\\n\\n    uint256 private constant _W = 480;\\n    uint256 private constant _H = 480;\\n    string private constant _WS = \\\"480\\\";\\n    string private constant _HS = \\\"480\\\";\\n    uint256 private constant _BARS = 9;\\n\\n    function _svg(\\n        int16 feeRate,\\n        string memory symbol,\\n        string memory index\\n    ) private pure returns (bytes memory) {\\n        bytes memory formattedFeeRate = _formattedFeeRate(feeRate);\\n        string memory color = _color(feeRate);\\n        bool long = feeRate > 0;\\n\\n        bytes memory text = abi.encodePacked(\\n            '<text class=\\\"st13 st14\\\" font-size=\\\"64\\\" transform=\\\"translate(440 216.852)\\\" text-anchor=\\\"end\\\">',\\n            formattedFeeRate,\\n            \\\"</text>\\\"\\n            '<text class=\\\"st13 st16\\\" font-size=\\\"28\\\" transform=\\\"translate(440 64.036)\\\" text-anchor=\\\"end\\\">',\\n            symbol,\\n            \\\"</text>\\\"\\n            '<path d=\\\"M104.38 40 80.74 51.59V40L63.91 52.17v47.66L80.74 112v-11.59L104.38 112zm-43.34 0L50.87 52.17v47.66L61.04 112zm-16.42 0L40 52.17v47.66L44.62 112z\\\" class=\\\"st13\\\" />'\\n            '<text class=\\\"st13 st14 st18\\\" transform=\\\"translate(440 109.356)\\\" text-anchor=\\\"end\\\">',\\n            index,\\n            \\\" Market</text>\\\"\\n            '<path fill=\\\"none\\\" stroke=\\\"#fff\\\" stroke-miterlimit=\\\"10\\\" d=\\\"M440 140H40\\\" opacity=\\\".5\\\" />'\\n            '<text class=\\\"st13 st14 st18\\\" transform=\\\"translate(40 438.578)\\\">CLB</text>'\\n            '<text class=\\\"st13 st16\\\" font-size=\\\"22\\\" transform=\\\"translate(107.664 438.578)\\\">Chromatic Liquidity Bin Token</text>'\\n            '<text class=\\\"st13 st16\\\" font-size=\\\"16\\\" transform=\\\"translate(54.907 390.284)\\\">ERC-1155</text>'\\n            '<path fill=\\\"none\\\" stroke=\\\"#fff\\\" stroke-miterlimit=\\\"10\\\" d=\\\"M132.27 399.77h-84c-4.42 0-8-3.58-8-8v-14c0-4.42 3.58-8 8-8h84c4.42 0 8 3.58 8 8v14c0 4.42-3.58 8-8 8z\\\" />'\\n        );\\n\\n        return\\n            abi.encodePacked(\\n                '<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>'\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xml:space=\\\"preserve\\\" x=\\\"0\\\" y=\\\"0\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 ',\\n                _WS,\\n                \\\" \\\",\\n                _HS,\\n                '\\\">'\\n                \\\"<style>\\\"\\n                \\\"  .st13 {\\\"\\n                \\\"    fill: #fff\\\"\\n                \\\"  }\\\"\\n                \\\"  .st14 {\\\"\\n                '    font-family: \\\"NotoSans-Bold\\\";'\\n                \\\"  }\\\"\\n                \\\"  .st16 {\\\"\\n                '    font-family: \\\"NotoSans-Regular\\\";'\\n                \\\"  }\\\"\\n                \\\"  .st18 {\\\"\\n                \\\"    font-size: 32px\\\"\\n                \\\"  }\\\"\\n                \\\"</style>\\\",\\n                _background(long),\\n                _bars(long, color, _activeBar(feeRate)),\\n                text,\\n                \\\"</svg>\\\"\\n            );\\n    }\\n\\n    function _background(bool long) private pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                '<linearGradient id=\\\"bg\\\" x1=\\\"',\\n                long ? \\\"0\\\" : _WS,\\n                '\\\" x2=\\\"',\\n                long ? _WS : \\\"0\\\",\\n                '\\\" y1=\\\"',\\n                _HS,\\n                '\\\" y2=\\\"0\\\" gradientUnits=\\\"userSpaceOnUse\\\">',\\n                long\\n                    ? '<stop offset=\\\"0\\\" />'\\n                    '<stop offset=\\\".3\\\" stop-color=\\\"#010302\\\" />'\\n                    '<stop offset=\\\".5\\\" stop-color=\\\"#040b07\\\" />'\\n                    '<stop offset=\\\".6\\\" stop-color=\\\"#0a1910\\\" />'\\n                    '<stop offset=\\\".7\\\" stop-color=\\\"#132e1d\\\" />'\\n                    '<stop offset=\\\".8\\\" stop-color=\\\"#1d482e\\\" />'\\n                    '<stop offset=\\\".9\\\" stop-color=\\\"#2b6843\\\" />'\\n                    '<stop offset=\\\"1\\\" stop-color=\\\"#358153\\\" />'\\n                    : '<stop offset=\\\"0\\\" style=\\\"stop-color:#000\\\" />'\\n                    '<stop offset=\\\".3\\\" style=\\\"stop-color:#030101\\\" />'\\n                    '<stop offset=\\\".4\\\" style=\\\"stop-color:#0b0605\\\" />'\\n                    '<stop offset=\\\".6\\\" style=\\\"stop-color:#190f0b\\\" />'\\n                    '<stop offset=\\\".7\\\" style=\\\"stop-color:#2e1a13\\\" />'\\n                    '<stop offset=\\\".8\\\" style=\\\"stop-color:#482a1f\\\" />'\\n                    '<stop offset=\\\".9\\\" style=\\\"stop-color:#683c2c\\\" />'\\n                    '<stop offset=\\\"1\\\" style=\\\"stop-color:#8e523c\\\" />',\\n                \\\"</linearGradient>\\\"\\n                '<path fill=\\\"url(#bg)\\\" d=\\\"M0 0h',\\n                _WS,\\n                \\\"v\\\",\\n                _HS,\\n                'H0z\\\" />'\\n            );\\n    }\\n\\n    function _activeBar(int16 feeRate) private pure returns (uint256) {\\n        uint256 absFeeRate = uint16(feeRate < 0 ? -(feeRate) : feeRate);\\n\\n        if (absFeeRate >= BPS / 10) {\\n            return (absFeeRate / (BPS / 10 / 2)) - 2;\\n        } else if (absFeeRate >= BPS / 100) {\\n            return (absFeeRate / (BPS / 100)) - 1;\\n        } else if (absFeeRate >= BPS / 1000) {\\n            return (absFeeRate / (BPS / 1000)) - 1;\\n        } else if (absFeeRate >= BPS / 10000) {\\n            return (absFeeRate / (BPS / 10000)) - 1;\\n        }\\n        return 0;\\n    }\\n\\n    function _bars(\\n        bool long,\\n        string memory color,\\n        uint256 activeBar\\n    ) private pure returns (bytes memory bars) {\\n        for (uint256 i = 0; i < _BARS; i++) {\\n            bars = abi.encodePacked(bars, _bar(i, long, color, i == activeBar));\\n        }\\n    }\\n\\n    function _bar(\\n        uint256 barIndex,\\n        bool long,\\n        string memory color,\\n        bool active\\n    ) private pure returns (bytes memory) {\\n        (uint256 pos, uint256 width, uint256 height, uint256 hDelta) = _barAttributes(\\n            barIndex,\\n            long\\n        );\\n\\n        string memory gX = _gradientX(barIndex, long);\\n        string memory gY = (_H - height).toString();\\n\\n        bytes memory stop = abi.encodePacked(\\n            '<stop offset=\\\"0\\\" stop-color=\\\"',\\n            color,\\n            '\\\" stop-opacity=\\\"0\\\"/>'\\n            '<stop offset=\\\"1\\\" stop-color=\\\"',\\n            color,\\n            '\\\"/>'\\n        );\\n        bytes memory path = _path(barIndex, long, pos, width, height, hDelta);\\n        bytes memory bar = abi.encodePacked(\\n            '<linearGradient id=\\\"bar',\\n            barIndex.toString(),\\n            '\\\" x1=\\\"',\\n            gX,\\n            '\\\" x2=\\\"',\\n            gX,\\n            '\\\" y1=\\\"',\\n            gY,\\n            '\\\" y2=\\\"',\\n            _HS,\\n            '\\\" gradientUnits=\\\"userSpaceOnUse\\\">',\\n            stop,\\n            \\\"</linearGradient>\\\",\\n            path\\n        );\\n\\n        if (active) {\\n            bytes memory edge = _edge(long, pos, width, height);\\n            return abi.encodePacked(bar, bar, bar, edge);\\n        }\\n        return bar;\\n    }\\n\\n    function _edge(\\n        bool long,\\n        uint256 pos,\\n        uint256 width,\\n        uint256 height\\n    ) private pure returns (bytes memory) {\\n        string memory _epos = (long ? pos + width : pos - width).toString();\\n\\n        bytes memory path = abi.encodePacked(\\n            '<path fill=\\\"url(#edge)\\\" d=\\\"M',\\n            _epos,\\n            \\\" \\\",\\n            _HS,\\n            \\\"h\\\",\\n            long ? \\\"-\\\" : \\\"\\\",\\n            \\\"2v-\\\",\\n            height.toString(),\\n            \\\"H\\\",\\n            _epos,\\n            'z\\\"/>'\\n        );\\n        return\\n            abi.encodePacked(\\n                '<linearGradient id=\\\"edge\\\" x1=\\\"',\\n                _epos,\\n                '\\\" x2=\\\"',\\n                _epos,\\n                '\\\" y1=\\\"',\\n                _HS,\\n                '\\\" y2=\\\"',\\n                (_H - height).toString(),\\n                '\\\" gradientUnits=\\\"userSpaceOnUse\\\">'\\n                '<stop offset=\\\"0\\\" stop-color=\\\"#fff\\\" stop-opacity=\\\"0\\\"/>'\\n                '<stop offset=\\\".5\\\" stop-color=\\\"#fff\\\" stop-opacity=\\\".5\\\"/>'\\n                '<stop offset=\\\"1\\\" stop-color=\\\"#fff\\\" stop-opacity=\\\"0\\\"/>'\\n                \\\"</linearGradient>\\\",\\n                path\\n            );\\n    }\\n\\n    function _path(\\n        uint256 barIndex,\\n        bool long,\\n        uint256 pos,\\n        uint256 width,\\n        uint256 height,\\n        uint256 hDelta\\n    ) private pure returns (bytes memory) {\\n        string memory _w = width.toString();\\n        bytes memory _h = abi.encodePacked(\\\"h\\\", long ? \\\"\\\" : \\\"-\\\", _w);\\n        bytes memory _l = abi.encodePacked(\\\"l\\\", long ? \\\"-\\\" : \\\"\\\", _w, \\\" \\\", hDelta.toString());\\n        return\\n            abi.encodePacked(\\n                '<path fill=\\\"url(#bar',\\n                barIndex.toString(),\\n                ')\\\" d=\\\"M',\\n                pos.toString(),\\n                \\\" \\\",\\n                _HS,\\n                _h,\\n                \\\"v-\\\",\\n                height.toString(),\\n                _l,\\n                'z\\\"/>'\\n            );\\n    }\\n\\n    function _barAttributes(\\n        uint256 barIndex,\\n        bool long\\n    ) private pure returns (uint256 pos, uint256 width, uint256 height, uint256 hDelta) {\\n        uint256[_BARS] memory widths = [uint256(44), 45, 48, 51, 53, 55, 58, 62, 64];\\n        uint256[_BARS] memory heights = [uint256(480), 415, 309, 240, 185, 144, 111, 86, 67];\\n        uint256[_BARS] memory hDeltas = [uint256(33), 27, 19, 14, 10, 8, 5, 4, 3];\\n\\n        width = widths[barIndex];\\n        height = heights[barIndex];\\n        hDelta = hDeltas[barIndex];\\n        pos = long ? 0 : _W;\\n        for (uint256 i = 0; i < barIndex; i++) {\\n            pos = long ? pos + widths[i] : pos - widths[i];\\n        }\\n    }\\n\\n    function _gradientX(uint256 barIndex, bool long) private pure returns (string memory) {\\n        string[_BARS] memory longXs = [\\n            \\\"-1778\\\",\\n            \\\"-1733.4\\\",\\n            \\\"-1686.6\\\",\\n            \\\"-1637.4\\\",\\n            \\\"-1585.7\\\",\\n            \\\"-1531.5\\\",\\n            \\\"-1474.6\\\",\\n            \\\"-1414.8\\\",\\n            \\\"-1352\\\"\\n        ];\\n        string[_BARS] memory shortXs = [\\n            \\\"-12373.4\\\",\\n            \\\"-12328.8\\\",\\n            \\\"-12281.9\\\",\\n            \\\"-12232.8\\\",\\n            \\\"-12181.1\\\",\\n            \\\"-12126.9\\\",\\n            \\\"-12069.9\\\",\\n            \\\"-12010.1\\\",\\n            \\\"-11947.3\\\"\\n        ];\\n\\n        return long ? longXs[barIndex] : shortXs[barIndex];\\n    }\\n\\n    function _color(int16 feeRate) private pure returns (string memory) {\\n        uint256 absFeeRate = uint16(feeRate < 0 ? -(feeRate) : feeRate);\\n\\n        if (absFeeRate >= BPS / 10) {\\n            // feeRate >= 10%  or feeRate <= -10%\\n            return feeRate > 0 ? \\\"#FFCE94\\\" : \\\"#A0DC50\\\";\\n        } else if (absFeeRate >= BPS / 100) {\\n            // 10% > feeRate >= 1% or -1% >= feeRate > -10%\\n            return feeRate > 0 ? \\\"#FFAB5E\\\" : \\\"#82E664\\\";\\n        } else if (absFeeRate >= BPS / 1000) {\\n            // 1% > feeRate >= 0.1% or -0.1% >= feeRate > -1%\\n            return feeRate > 0 ? \\\"#FF966E\\\" : \\\"#5ADC8C\\\";\\n        } else if (absFeeRate >= BPS / 10000) {\\n            // 0.1% > feeRate >= 0.01% or -0.01% >= feeRate > -0.1%\\n            return feeRate > 0 ? \\\"#FE8264\\\" : \\\"#3CD2AA\\\";\\n        }\\n        // feeRate == 0%\\n        return \\\"#000000\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x5901c8f480d8f43f675edc5c262e06f806a2cd7fc220cb2ac3062940a0b04897\",\"license\":\"BUSL-1.1\"},\"contracts/core/ChromaticMarket.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IChromaticMarket} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarket.sol\\\";\\nimport {Liquidity} from \\\"@chromatic-protocol/contracts/core/base/market/Liquidity.sol\\\";\\nimport {Trade} from \\\"@chromatic-protocol/contracts/core/base/market/Trade.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\n\\n/**\\n * @title ChromaticMarket\\n * @dev A contract that represents a Chromatic market, combining trade and liquidity functionalities.\\n */\\ncontract ChromaticMarket is Trade, Liquidity {\\n    /**\\n     * @inheritdoc IChromaticMarket\\n     * @dev This function settles the market by synchronizing the oracle version\\n     *      and calling the settle function of the liquidity pool.\\n     */\\n    function settle() external override {\\n        LpContext memory ctx = newLpContext();\\n        ctx.syncOracleVersion();\\n        liquidityPool.settle(ctx);\\n    }\\n}\\n\",\"keccak256\":\"0xf6f1c43f59ad491aaf1caf8975a4be1944988e2790bb7d75da42b5446d4a891b\",\"license\":\"BUSL-1.1\"},\"contracts/core/base/market/Liquidity.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\\\";\\nimport {ILiquidity} from \\\"@chromatic-protocol/contracts/core/interfaces/market/ILiquidity.sol\\\";\\nimport {IChromaticLiquidityCallback} from \\\"@chromatic-protocol/contracts/core/interfaces/callback/IChromaticLiquidityCallback.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {LpReceipt, LpAction} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\nimport {MarketBase} from \\\"@chromatic-protocol/contracts/core/base/market/MarketBase.sol\\\";\\n\\n/**\\n * @title Liquidity\\n * @dev Contract for managing liquidity in a market.\\n */\\nabstract contract Liquidity is MarketBase, IERC1155Receiver {\\n    using Math for uint256;\\n\\n    uint256 constant MINIMUM_LIQUIDITY = 10 ** 3;\\n\\n    uint256 internal _lpReceiptId;\\n\\n    /**\\n     * @dev Modifier to restrict a function to be called only by the vault contract.\\n     */\\n    modifier onlyVault() {\\n        if (msg.sender != address(vault)) revert OnlyAccessableByVault();\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function addLiquidity(\\n        address recipient,\\n        int16 tradingFeeRate,\\n        bytes calldata data\\n    ) external override nonReentrant returns (LpReceipt memory) {\\n        uint256 balanceBefore = settlementToken.balanceOf(address(vault));\\n        IChromaticLiquidityCallback(msg.sender).addLiquidityCallback(\\n            address(settlementToken),\\n            address(vault),\\n            data\\n        );\\n\\n        uint256 amount = settlementToken.balanceOf(address(vault)) - balanceBefore;\\n        if (amount <= MINIMUM_LIQUIDITY) revert TooSmallAmount();\\n\\n        LpContext memory ctx = newLpContext();\\n        ctx.syncOracleVersion();\\n\\n        vault.onAddLiquidity(amount);\\n        liquidityPool.acceptAddLiquidity(ctx, tradingFeeRate, amount);\\n\\n        LpReceipt memory receipt = newLpReceipt(\\n            ctx,\\n            LpAction.ADD_LIQUIDITY,\\n            amount,\\n            recipient,\\n            tradingFeeRate\\n        );\\n        lpReceipts[receipt.id] = receipt;\\n\\n        emit AddLiquidity(recipient, receipt);\\n        return receipt;\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function claimLiquidity(uint256 receiptId, bytes calldata data) external override nonReentrant {\\n        LpReceipt memory receipt = getLpReceipt(receiptId);\\n        if (receipt.action != LpAction.ADD_LIQUIDITY) revert InvalidLpReceiptAction();\\n\\n        LpContext memory ctx = newLpContext();\\n        ctx.syncOracleVersion();\\n\\n        if (!ctx.isPastVersion(receipt.oracleVersion)) revert NotClaimableLpReceipt();\\n\\n        uint256 clbTokenAmount = liquidityPool.acceptClaimLiquidity(\\n            ctx,\\n            receipt.tradingFeeRate,\\n            receipt.amount,\\n            receipt.oracleVersion\\n        );\\n        clbToken.safeTransferFrom(\\n            address(this),\\n            receipt.recipient,\\n            receipt.clbTokenId(),\\n            clbTokenAmount,\\n            bytes(\\\"\\\")\\n        );\\n\\n        IChromaticLiquidityCallback(msg.sender).claimLiquidityCallback(receipt.id, data);\\n        delete lpReceipts[receiptId];\\n\\n        emit ClaimLiquidity(receipt.recipient, clbTokenAmount, receipt);\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function removeLiquidity(\\n        address recipient,\\n        int16 tradingFeeRate,\\n        bytes calldata data\\n    ) external override nonReentrant returns (LpReceipt memory) {\\n        LpContext memory ctx = newLpContext();\\n        ctx.syncOracleVersion();\\n\\n        LpReceipt memory receipt = newLpReceipt(\\n            ctx,\\n            LpAction.REMOVE_LIQUIDITY,\\n            0,\\n            recipient,\\n            tradingFeeRate\\n        );\\n\\n        uint256 clbTokenId = receipt.clbTokenId();\\n        uint256 balanceBefore = clbToken.balanceOf(address(this), clbTokenId);\\n        IChromaticLiquidityCallback(msg.sender).removeLiquidityCallback(\\n            address(clbToken),\\n            clbTokenId,\\n            data\\n        );\\n\\n        uint256 clbTokenAmount = clbToken.balanceOf(address(this), clbTokenId) - balanceBefore;\\n        if (clbTokenAmount == 0) revert TooSmallAmount();\\n\\n        liquidityPool.acceptRemoveLiquidity(ctx, tradingFeeRate, clbTokenAmount);\\n        receipt.amount = clbTokenAmount;\\n\\n        lpReceipts[receipt.id] = receipt;\\n        emit RemoveLiquidity(recipient, receipt);\\n        return receipt;\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function withdrawLiquidity(\\n        uint256 receiptId,\\n        bytes calldata data\\n    ) external override nonReentrant {\\n        LpReceipt memory receipt = getLpReceipt(receiptId);\\n        if (receipt.action != LpAction.REMOVE_LIQUIDITY) revert InvalidLpReceiptAction();\\n\\n        LpContext memory ctx = newLpContext();\\n        ctx.syncOracleVersion();\\n\\n        if (!ctx.isPastVersion(receipt.oracleVersion)) revert NotWithdrawableLpReceipt();\\n\\n        address recipient = receipt.recipient;\\n        uint256 clbTokenAmount = receipt.amount;\\n\\n        (uint256 amount, uint256 burnedCLBTokenAmount) = liquidityPool.acceptWithdrawLiquidity(\\n            ctx,\\n            receipt.tradingFeeRate,\\n            clbTokenAmount,\\n            receipt.oracleVersion\\n        );\\n\\n        clbToken.safeTransferFrom(\\n            address(this),\\n            recipient,\\n            receipt.clbTokenId(),\\n            clbTokenAmount - burnedCLBTokenAmount,\\n            bytes(\\\"\\\")\\n        );\\n        vault.onWithdrawLiquidity(recipient, amount);\\n\\n        IChromaticLiquidityCallback(msg.sender).withdrawLiquidityCallback(receipt.id, data);\\n        delete lpReceipts[receiptId];\\n\\n        emit WithdrawLiquidity(recipient, amount, burnedCLBTokenAmount, receipt);\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function getBinLiquidity(int16 tradingFeeRate) external view override returns (uint256 amount) {\\n        amount = liquidityPool.getBinLiquidity(tradingFeeRate);\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function getBinFreeLiquidity(\\n        int16 tradingFeeRate\\n    ) external view override returns (uint256 amount) {\\n        amount = liquidityPool.getBinFreeLiquidity(tradingFeeRate);\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function distributeEarningToBins(uint256 earning, uint256 marketBalance) external onlyVault {\\n        liquidityPool.distributeEarning(earning, marketBalance);\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function getBinValues(\\n        int16[] memory tradingFeeRates\\n    ) external view override returns (uint256[] memory) {\\n        LpContext memory ctx = newLpContext();\\n        uint256[] memory values = new uint256[](tradingFeeRates.length);\\n        for (uint256 i = 0; i < tradingFeeRates.length; i++) {\\n            values[i] = liquidityPool.binValue(tradingFeeRates[i], ctx);\\n        }\\n        return values;\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function getLpReceipt(uint256 receiptId) public view returns (LpReceipt memory receipt) {\\n        receipt = lpReceipts[receiptId];\\n        if (receipt.id == 0) revert NotExistLpReceipt();\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function claimableLiquidity(\\n        int16 tradingFeeRate,\\n        uint256 oracleVersion\\n    ) external view returns (ClaimableLiquidity memory) {\\n        return liquidityPool.claimableLiquidity(tradingFeeRate, oracleVersion);\\n    }\\n\\n    /**\\n     * @inheritdoc ILiquidity\\n     */\\n    function liquidityBinStatuses() external view returns (LiquidityBinStatus[] memory) {\\n        return liquidityPool.liquidityBinStatuses(newLpContext());\\n    }\\n\\n    /**\\n     * @dev Creates a new liquidity receipt.\\n     * @param ctx The liquidity context.\\n     * @param action The liquidity action.\\n     * @param amount The amount of liquidity.\\n     * @param recipient The address to receive the liquidity.\\n     * @param tradingFeeRate The trading fee rate for the liquidity.\\n     * @return The new liquidity receipt.\\n     */\\n    function newLpReceipt(\\n        LpContext memory ctx,\\n        LpAction action,\\n        uint256 amount,\\n        address recipient,\\n        int16 tradingFeeRate\\n    ) private returns (LpReceipt memory) {\\n        return\\n            LpReceipt({\\n                id: ++_lpReceiptId,\\n                oracleVersion: ctx.currentOracleVersion().version,\\n                action: action,\\n                amount: amount,\\n                recipient: recipient,\\n                tradingFeeRate: tradingFeeRate\\n            });\\n    }\\n\\n    // implement IERC1155Receiver\\n\\n    /**\\n     * @inheritdoc IERC1155Receiver\\n     */\\n    function onERC1155Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* id */,\\n        uint256 /* value */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Receiver\\n     */\\n    function onERC1155BatchReceived(\\n        address /* operator */,\\n        address /* from */,\\n        uint256[] calldata /* ids */,\\n        uint256[] calldata /* values */,\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // ERC165\\n            interfaceID == this.onERC1155Received.selector ^ this.onERC1155BatchReceived.selector; // IERC1155Receiver\\n    }\\n}\\n\",\"keccak256\":\"0xcff093ee90d1837b1f7c768136bcd72caf86a1685fb7dcf7dd27416282e93266\",\"license\":\"BUSL-1.1\"},\"contracts/core/base/market/MarketBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IChromaticMarketFactory} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\\\";\\nimport {IChromaticMarket} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarket.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\nimport {IChromaticLiquidator} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticLiquidator.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {IKeeperFeePayer} from \\\"@chromatic-protocol/contracts/core/interfaces/IKeeperFeePayer.sol\\\";\\nimport {CLBTokenDeployerLib} from \\\"@chromatic-protocol/contracts/core/external/deployer/CLBTokenDeployer.sol\\\";\\nimport {LiquidityPool} from \\\"@chromatic-protocol/contracts/core/external/liquidity/LiquidityPool.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title MarketBase\\n * @dev Base contract for Chromatic markets.\\n */\\nabstract contract MarketBase is IChromaticMarket, ReentrancyGuard {\\n    IChromaticMarketFactory public immutable override factory;\\n    IOracleProvider public immutable override oracleProvider;\\n    IERC20Metadata public immutable override settlementToken;\\n\\n    ICLBToken public immutable override clbToken;\\n    IChromaticLiquidator public immutable override liquidator;\\n    IChromaticVault public immutable override vault;\\n    IKeeperFeePayer public immutable override keeperFeePayer;\\n\\n    LiquidityPool internal liquidityPool;\\n\\n    mapping(uint256 => Position) internal positions;\\n    mapping(uint256 => LpReceipt) internal lpReceipts;\\n\\n    /**\\n     * @dev Modifier to restrict access to only the DAO.\\n     */\\n    modifier onlyDao() {\\n        require(msg.sender == factory.dao(), Errors.ONLY_DAO_CAN_ACCESS);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict access to only the liquidator contract.\\n     */\\n    modifier onlyLiquidator() {\\n        require(msg.sender == address(liquidator), Errors.ONLY_LIQUIDATOR_CAN_ACCESS);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the market contract.\\n     */\\n    constructor() {\\n        factory = IChromaticMarketFactory(msg.sender);\\n\\n        (address _oracleProvider, address _settlementToken) = factory.parameters();\\n\\n        oracleProvider = IOracleProvider(_oracleProvider);\\n        settlementToken = IERC20Metadata(_settlementToken);\\n        clbToken = ICLBToken(CLBTokenDeployerLib.deploy());\\n        liquidator = IChromaticLiquidator(factory.liquidator());\\n        vault = IChromaticVault(factory.vault());\\n        keeperFeePayer = IKeeperFeePayer(factory.keeperFeePayer());\\n\\n        liquidityPool.initialize();\\n    }\\n\\n    /**\\n     * @dev Creates a new LP context.\\n     * @return The LP context.\\n     */\\n    function newLpContext() internal view returns (LpContext memory) {\\n        IOracleProvider.OracleVersion memory _currentVersionCache;\\n        return\\n            LpContext({\\n                oracleProvider: oracleProvider,\\n                interestCalculator: factory,\\n                vault: vault,\\n                clbToken: clbToken,\\n                market: address(this),\\n                settlementToken: address(settlementToken),\\n                tokenPrecision: 10 ** settlementToken.decimals(),\\n                _currentVersionCache: _currentVersionCache\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0x44f307d6d7831cdcc2e5e8aee508f0eda3b8bcf300d8b4d09f3fbc48ff233db8\",\"license\":\"BUSL-1.1\"},\"contracts/core/base/market/Trade.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {PositionUtil, QTY_LEVERAGE_PRECISION} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {BinMargin} from \\\"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\\\";\\nimport {MarketBase} from \\\"@chromatic-protocol/contracts/core/base/market/MarketBase.sol\\\";\\nimport {IChromaticTradeCallback} from \\\"@chromatic-protocol/contracts/core/interfaces/callback/IChromaticTradeCallback.sol\\\";\\nimport {ITrade} from \\\"@chromatic-protocol/contracts/core/interfaces/market/ITrade.sol\\\";\\nimport {IMarketLiquidate} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidate.sol\\\";\\n\\n/**\\n * @title Trade\\n * @dev A contract that manages trading positions and liquidations.\\n */\\nabstract contract Trade is MarketBase {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n\\n    uint8 private _feeProtocol;\\n    uint256 internal _positionId;\\n\\n    /**\\n     * @inheritdoc ITrade\\n     */\\n    function openPosition(\\n        int224 qty,\\n        uint32 leverage,\\n        uint256 takerMargin,\\n        uint256 makerMargin,\\n        uint256 maxAllowableTradingFee,\\n        bytes calldata data\\n    ) external override nonReentrant returns (Position memory) {\\n        if (qty == 0) revert ZeroTargetAmount();\\n\\n        uint256 minMargin = factory.getMinimumMargin(address(settlementToken));\\n        if (takerMargin < minMargin) revert TooSmallTakerMargin();\\n\\n        uint8 oracleProviderLevel = factory.getOracleProviderLevel(address(oracleProvider));\\n        if (leverage > (oracleProviderLevel + 1) * 10 * QTY_LEVERAGE_PRECISION)\\n            revert ExceedMaxAllowableLeverage();\\n\\n        LpContext memory ctx = newLpContext();\\n        ctx.syncOracleVersion();\\n\\n        Position memory position = newPosition(ctx, qty, leverage, takerMargin);\\n\\n        position.setBinMargins(\\n            liquidityPool.prepareBinMargins(position.qty, makerMargin, minMargin)\\n        );\\n\\n        _openPosition(ctx, position, maxAllowableTradingFee, data);\\n\\n        // write position\\n        position.storeTo(positions[position.id]);\\n        // create keeper task\\n        liquidator.createLiquidationTask(position.id);\\n\\n        emit OpenPosition(position.owner, position);\\n        return position;\\n    }\\n\\n    function _openPosition(\\n        LpContext memory ctx,\\n        Position memory position,\\n        uint256 maxAllowableTradingFee,\\n        bytes calldata data\\n    ) private {\\n        // check trading fee\\n        uint256 tradingFee = position.tradingFee();\\n        uint256 protocolFee = position.protocolFee();\\n        if (tradingFee + protocolFee > maxAllowableTradingFee) {\\n            revert ExceedMaxAllowableTradingFee();\\n        }\\n\\n        // call callback\\n        uint256 balanceBefore = settlementToken.balanceOf(address(vault));\\n\\n        uint256 requiredMargin = position.takerMargin + protocolFee + tradingFee;\\n        IChromaticTradeCallback(msg.sender).openPositionCallback(\\n            address(settlementToken),\\n            address(vault),\\n            requiredMargin,\\n            data\\n        );\\n        // check margin settlementToken increased\\n        if (balanceBefore + requiredMargin < settlementToken.balanceOf(address(vault)))\\n            revert NotEnoughMarginTransfered();\\n\\n        liquidityPool.acceptOpenPosition(ctx, position); // settle()\\n\\n        vault.onOpenPosition(position.id, position.takerMargin, tradingFee, protocolFee);\\n    }\\n\\n    /**\\n     * @inheritdoc ITrade\\n     */\\n    function closePosition(uint256 positionId) external override {\\n        Position storage position = positions[positionId];\\n        if (position.id == 0) revert NotExistPosition();\\n        if (position.owner != msg.sender) revert NotPermitted();\\n        if (position.closeVersion != 0) revert AlreadyClosedPosition();\\n\\n        LpContext memory ctx = newLpContext();\\n\\n        position.closeVersion = ctx.currentOracleVersion().version;\\n        position.closeTimestamp = block.timestamp;\\n\\n        liquidityPool.acceptClosePosition(ctx, position);\\n        liquidator.cancelLiquidationTask(position.id);\\n        emit ClosePosition(position.owner, position);\\n\\n        if (position.closeVersion > position.openVersion) {\\n            liquidator.createClaimPositionTask(position.id);\\n        } else {\\n            // process claim if the position is closed in the same oracle version as the open version\\n            _claimPosition(ctx, position, 0, 0, position.owner, bytes(\\\"\\\"));\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ITrade\\n     */\\n    function claimPosition(\\n        uint256 positionId,\\n        address recipient, // EOA or account contract\\n        bytes calldata data\\n    ) external override nonReentrant {\\n        Position memory position = _getPosition(positionId);\\n        if (position.owner != msg.sender) revert NotPermitted();\\n\\n        LpContext memory ctx = newLpContext();\\n        ctx.syncOracleVersion();\\n\\n        if (!ctx.isPastVersion(position.closeVersion)) revert NotClaimablePosition();\\n\\n        _claimPosition(ctx, position, position.pnl(ctx), 0, recipient, data);\\n\\n        liquidator.cancelClaimPositionTask(position.id);\\n    }\\n\\n    /**\\n     * @inheritdoc IMarketLiquidate\\n     */\\n    function claimPosition(\\n        uint256 positionId,\\n        address keeper,\\n        uint256 keeperFee // native token amount\\n    ) external nonReentrant onlyLiquidator {\\n        Position memory position = _getPosition(positionId);\\n\\n        LpContext memory ctx = newLpContext();\\n        ctx.syncOracleVersion();\\n\\n        if (!ctx.isPastVersion(position.closeVersion)) revert NotClaimablePosition();\\n\\n        uint256 usedKeeperFee = vault.transferKeeperFee(keeper, keeperFee, position.takerMargin);\\n        _claimPosition(ctx, position, position.pnl(ctx), usedKeeperFee, position.owner, bytes(\\\"\\\"));\\n\\n        liquidator.cancelClaimPositionTask(position.id);\\n    }\\n\\n    /**\\n     * @inheritdoc IMarketLiquidate\\n     */\\n    function liquidate(\\n        uint256 positionId,\\n        address keeper,\\n        uint256 keeperFee // native token amount\\n    ) external nonReentrant onlyLiquidator {\\n        Position memory position = _getPosition(positionId);\\n        if (position.closeVersion != 0) revert AlreadyClosedPosition();\\n\\n        LpContext memory ctx = newLpContext();\\n        ctx.syncOracleVersion();\\n\\n        (bool _liquidate, int256 _pnl) = _checkLiquidation(ctx, position);\\n        if (!_liquidate) return;\\n\\n        uint256 usedKeeperFee = vault.transferKeeperFee(keeper, keeperFee, position.takerMargin);\\n        _claimPosition(ctx, position, _pnl, usedKeeperFee, position.owner, bytes(\\\"\\\"));\\n        liquidator.cancelLiquidationTask(positionId);\\n\\n        emit Liquidate(position.owner, usedKeeperFee, position);\\n    }\\n\\n    /**\\n     * @dev Internal function for claiming a position.\\n     * @param ctx The LpContext containing the current oracle version and synchronization information.\\n     * @param position The Position object representing the position to be claimed.\\n     * @param pnl The profit or loss amount of the position.\\n     * @param usedKeeperFee The amount of the keeper fee used.\\n     * @param recipient The address of the recipient (EOA or account contract) receiving the settlement.\\n     * @param data Additional data for the claim position callback.\\n     */\\n    function _claimPosition(\\n        LpContext memory ctx,\\n        Position memory position,\\n        int256 pnl,\\n        uint256 usedKeeperFee,\\n        address recipient,\\n        bytes memory data\\n    ) internal {\\n        uint256 makerMargin = position.makerMargin();\\n        uint256 takerMargin = position.takerMargin - usedKeeperFee;\\n        uint256 settlementAmount = takerMargin;\\n\\n        // Calculate the interest based on the maker margin and the time difference\\n        // between the open timestamp and the current block timestamp\\n        uint256 interest = ctx.calculateInterest(\\n            makerMargin,\\n            position.openTimestamp,\\n            block.timestamp\\n        );\\n        // Calculate the realized profit or loss by subtracting the interest from the total pnl\\n        int256 realizedPnl = pnl - interest.toInt256();\\n        uint256 absRealizedPnl = realizedPnl.abs();\\n        if (realizedPnl > 0) {\\n            if (absRealizedPnl > makerMargin) {\\n                // If the absolute value of the realized pnl is greater than the maker margin,\\n                // set the realized pnl to the maker margin and add the maker margin to the settlement\\n                realizedPnl = makerMargin.toInt256();\\n                settlementAmount += makerMargin;\\n            } else {\\n                settlementAmount += absRealizedPnl;\\n            }\\n        } else {\\n            if (absRealizedPnl > takerMargin) {\\n                // If the absolute value of the realized pnl is greater than the taker margin,\\n                // set the realized pnl to the negative taker margin and set the settlement amount to 0\\n                realizedPnl = -(takerMargin.toInt256());\\n                settlementAmount = 0;\\n            } else {\\n                settlementAmount -= absRealizedPnl;\\n            }\\n        }\\n\\n        // Accept the claim position in the liquidity pool\\n        liquidityPool.acceptClaimPosition(ctx, position, realizedPnl);\\n\\n        // Call the onClaimPosition function in the vault to handle the settlement\\n        vault.onClaimPosition(position.id, recipient, takerMargin, settlementAmount);\\n\\n        // Call the claim position callback function on the position owner's contract\\n        // If an exception occurs during the callback, revert the transaction unless the caller is the liquidator\\n        try\\n            IChromaticTradeCallback(position.owner).claimPositionCallback(position.id, data)\\n        {} catch (bytes memory /* e */ /*lowLevelData*/) {\\n            if (msg.sender != address(liquidator)) {\\n                revert ClaimPositionCallbackError();\\n            }\\n        }\\n        // Delete the claimed position from the positions mapping\\n        delete positions[position.id];\\n\\n        emit ClaimPosition(position.owner, pnl, interest, position);\\n    }\\n\\n    /**\\n     * @inheritdoc IMarketLiquidate\\n     */\\n    function checkLiquidation(uint256 positionId) external view returns (bool _liquidate) {\\n        Position memory position = positions[positionId];\\n        if (position.id == 0) return false;\\n\\n        (_liquidate, ) = _checkLiquidation(newLpContext(), position);\\n    }\\n\\n    /**\\n     * @dev Internal function for checking if a position should be liquidated.\\n     * @param ctx The LpContext containing the current oracle version and synchronization information.\\n     * @param position The Position object representing the position to be checked.\\n     * @return _liquidate A boolean indicating whether the position should be liquidated.\\n     * @return _pnl The profit or loss amount of the position.\\n     */\\n    function _checkLiquidation(\\n        LpContext memory ctx,\\n        Position memory position\\n    ) internal view returns (bool _liquidate, int256 _pnl) {\\n        uint256 interest = ctx.calculateInterest(\\n            position.makerMargin(),\\n            position.openTimestamp,\\n            block.timestamp\\n        );\\n\\n        _pnl =\\n            PositionUtil.pnl(\\n                position.leveragedQty(ctx),\\n                position.entryPrice(ctx),\\n                PositionUtil.oraclePrice(ctx.currentOracleVersion())\\n            ) -\\n            interest.toInt256();\\n\\n        uint256 absPnl = _pnl.abs();\\n        if (_pnl > 0) {\\n            // whether profit stop (taker side)\\n            _liquidate = absPnl >= position.makerMargin();\\n        } else {\\n            // whether loss cut (taker side)\\n            _liquidate = absPnl >= position.takerMargin;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IMarketLiquidate\\n     */\\n    function checkClaimPosition(uint256 positionId) external view returns (bool) {\\n        Position memory position = positions[positionId];\\n        if (position.id == 0) return false;\\n\\n        return newLpContext().isPastVersion(position.closeVersion);\\n    }\\n\\n    /**\\n     * @dev Creates a new position.\\n     * @param ctx The LP context.\\n     * @param qty The quantity of the position.\\n     * @param leverage The leverage of the position.\\n     * @param takerMargin The margin provided by the taker.\\n     * @return The newly created position.\\n     */\\n    function newPosition(\\n        LpContext memory ctx,\\n        int224 qty,\\n        uint32 leverage,\\n        uint256 takerMargin\\n    ) private returns (Position memory) {\\n        return\\n            Position({\\n                id: ++_positionId,\\n                openVersion: ctx.currentOracleVersion().version,\\n                closeVersion: 0,\\n                qty: qty, //\\n                leverage: leverage,\\n                openTimestamp: block.timestamp,\\n                closeTimestamp: 0,\\n                takerMargin: takerMargin,\\n                owner: msg.sender,\\n                _binMargins: new BinMargin[](0),\\n                _feeProtocol: _feeProtocol\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc ITrade\\n     */\\n    function getPositions(\\n        uint256[] calldata positionIds\\n    ) external view returns (Position[] memory _positions) {\\n        _positions = new Position[](positionIds.length);\\n        for (uint i = 0; i < positionIds.length; i++) {\\n            _positions[i] = positions[positionIds[i]];\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ITrade\\n     */\\n    function setFeeProtocol(uint8 feeProtocol) external override onlyDao {\\n        require(feeProtocol == 0 || (feeProtocol >= 4 && feeProtocol <= 10));\\n        uint8 feeProtocolOld = _feeProtocol;\\n        _feeProtocol = feeProtocol;\\n        emit SetFeeProtocol(feeProtocolOld, feeProtocol);\\n    }\\n\\n    function _getPosition(uint256 positionId) private view returns (Position memory position) {\\n        position = positions[positionId];\\n        if (position.id == 0) revert NotExistPosition();\\n    }\\n}\\n\",\"keccak256\":\"0xc788f60ece23d3787073258e22bb5f5ddea836e39a6608ff2caa333ff461dc9c\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/deployer/CLBTokenDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {CLBToken} from \\\"@chromatic-protocol/contracts/core/CLBToken.sol\\\";\\n\\n/**\\n * @title CLBTokenDeployerLib\\n * @notice Library for deploying CLB tokens\\n */\\nlibrary CLBTokenDeployerLib {\\n    /**\\n     * @notice Deploys a new CLB token\\n     * @return clbToken The address of the deployed CLB token\\n     */\\n    function deploy() external returns (address clbToken) {\\n        clbToken = address(new CLBToken());\\n    }\\n}\\n\",\"keccak256\":\"0xca5f3d8d390dffc4732594bdbd169ae783847c71673770c664b07073d70d4118\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/deployer/MarketDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ChromaticMarket} from \\\"@chromatic-protocol/contracts/core/ChromaticMarket.sol\\\";\\n\\n/**\\n * @title MarketDeployer\\n * @notice Storage struct for deploying a ChromaticMarket contract\\n */\\nstruct MarketDeployer {\\n    Parameters parameters;\\n}\\n\\n/**\\n * @title Parameters\\n * @notice Struct for storing deployment parameters\\n */\\nstruct Parameters {\\n    address oracleProvider;\\n    address settlementToken;\\n}\\n\\n/**\\n * @title MarketDeployerLib\\n * @notice Library for deploying a ChromaticMarket contract\\n */\\nlibrary MarketDeployerLib {\\n    /**\\n     * @notice Deploys a ChromaticMarket contract\\n     * @param self The MarketDeployer storage\\n     * @param oracleProvider The address of the oracle provider\\n     * @param settlementToken The address of the settlement token\\n     * @return market The address of the deployed ChromaticMarket contract\\n     */\\n    function deploy(\\n        MarketDeployer storage self,\\n        address oracleProvider,\\n        address settlementToken\\n    ) external returns (address market) {\\n        self.parameters = Parameters({\\n            oracleProvider: oracleProvider,\\n            settlementToken: settlementToken\\n        });\\n        market = address(\\n            new ChromaticMarket{salt: keccak256(abi.encode(oracleProvider, settlementToken))}()\\n        );\\n        delete self.parameters;\\n    }\\n}\\n\",\"keccak256\":\"0x6c19a8b2f10cd869be02c6513a70bd952d9cc1071aaed6647a170a8b82176b79\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/liquidity/AccruedInterest.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\n\\n/**\\n * @title AccruedInterest\\n * @notice Structure for tracking accumulated interest\\n */\\nstruct AccruedInterest {\\n    /// @dev The timestamp at which the interest was last accumulated.\\n    uint256 accumulatedAt;\\n    /// @dev The total amount of interest accumulated.\\n    uint256 accumulatedAmount;\\n}\\n\\n/**\\n * @title AccruedInterestLib\\n * @notice Tracks the accumulated interest for a given token amount and period of time\\n */\\nlibrary AccruedInterestLib {\\n    /**\\n     * @notice Accumulates interest for a given token amount and period of time\\n     * @param self The AccruedInterest storage\\n     * @param ctx The LpContext instance for interest calculation\\n     * @param tokenAmount The amount of tokens to calculate interest for\\n     * @param until The timestamp until which interest should be accumulated\\n     */\\n    function accumulate(\\n        AccruedInterest storage self,\\n        LpContext memory ctx,\\n        uint256 tokenAmount,\\n        uint256 until\\n    ) internal {\\n        uint256 accumulatedAt = self.accumulatedAt;\\n        // check if the interest is already accumulated for the given period of time.\\n        if (until <= accumulatedAt) return;\\n\\n        if (tokenAmount > 0) {\\n            // calculate the interest for the given period of time and accumulate it\\n            self.accumulatedAmount += ctx.calculateInterest(tokenAmount, accumulatedAt, until);\\n        }\\n        // update the timestamp at which the interest was last accumulated.\\n        self.accumulatedAt = until;\\n    }\\n\\n    /**\\n     * @notice Deducts interest from the accumulated interest.\\n     * @param self The AccruedInterest storage.\\n     * @param amount The amount of interest to deduct.\\n     */\\n    function deduct(AccruedInterest storage self, uint256 amount) internal {\\n        uint256 accumulatedAmount = self.accumulatedAmount;\\n        // check if the amount is greater than the accumulated interest.\\n        if (amount >= accumulatedAmount) {\\n            self.accumulatedAmount = 0;\\n        } else {\\n            self.accumulatedAmount = accumulatedAmount - amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the accumulated interest for a given token amount and period of time\\n     * @param self The AccruedInterest storage\\n     * @param ctx The LpContext instance for interest calculation\\n     * @param tokenAmount The amount of tokens to calculate interest for\\n     * @param until The timestamp until which interest should be accumulated\\n     * @return The accumulated interest amount\\n     */\\n    function calculateInterest(\\n        AccruedInterest storage self,\\n        LpContext memory ctx,\\n        uint256 tokenAmount,\\n        uint256 until\\n    ) internal view returns (uint256) {\\n        if (tokenAmount == 0) return 0;\\n\\n        uint256 accumulatedAt = self.accumulatedAt;\\n        uint256 accumulatedAmount = self.accumulatedAmount;\\n        if (until <= accumulatedAt) return accumulatedAmount;\\n\\n        return accumulatedAmount + ctx.calculateInterest(tokenAmount, accumulatedAt, until);\\n    }\\n}\\n\",\"keccak256\":\"0xc448edc23ad4e2ffc32b7441aae9d9c4b10b758664c3a12ccd0ff418f85b8fc5\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/liquidity/BinClosedPosition.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {AccruedInterest, AccruedInterestLib} from \\\"@chromatic-protocol/contracts/core/external/liquidity/AccruedInterest.sol\\\";\\nimport {BinClosingPosition, BinClosingPositionLib} from \\\"@chromatic-protocol/contracts/core/external/liquidity/BinClosingPosition.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/external/liquidity/PositionParam.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\n\\n/**\\n * @title BinClosedPosition\\n * @notice Represents a closed position within an LiquidityBin.\\n */\\nstruct BinClosedPosition {\\n    uint256 _totalMakerMargin;\\n    BinClosingPosition _closing;\\n    EnumerableSet.UintSet _waitingVersions;\\n    mapping(uint256 => _ClaimWaitingPosition) _waitingPositions;\\n    AccruedInterest _accruedInterest;\\n}\\n\\n/**\\n * @title _ClaimWaitingPosition\\n * @notice Represents the accumulated values of the waiting positions to be claimed\\n *      for a specific version within BinClosedPosition.\\n */\\nstruct _ClaimWaitingPosition {\\n    int256 totalLeveragedQty;\\n    uint256 totalEntryAmount;\\n    uint256 totalMakerMargin;\\n    uint256 totalTakerMargin;\\n}\\n\\n/**\\n * @title BinClosedPositionLib\\n * @notice A library that provides functions to manage the closed position within an LiquidityBin.\\n */\\nlibrary BinClosedPositionLib {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using AccruedInterestLib for AccruedInterest;\\n    using BinClosingPositionLib for BinClosingPosition;\\n\\n    /**\\n     * @notice Settles the closing position within the BinClosedPosition.\\n     * @dev If the closeVersion is not set or is equal to the current oracle version, no action is taken.\\n     *      Otherwise, the waiting position is stored and the accrued interest is accumulated.\\n     * @param self The BinClosedPosition storage.\\n     * @param ctx The LpContext memory.\\n     */\\n    function settleClosingPosition(BinClosedPosition storage self, LpContext memory ctx) internal {\\n        uint256 closeVersion = self._closing.closeVersion;\\n        if (!ctx.isPastVersion(closeVersion)) return;\\n\\n        _ClaimWaitingPosition memory waitingPosition = _ClaimWaitingPosition({\\n            totalLeveragedQty: self._closing.totalLeveragedQty,\\n            totalEntryAmount: self._closing.totalEntryAmount,\\n            totalMakerMargin: self._closing.totalMakerMargin,\\n            totalTakerMargin: self._closing.totalTakerMargin\\n        });\\n\\n        // accumulate interest before update `_totalMakerMargin`\\n        self._accruedInterest.accumulate(ctx, self._totalMakerMargin, block.timestamp);\\n\\n        self._totalMakerMargin += waitingPosition.totalMakerMargin;\\n        self._waitingVersions.add(closeVersion);\\n        self._waitingPositions[closeVersion] = waitingPosition;\\n\\n        self._closing.settleAccruedInterest(ctx);\\n        self._accruedInterest.accumulatedAmount += self._closing.accruedInterest.accumulatedAmount;\\n\\n        delete self._closing;\\n    }\\n\\n    /**\\n     * @notice Closes the position within the BinClosedPosition.\\n     * @dev Delegates the onClosePosition function call to the underlying BinClosingPosition.\\n     * @param self The BinClosedPosition storage.\\n     * @param ctx The LpContext memory.\\n     * @param param The PositionParam memory.\\n     */\\n    function onClosePosition(\\n        BinClosedPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        self._closing.onClosePosition(ctx, param);\\n    }\\n\\n    /**\\n     * @notice Claims the position within the BinClosedPosition.\\n     * @dev If the closeVersion is equal to the BinClosingPosition's closeVersion, the claim is made directly.\\n     *      Otherwise, the claim is made from the waiting position, and if exhausted, the waiting position is removed.\\n     *      The accrued interest is accumulated and deducted accordingly.\\n     * @param self The BinClosedPosition storage.\\n     * @param ctx The LpContext memory.\\n     * @param param The PositionParam memory.\\n     */\\n    function onClaimPosition(\\n        BinClosedPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        uint256 closeVersion = param.closeVersion;\\n\\n        if (closeVersion == self._closing.closeVersion) {\\n            self._closing.onClaimPosition(ctx, param);\\n        } else {\\n            bool exhausted = _onClaimPosition(self._waitingPositions[closeVersion], ctx, param);\\n\\n            // accumulate interest before update `_totalMakerMargin`\\n            self._accruedInterest.accumulate(ctx, self._totalMakerMargin, block.timestamp);\\n\\n            self._totalMakerMargin -= param.makerMargin;\\n            self._accruedInterest.deduct(param.calculateInterest(ctx, block.timestamp));\\n\\n            if (exhausted) {\\n                self._waitingVersions.remove(closeVersion);\\n                delete self._waitingPositions[closeVersion];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Claims the position from the waiting position within the BinClosedPosition.\\n     *      Updates the waiting position and returns whether the waiting position is exhausted.\\n     * @param waitingPosition The waiting position storage.\\n     * @param ctx The LpContext memory.\\n     * @param param The PositionParam memory.\\n     * @return exhausted Whether the waiting position is exhausted.\\n     */\\n    function _onClaimPosition(\\n        _ClaimWaitingPosition storage waitingPosition,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) private returns (bool exhausted) {\\n        int256 totalLeveragedQty = waitingPosition.totalLeveragedQty;\\n        int256 leveragedQty = param.leveragedQty;\\n        PositionUtil.checkRemovePositionQty(totalLeveragedQty, leveragedQty);\\n        if (totalLeveragedQty == leveragedQty) return true;\\n\\n        waitingPosition.totalLeveragedQty = totalLeveragedQty - leveragedQty;\\n        waitingPosition.totalEntryAmount -= param.entryAmount(ctx);\\n        waitingPosition.totalMakerMargin -= param.makerMargin;\\n        waitingPosition.totalTakerMargin -= param.takerMargin;\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Calculates the current interest for a liquidity bin closed position.\\n     * @param self The BinClosedPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @return uint256 The current interest.\\n     */\\n    function currentInterest(\\n        BinClosedPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return _currentInterest(self, ctx) + self._closing.currentInterest(ctx);\\n    }\\n\\n    /**\\n     * @dev Calculates the current interest for a liquidity bin closed position without closing position.\\n     * @param self The BinClosedPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @return uint256 The current interest.\\n     */\\n    function _currentInterest(\\n        BinClosedPosition storage self,\\n        LpContext memory ctx\\n    ) private view returns (uint256) {\\n        return\\n            self._accruedInterest.calculateInterest(ctx, self._totalMakerMargin, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x9635998815088a3513b41108aa27b30559a4f32e1c7226a957c5f3154e814b7e\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/liquidity/BinClosingPosition.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {AccruedInterest, AccruedInterestLib} from \\\"@chromatic-protocol/contracts/core/external/liquidity/AccruedInterest.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/external/liquidity/PositionParam.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title BinClosingPosition\\n * @dev Represents the closing position within an LiquidityBin.\\n */\\nstruct BinClosingPosition {\\n    /// @dev The oracle version when the position was closed.\\n    uint256 closeVersion;\\n    /// @dev The total leveraged quantity of the closing position.\\n    int256 totalLeveragedQty;\\n    /// @dev The total entry amount of the closing position.\\n    uint256 totalEntryAmount;\\n    /// @dev The total maker margin of the closing position.\\n    uint256 totalMakerMargin;\\n    /// @dev The total taker margin of the closing position.\\n    uint256 totalTakerMargin;\\n    /// @dev The accumulated interest of the closing position.\\n    AccruedInterest accruedInterest;\\n}\\n\\n/**\\n * @title BinClosingPositionLib\\n * @notice A library that provides functions to manage the closing position within an LiquidityBin.\\n */\\nlibrary BinClosingPositionLib {\\n    using AccruedInterestLib for AccruedInterest;\\n\\n    /**\\n     * @notice Settles the accumulated interest of the closing position.\\n     * @param self The BinClosingPosition storage.\\n     * @param ctx The LpContext.\\n     */\\n    function settleAccruedInterest(BinClosingPosition storage self, LpContext memory ctx) internal {\\n        self.accruedInterest.accumulate(ctx, self.totalMakerMargin, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Handles the closing of a position.\\n     * @param self The BinClosingPosition storage.\\n     * @param ctx The LpContext.\\n     * @param param The position parameters.\\n     */\\n    function onClosePosition(\\n        BinClosingPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        uint256 closeVersion = self.closeVersion;\\n        require(\\n            closeVersion == 0 || closeVersion == param.closeVersion,\\n            Errors.INVALID_ORACLE_VERSION\\n        );\\n\\n        int256 totalLeveragedQty = self.totalLeveragedQty;\\n        int256 leveragedQty = param.leveragedQty;\\n        PositionUtil.checkAddPositionQty(totalLeveragedQty, leveragedQty);\\n\\n        // accumulate interest before update `totalMakerMargin`\\n        settleAccruedInterest(self, ctx);\\n\\n        self.closeVersion = param.closeVersion;\\n        self.totalLeveragedQty = totalLeveragedQty + leveragedQty;\\n        self.totalEntryAmount += param.entryAmount(ctx);\\n        self.totalMakerMargin += param.makerMargin;\\n        self.totalTakerMargin += param.takerMargin;\\n        self.accruedInterest.accumulatedAmount += param.calculateInterest(ctx, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Handles the claiming of a position.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     * @param param The position parameters.\\n     */\\n    function onClaimPosition(\\n        BinClosingPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        require(self.closeVersion == param.closeVersion, Errors.INVALID_ORACLE_VERSION);\\n\\n        int256 totalLeveragedQty = self.totalLeveragedQty;\\n        int256 leveragedQty = param.leveragedQty;\\n        PositionUtil.checkRemovePositionQty(totalLeveragedQty, leveragedQty);\\n\\n        // accumulate interest before update `totalMakerMargin`\\n        settleAccruedInterest(self, ctx);\\n\\n        self.totalLeveragedQty = totalLeveragedQty - leveragedQty;\\n        self.totalEntryAmount -= param.entryAmount(ctx);\\n        self.totalMakerMargin -= param.makerMargin;\\n        self.totalTakerMargin -= param.takerMargin;\\n        self.accruedInterest.deduct(param.calculateInterest(ctx, block.timestamp));\\n    }\\n\\n    /**\\n     * @notice Calculates the current accrued interest of the closing position.\\n     * @param self The BinClosingPosition storage.\\n     * @param ctx The LpContext.\\n     * @return uint256 The current accrued interest.\\n     */\\n    function currentInterest(\\n        BinClosingPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return self.accruedInterest.calculateInterest(ctx, self.totalMakerMargin, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x13bb00658928a39d6c31529ffd2b2c8a7d7028f73e72746dc26758e634c24414\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/liquidity/BinLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {DoubleEndedQueue} from \\\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\nimport {ILiquidity} from \\\"@chromatic-protocol/contracts/core/interfaces/market/ILiquidity.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title BinLiquidity\\n * @notice Represents the liquidity information within an LiquidityBin.\\n */\\nstruct BinLiquidity {\\n    uint256 total;\\n    _PendingLiquidity _pending;\\n    mapping(uint256 => _ClaimMinting) _claimMintings;\\n    mapping(uint256 => _ClaimBurning) _claimBurnings;\\n    DoubleEndedQueue.Bytes32Deque _burningVersions;\\n}\\n\\n/**\\n * @title _PendingLiquidity\\n * @notice Represents the pending liquidity details within BinLiquidity.\\n */\\nstruct _PendingLiquidity {\\n    uint256 oracleVersion;\\n    uint256 tokenAmount;\\n    uint256 clbTokenAmount;\\n}\\n\\n/**\\n * @title _ClaimMinting\\n * @notice Represents the accumulated values of minting claims\\n *         for a specific oracle version within BinLiquidity.\\n */\\nstruct _ClaimMinting {\\n    uint256 tokenAmountRequested;\\n    uint256 clbTokenAmount;\\n}\\n\\n/**\\n * @title _ClaimBurning\\n * @notice Represents the accumulated values of burning claims\\n *         for a specific oracle version within BinLiquidity.\\n */\\nstruct _ClaimBurning {\\n    uint256 clbTokenAmountRequested;\\n    uint256 clbTokenAmount;\\n    uint256 tokenAmount;\\n}\\n\\n/**\\n * @title BinLiquidityLib\\n * @notice A library that provides functions to manage the liquidity within an LiquidityBin.\\n */\\nlibrary BinLiquidityLib {\\n    using Math for uint256;\\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\\n\\n    /// @dev Minimum amount constant to prevent division by zero.\\n    uint256 private constant MIN_AMOUNT = 1000;\\n\\n    /**\\n     * @notice Settles the pending liquidity within the BinLiquidity.\\n     * @dev This function settles pending liquidity in the BinLiquidity storage by performing the following steps:\\n     *      1. Settles pending liquidity\\n     *          - If the pending oracle version is not set or is greater than or equal to the current oracle version,\\n     *            no action is taken.\\n     *          - Otherwise, the pending liquidity and burning CLB tokens are settled by following steps:\\n     *              a. If there is a pending deposit,\\n     *                 it calculates the minting amount of CLB tokens\\n     *                 based on the pending deposit, bin value, and CLB token total supply.\\n     *                 It updates the total liquidity and adds the pending deposit to the claim mintings.\\n     *              b. If there is a pending CLB token burning,\\n     *                 it adds the oracle version to the burning versions list\\n     *                 and initializes the claim burning details.\\n     *      2. Settles bunding CLB tokens\\n     *          a. It trims all completed burning versions from the burning versions list.\\n     *          b. For each burning version in the list,\\n     *             it calculates the pending CLB token amount and the pending withdrawal amount\\n     *             based on the bin value and CLB token total supply.\\n     *             - If there is sufficient free liquidity, it calculates the burning amount of CLB tokens.\\n     *             - If there is insufficient free liquidity, it calculates the burning amount\\n     *               based on the available free liquidity and updates the pending withdrawal accordingly.\\n     *          c. It updates the burning amount and pending withdrawal,\\n     *             and reduces the free liquidity accordingly.\\n     *          d. Finally, it updates the total liquidity by subtracting the pending withdrawal.\\n     *      And the CLB tokens are minted or burned accordingly.\\n     *      The pending deposit and withdrawal amounts are passed to the vault for further processing.\\n     * @param self The BinLiquidity storage.\\n     * @param ctx The LpContext memory.\\n     * @param binValue The current value of the bin.\\n     * @param freeLiquidity The amount of free liquidity available in the bin.\\n     * @param clbTokenId The ID of the CLB token.\\n     */\\n    function settlePendingLiquidity(\\n        BinLiquidity storage self,\\n        LpContext memory ctx,\\n        uint256 binValue,\\n        uint256 freeLiquidity,\\n        uint256 clbTokenId\\n    ) internal {\\n        ICLBToken clbToken = ctx.clbToken;\\n        uint256 totalSupply = clbToken.totalSupply(clbTokenId);\\n\\n        (uint256 pendingDeposit, uint256 mintingAmount) = _settlePending(\\n            self,\\n            ctx,\\n            binValue,\\n            totalSupply\\n        );\\n        (uint256 burningAmount, uint256 pendingWithdrawal) = _settleBurning(\\n            self,\\n            freeLiquidity + pendingDeposit,\\n            binValue,\\n            totalSupply\\n        );\\n\\n        if (mintingAmount > burningAmount) {\\n            clbToken.mint(ctx.market, clbTokenId, mintingAmount - burningAmount, bytes(\\\"\\\"));\\n        } else if (mintingAmount < burningAmount) {\\n            clbToken.burn(ctx.market, clbTokenId, burningAmount - mintingAmount);\\n        }\\n\\n        if (pendingDeposit > 0 || pendingWithdrawal > 0) {\\n            ctx.vault.onSettlePendingLiquidity(pendingDeposit, pendingWithdrawal);\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds liquidity to the BinLiquidity.\\n     * @dev Sets the pending liquidity with the specified amount and oracle version.\\n     *      If the amount is less than the minimum amount, it reverts with an error.\\n     *      If there is already pending liquidity with a different oracle version, it reverts with an error.\\n     * @param self The BinLiquidity storage.\\n     * @param amount The amount of tokens to add for liquidity.\\n     * @param oracleVersion The oracle version associated with the liquidity.\\n     */\\n    function onAddLiquidity(\\n        BinLiquidity storage self,\\n        uint256 amount,\\n        uint256 oracleVersion\\n    ) internal {\\n        require(amount > MIN_AMOUNT, Errors.TOO_SMALL_AMOUNT);\\n\\n        uint256 pendingOracleVersion = self._pending.oracleVersion;\\n        require(\\n            pendingOracleVersion == 0 || pendingOracleVersion == oracleVersion,\\n            Errors.INVALID_ORACLE_VERSION\\n        );\\n\\n        self._pending.oracleVersion = oracleVersion;\\n        self._pending.tokenAmount += amount;\\n    }\\n\\n    /**\\n     * @notice Claims liquidity from the BinLiquidity by minting CLB tokens.\\n     * @dev Retrieves the minting details for the specified oracle version\\n     *      and calculates the CLB token amount to be claimed.\\n     *      Updates the claim minting details and returns the CLB token amount to be claimed.\\n     *      If there are no more tokens remaining for the claim, it is removed from the mapping.\\n     * @param self The BinLiquidity storage.\\n     * @param amount The amount of tokens to claim.\\n     * @param oracleVersion The oracle version associated with the claim.\\n     * @return clbTokenAmount The amount of CLB tokens to be claimed.\\n     */\\n    function onClaimLiquidity(\\n        BinLiquidity storage self,\\n        uint256 amount,\\n        uint256 oracleVersion\\n    ) internal returns (uint256 clbTokenAmount) {\\n        _ClaimMinting memory _cm = self._claimMintings[oracleVersion];\\n        clbTokenAmount = amount.mulDiv(_cm.clbTokenAmount, _cm.tokenAmountRequested);\\n\\n        _cm.clbTokenAmount -= clbTokenAmount;\\n        _cm.tokenAmountRequested -= amount;\\n        if (_cm.tokenAmountRequested == 0) {\\n            delete self._claimMintings[oracleVersion];\\n        } else {\\n            self._claimMintings[oracleVersion] = _cm;\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes liquidity from the BinLiquidity by setting pending CLB token amount.\\n     * @dev Sets the pending liquidity with the specified CLB token amount and oracle version.\\n     *      If there is already pending liquidity with a different oracle version, it reverts with an error.\\n     * @param self The BinLiquidity storage.\\n     * @param clbTokenAmount The amount of CLB tokens to remove liquidity.\\n     * @param oracleVersion The oracle version associated with the liquidity.\\n     */\\n    function onRemoveLiquidity(\\n        BinLiquidity storage self,\\n        uint256 clbTokenAmount,\\n        uint256 oracleVersion\\n    ) internal {\\n        uint256 pendingOracleVersion = self._pending.oracleVersion;\\n        require(\\n            pendingOracleVersion == 0 || pendingOracleVersion == oracleVersion,\\n            Errors.INVALID_ORACLE_VERSION\\n        );\\n\\n        self._pending.oracleVersion = oracleVersion;\\n        self._pending.clbTokenAmount += clbTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity from the BinLiquidity by burning CLB tokens and withdrawing tokens.\\n     * @dev Retrieves the burning details for the specified oracle version\\n     *      and calculates the CLB token amount and token amount to burn and withdraw, respectively.\\n     *      Updates the claim burning details and returns the token amount to withdraw and the burned CLB token amount.\\n     *      If there are no more CLB tokens remaining for the claim, it is removed from the mapping.\\n     * @param self The BinLiquidity storage.\\n     * @param clbTokenAmount The amount of CLB tokens to withdraw.\\n     * @param oracleVersion The oracle version associated with the claim.\\n     * @return amount The amount of tokens to be withdrawn for the claim.\\n     * @return burnedCLBTokenAmount The amount of CLB tokens to be burned for the claim.\\n     */\\n    function onWithdrawLiquidity(\\n        BinLiquidity storage self,\\n        uint256 clbTokenAmount,\\n        uint256 oracleVersion\\n    ) internal returns (uint256 amount, uint256 burnedCLBTokenAmount) {\\n        _ClaimBurning memory _cb = self._claimBurnings[oracleVersion];\\n        amount = clbTokenAmount.mulDiv(_cb.tokenAmount, _cb.clbTokenAmountRequested);\\n        burnedCLBTokenAmount = clbTokenAmount.mulDiv(\\n            _cb.clbTokenAmount,\\n            _cb.clbTokenAmountRequested\\n        );\\n\\n        _cb.clbTokenAmount -= burnedCLBTokenAmount;\\n        _cb.tokenAmount -= amount;\\n        _cb.clbTokenAmountRequested -= clbTokenAmount;\\n        if (_cb.clbTokenAmountRequested == 0) {\\n            delete self._claimBurnings[oracleVersion];\\n        } else {\\n            self._claimBurnings[oracleVersion] = _cb;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of CLB tokens to be minted\\n     *         for a given token amount, bin value, and CLB token total supply.\\n     * @dev If the CLB token total supply is zero, returns the token amount as is.\\n     *      Otherwise, calculates the minting amount\\n     *      based on the token amount, bin value, and CLB token total supply.\\n     * @param amount The amount of tokens to be minted.\\n     * @param binValue The current bin value.\\n     * @param clbTokenTotalSupply The total supply of CLB tokens.\\n     * @return The amount of CLB tokens to be minted.\\n     */\\n    function calculateCLBTokenMinting(\\n        uint256 amount,\\n        uint256 binValue,\\n        uint256 clbTokenTotalSupply\\n    ) internal pure returns (uint256) {\\n        return\\n            clbTokenTotalSupply == 0\\n                ? amount\\n                : amount.mulDiv(clbTokenTotalSupply, binValue < MIN_AMOUNT ? MIN_AMOUNT : binValue);\\n    }\\n\\n    /**\\n     * @notice Calculates the value of CLB tokens\\n     *         for a given CLB token amount, bin value, and CLB token total supply.\\n     * @dev If the CLB token total supply is zero, returns zero.\\n     *      Otherwise, calculates the value based on the CLB token amount, bin value, and CLB token total supply.\\n     * @param clbTokenAmount The amount of CLB tokens.\\n     * @param binValue The current bin value.\\n     * @param clbTokenTotalSupply The total supply of CLB tokens.\\n     * @return The value of the CLB tokens.\\n     */\\n    function calculateCLBTokenValue(\\n        uint256 clbTokenAmount,\\n        uint256 binValue,\\n        uint256 clbTokenTotalSupply\\n    ) internal pure returns (uint256) {\\n        return clbTokenTotalSupply == 0 ? 0 : clbTokenAmount.mulDiv(binValue, clbTokenTotalSupply);\\n    }\\n\\n    /**\\n     * @dev Settles the pending deposit and pending CLB token burning.\\n     * @param self The BinLiquidity storage.\\n     * @param ctx The LpContext.\\n     * @param binValue The current value of the bin.\\n     * @param totalSupply The total supply of CLB tokens.\\n     * @return pendingDeposit The amount of pending deposit to be settled.\\n     * @return mintingAmount The calculated minting amount of CLB tokens for the pending deposit.\\n     */\\n    function _settlePending(\\n        BinLiquidity storage self,\\n        LpContext memory ctx,\\n        uint256 binValue,\\n        uint256 totalSupply\\n    ) private returns (uint256 pendingDeposit, uint256 mintingAmount) {\\n        uint256 oracleVersion = self._pending.oracleVersion;\\n        if (!ctx.isPastVersion(oracleVersion)) return (0, 0);\\n\\n        pendingDeposit = self._pending.tokenAmount;\\n        uint256 pendingCLBTokenAmount = self._pending.clbTokenAmount;\\n\\n        if (pendingDeposit > 0) {\\n            mintingAmount = calculateCLBTokenMinting(pendingDeposit, binValue, totalSupply);\\n\\n            self.total += pendingDeposit;\\n            self._claimMintings[oracleVersion] = _ClaimMinting({\\n                tokenAmountRequested: pendingDeposit,\\n                clbTokenAmount: mintingAmount\\n            });\\n        }\\n\\n        if (pendingCLBTokenAmount > 0) {\\n            self._burningVersions.pushBack(bytes32(oracleVersion));\\n            self._claimBurnings[oracleVersion] = _ClaimBurning({\\n                clbTokenAmountRequested: pendingCLBTokenAmount,\\n                clbTokenAmount: 0,\\n                tokenAmount: 0\\n            });\\n        }\\n\\n        delete self._pending;\\n    }\\n\\n    /**\\n     * @dev Settles the pending CLB token burning and calculates the burning amount and pending withdrawal.\\n     * @param self The BinLiquidity storage.\\n     * @param freeLiquidity The amount of free liquidity available for burning.\\n     * @param binValue The current value of the bin.\\n     * @param totalSupply The total supply of CLB tokens.\\n     * @return burningAmount The calculated burning amount of CLB tokens.\\n     * @return pendingWithdrawal The calculated pending withdrawal amount.\\n     */\\n    function _settleBurning(\\n        BinLiquidity storage self,\\n        uint256 freeLiquidity,\\n        uint256 binValue,\\n        uint256 totalSupply\\n    ) private returns (uint256 burningAmount, uint256 pendingWithdrawal) {\\n        // trim all claim completed burning versions\\n        while (!self._burningVersions.empty()) {\\n            uint256 _ov = uint256(self._burningVersions.front());\\n            _ClaimBurning memory _cb = self._claimBurnings[_ov];\\n            if (_cb.clbTokenAmount >= _cb.clbTokenAmountRequested) {\\n                self._burningVersions.popFront();\\n                if (_cb.clbTokenAmountRequested == 0) {\\n                    delete self._claimBurnings[_ov];\\n                }\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        uint256 length = self._burningVersions.length();\\n        for (uint256 i = 0; i < length && freeLiquidity > 0; i++) {\\n            uint256 _ov = uint256(self._burningVersions.at(i));\\n            _ClaimBurning storage _cb = self._claimBurnings[_ov];\\n\\n            uint256 _pendingCLBTokenAmount = _cb.clbTokenAmountRequested - _cb.clbTokenAmount;\\n            if (_pendingCLBTokenAmount > 0) {\\n                uint256 _burningAmount;\\n                uint256 _pendingWithdrawal = calculateCLBTokenValue(\\n                    _pendingCLBTokenAmount,\\n                    binValue,\\n                    totalSupply\\n                );\\n\\n                if (freeLiquidity >= _pendingWithdrawal) {\\n                    _burningAmount = _pendingCLBTokenAmount;\\n                } else {\\n                    _burningAmount = calculateCLBTokenMinting(freeLiquidity, binValue, totalSupply);\\n                    require(_burningAmount < _pendingCLBTokenAmount);\\n                    _pendingWithdrawal = freeLiquidity;\\n                }\\n\\n                _cb.clbTokenAmount += _burningAmount;\\n                _cb.tokenAmount += _pendingWithdrawal;\\n                burningAmount += _burningAmount;\\n                pendingWithdrawal += _pendingWithdrawal;\\n                freeLiquidity -= _pendingWithdrawal;\\n            }\\n        }\\n\\n        self.total -= pendingWithdrawal;\\n    }\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific oracle version.\\n     * @param self The reference to the BinLiquidity struct.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ILiquidity.ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        BinLiquidity storage self,\\n        uint256 oracleVersion\\n    ) internal view returns (ILiquidity.ClaimableLiquidity memory) {\\n        _ClaimMinting memory _cm = self._claimMintings[oracleVersion];\\n        _ClaimBurning memory _cb = self._claimBurnings[oracleVersion];\\n\\n        return\\n            ILiquidity.ClaimableLiquidity({\\n                mintingTokenAmountRequested: _cm.tokenAmountRequested,\\n                mintingCLBTokenAmount: _cm.clbTokenAmount,\\n                burningCLBTokenAmountRequested: _cb.clbTokenAmountRequested,\\n                burningCLBTokenAmount: _cb.clbTokenAmount,\\n                burningTokenAmount: _cb.tokenAmount\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0x09f54beaec443708a6cb249759a6d521153f661a3ec10b5cc3c0c29299c85cad\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/liquidity/BinPendingPosition.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {UFixed18} from \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {AccruedInterest, AccruedInterestLib} from \\\"@chromatic-protocol/contracts/core/external/liquidity/AccruedInterest.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/external/liquidity/PositionParam.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title BinPendingPosition\\n * @notice Represents a pending position within the LiquidityBin\\n */\\nstruct BinPendingPosition {\\n    /// @dev The oracle version when the position was opened.\\n    uint256 openVersion;\\n    /// @dev The total leveraged quantity of the pending position.\\n    int256 totalLeveragedQty;\\n    /// @dev The total maker margin of the pending position.\\n    uint256 totalMakerMargin;\\n    /// @dev The total taker margin of the pending position.\\n    uint256 totalTakerMargin;\\n    /// @dev The accumulated interest of the pending position.\\n    AccruedInterest accruedInterest;\\n}\\n\\n/**\\n * @title BinPendingPositionLib\\n * @notice Library for managing pending positions in the `LiquidityBin`\\n */\\nlibrary BinPendingPositionLib {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n    using AccruedInterestLib for AccruedInterest;\\n\\n    /**\\n     * @notice Settles the accumulated interest of the pending position.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     */\\n    function settleAccruedInterest(BinPendingPosition storage self, LpContext memory ctx) internal {\\n        self.accruedInterest.accumulate(ctx, self.totalMakerMargin, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Handles the opening of a position.\\n     * @param self The BinPendingPosition storage.\\n     * @param param The position parameters.\\n     */\\n    function onOpenPosition(\\n        BinPendingPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        uint256 openVersion = self.openVersion;\\n        require(\\n            openVersion == 0 || openVersion == param.openVersion,\\n            Errors.INVALID_ORACLE_VERSION\\n        );\\n\\n        int256 totalLeveragedQty = self.totalLeveragedQty;\\n        int256 leveragedQty = param.leveragedQty;\\n        PositionUtil.checkAddPositionQty(totalLeveragedQty, leveragedQty);\\n\\n        // accumulate interest before update `totalMakerMargin`\\n        settleAccruedInterest(self, ctx);\\n\\n        self.openVersion = param.openVersion;\\n        self.totalLeveragedQty = totalLeveragedQty + leveragedQty;\\n        self.totalMakerMargin += param.makerMargin;\\n        self.totalTakerMargin += param.takerMargin;\\n    }\\n\\n    /**\\n     * @notice Handles the closing of a position.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     * @param param The position parameters.\\n     */\\n    function onClosePosition(\\n        BinPendingPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        require(self.openVersion == param.openVersion, Errors.INVALID_ORACLE_VERSION);\\n\\n        int256 totalLeveragedQty = self.totalLeveragedQty;\\n        int256 leveragedQty = param.leveragedQty;\\n        PositionUtil.checkRemovePositionQty(totalLeveragedQty, leveragedQty);\\n\\n        // accumulate interest before update `totalMakerMargin`\\n        settleAccruedInterest(self, ctx);\\n\\n        self.totalLeveragedQty = totalLeveragedQty - leveragedQty;\\n        self.totalMakerMargin -= param.makerMargin;\\n        self.totalTakerMargin -= param.takerMargin;\\n        self.accruedInterest.deduct(param.calculateInterest(ctx, block.timestamp));\\n    }\\n\\n    /**\\n     * @notice Calculates the unrealized profit or loss (PnL) of the pending position.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     * @return uint256 The unrealized PnL.\\n     */\\n    function unrealizedPnl(\\n        BinPendingPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (int256) {\\n        uint256 openVersion = self.openVersion;\\n        if (!ctx.isPastVersion(openVersion)) return 0;\\n\\n        IOracleProvider.OracleVersion memory currentVersion = ctx.currentOracleVersion();\\n        UFixed18 _entryPrice = PositionUtil.settlePrice(\\n            ctx.oracleProvider,\\n            openVersion,\\n            ctx.currentOracleVersion()\\n        );\\n        UFixed18 _exitPrice = PositionUtil.oraclePrice(currentVersion);\\n\\n        int256 pnl = PositionUtil.pnl(self.totalLeveragedQty, _entryPrice, _exitPrice) +\\n            currentInterest(self, ctx).toInt256();\\n        uint256 absPnl = pnl.abs();\\n\\n        if (pnl >= 0) {\\n            return Math.min(absPnl, self.totalTakerMargin).toInt256();\\n        } else {\\n            return -(Math.min(absPnl, self.totalMakerMargin).toInt256());\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the current accrued interest of the pending position.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     * @return uint256 The current accrued interest.\\n     */\\n    function currentInterest(\\n        BinPendingPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return self.accruedInterest.calculateInterest(ctx, self.totalMakerMargin, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the entry price of the pending position.\\n     * @param self The BinPendingPosition storage.\\n     * @param ctx The LpContext.\\n     * @return UFixed18 The entry price.\\n     */\\n    function entryPrice(\\n        BinPendingPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (UFixed18) {\\n        return\\n            PositionUtil.settlePrice(\\n                ctx.oracleProvider,\\n                self.openVersion,\\n                ctx.currentOracleVersion()\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xd3134c5572788c5eb67818047975b1a0a409df1d3d5a2b0e9924aadb3129e552\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/liquidity/BinPosition.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {UFixed18} from \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {AccruedInterest, AccruedInterestLib} from \\\"@chromatic-protocol/contracts/core/external/liquidity/AccruedInterest.sol\\\";\\nimport {BinPendingPosition, BinPendingPositionLib} from \\\"@chromatic-protocol/contracts/core/external/liquidity/BinPendingPosition.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/external/liquidity/PositionParam.sol\\\";\\n\\n/**\\n * @title BinPosition\\n * @notice Represents a position in the LiquidityBin\\n */\\nstruct BinPosition {\\n    /// @dev The total leveraged quantity of the `LiquidityBin`\\n    int256 totalLeveragedQty;\\n    /// @dev The total entry amount of the `LiquidityBin`\\n    uint256 totalEntryAmount;\\n    /// @dev The total maker margin of the `LiquidityBin`\\n    uint256 _totalMakerMargin;\\n    /// @dev The total taker margin of the `LiquidityBin`\\n    uint256 _totalTakerMargin;\\n    /// @dev The pending position of the `LiquidityBin`\\n    BinPendingPosition _pending;\\n    /// @dev The accumulated interest of the `LiquidityBin`\\n    AccruedInterest _accruedInterest;\\n}\\n\\n/**\\n * @title BinPositionLib\\n * @notice Library for managing positions in the `LiquidityBin`\\n */\\nlibrary BinPositionLib {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n    using AccruedInterestLib for AccruedInterest;\\n    using BinPendingPositionLib for BinPendingPosition;\\n\\n    /**\\n     * @notice Settles pending positions for a liquidity bin position.\\n     * @param self The BinPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     */\\n    function settlePendingPosition(BinPosition storage self, LpContext memory ctx) internal {\\n        uint256 openVersion = self._pending.openVersion;\\n        if (!ctx.isPastVersion(openVersion)) return;\\n\\n        // accumulate interest before update `_totalMakerMargin`\\n        self._accruedInterest.accumulate(ctx, self._totalMakerMargin, block.timestamp);\\n\\n        int256 pendingQty = self._pending.totalLeveragedQty;\\n        self.totalLeveragedQty += pendingQty;\\n        self.totalEntryAmount += PositionUtil.transactionAmount(\\n            pendingQty,\\n            self._pending.entryPrice(ctx)\\n        );\\n        self._totalMakerMargin += self._pending.totalMakerMargin;\\n        self._totalTakerMargin += self._pending.totalTakerMargin;\\n\\n        self._pending.settleAccruedInterest(ctx);\\n        self._accruedInterest.accumulatedAmount += self._pending.accruedInterest.accumulatedAmount;\\n\\n        delete self._pending;\\n    }\\n\\n    /**\\n     * @notice Handles the opening of a position for a liquidity bin.\\n     * @param self The BinPosition storage.\\n     * @param ctx The LpContext data struct.\\n     * @param param The PositionParam containing the position parameters.\\n     */\\n    function onOpenPosition(\\n        BinPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        self._pending.onOpenPosition(ctx, param);\\n    }\\n\\n    /**\\n     * @notice Handles the closing of a position for a liquidity bin.\\n     * @param self The BinPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @param param The PositionParam data struct containing the position parameters.\\n     */\\n    function onClosePosition(\\n        BinPosition storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal {\\n        if (param.openVersion == self._pending.openVersion) {\\n            self._pending.onClosePosition(ctx, param);\\n        } else {\\n            int256 totalLeveragedQty = self.totalLeveragedQty;\\n            int256 leveragedQty = param.leveragedQty;\\n            PositionUtil.checkRemovePositionQty(totalLeveragedQty, leveragedQty);\\n\\n            // accumulate interest before update `_totalMakerMargin`\\n            self._accruedInterest.accumulate(ctx, self._totalMakerMargin, block.timestamp);\\n\\n            self.totalLeveragedQty = totalLeveragedQty - leveragedQty;\\n            self.totalEntryAmount -= param.entryAmount(ctx);\\n            self._totalMakerMargin -= param.makerMargin;\\n            self._totalTakerMargin -= param.takerMargin;\\n            self._accruedInterest.deduct(param.calculateInterest(ctx, block.timestamp));\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the total maker margin for a liquidity bin position.\\n     * @param self The BinPosition storage struct.\\n     * @return uint256 The total maker margin.\\n     */\\n    function totalMakerMargin(BinPosition storage self) internal view returns (uint256) {\\n        return self._totalMakerMargin + self._pending.totalMakerMargin;\\n    }\\n\\n    /**\\n     * @notice Returns the total taker margin for a liquidity bin position.\\n     * @param self The BinPosition storage struct.\\n     * @return uint256 The total taker margin.\\n     */\\n    function totalTakerMargin(BinPosition storage self) internal view returns (uint256) {\\n        return self._totalTakerMargin + self._pending.totalTakerMargin;\\n    }\\n\\n    /**\\n     * @notice Calculates the unrealized profit or loss for a liquidity bin position.\\n     * @param self The BinPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @return int256 The unrealized profit or loss.\\n     */\\n    function unrealizedPnl(\\n        BinPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (int256) {\\n        IOracleProvider.OracleVersion memory currentVersion = ctx.currentOracleVersion();\\n\\n        int256 leveragedQty = self.totalLeveragedQty;\\n        int256 sign = leveragedQty < 0 ? int256(-1) : int256(1);\\n        UFixed18 exitPrice = PositionUtil.oraclePrice(currentVersion);\\n\\n        int256 entryAmount = self.totalEntryAmount.toInt256() * sign;\\n        int256 exitAmount = PositionUtil.transactionAmount(leveragedQty, exitPrice).toInt256() *\\n            sign;\\n\\n        int256 rawPnl = exitAmount - entryAmount;\\n        int256 pnl = rawPnl +\\n            self._pending.unrealizedPnl(ctx) +\\n            _currentInterest(self, ctx).toInt256();\\n        uint256 absPnl = pnl.abs();\\n\\n        if (pnl >= 0) {\\n            return Math.min(absPnl, totalTakerMargin(self)).toInt256();\\n        } else {\\n            return -(Math.min(absPnl, totalMakerMargin(self)).toInt256());\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the current interest for a liquidity bin position.\\n     * @param self The BinPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @return uint256 The current interest.\\n     */\\n    function currentInterest(\\n        BinPosition storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return _currentInterest(self, ctx) + self._pending.currentInterest(ctx);\\n    }\\n\\n    /**\\n     * @dev Calculates the current interest for a liquidity bin position without pending position.\\n     * @param self The BinPosition storage struct.\\n     * @param ctx The LpContext data struct.\\n     * @return uint256 The current interest.\\n     */\\n    function _currentInterest(\\n        BinPosition storage self,\\n        LpContext memory ctx\\n    ) private view returns (uint256) {\\n        return\\n            self._accruedInterest.calculateInterest(ctx, self._totalMakerMargin, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xe897e52ed9ba1b83ea498b91935da3bf4cd452545f68dd1e9f402b94a6c05eca\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/liquidity/LiquidityBin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {ILiquidity} from \\\"@chromatic-protocol/contracts/core/interfaces/market/ILiquidity.sol\\\";\\nimport {BinLiquidity, BinLiquidityLib} from \\\"@chromatic-protocol/contracts/core/external/liquidity/BinLiquidity.sol\\\";\\nimport {BinPosition, BinPositionLib} from \\\"@chromatic-protocol/contracts/core/external/liquidity/BinPosition.sol\\\";\\nimport {BinClosedPosition, BinClosedPositionLib} from \\\"@chromatic-protocol/contracts/core/external/liquidity/BinClosedPosition.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/external/liquidity/PositionParam.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n/**\\n * @title LiquidityBin\\n * @notice Structure representing a liquidity bin\\n */\\nstruct LiquidityBin {\\n    /// @dev The ID of the CLB token\\n    uint256 clbTokenId;\\n    /// @dev The liquidity data for the bin\\n    BinLiquidity _liquidity;\\n    /// @dev The position data for the bin\\n    BinPosition _position;\\n    /// @dev The closed position data for the bin\\n    BinClosedPosition _closedPosition;\\n}\\n\\n/**\\n * @title LiquidityBinLib\\n * @notice Library for managing liquidity bin\\n */\\nlibrary LiquidityBinLib {\\n    using Math for uint256;\\n    using SignedMath for int256;\\n    using LiquidityBinLib for LiquidityBin;\\n    using BinLiquidityLib for BinLiquidity;\\n    using BinPositionLib for BinPosition;\\n    using BinClosedPositionLib for BinClosedPosition;\\n\\n    /**\\n     * @notice Modifier to settle the pending positions, closing positions,\\n     *         and pending liquidity of the bin before executing a function.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext data struct.\\n     */\\n    //TODO remove callerName param\\n    modifier _settle(LiquidityBin storage self, LpContext memory ctx) {\\n        self.settle(ctx);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Settles the pending positions, closing positions, and pending liquidity of the bin.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext data struct.\\n     */\\n    function settle(LiquidityBin storage self, LpContext memory ctx) internal {\\n        self._closedPosition.settleClosingPosition(ctx);\\n        self._position.settlePendingPosition(ctx);\\n        self._liquidity.settlePendingLiquidity(\\n            ctx,\\n            self.value(ctx),\\n            self.freeLiquidity(),\\n            self.clbTokenId\\n        );\\n    }\\n\\n    /**\\n     * @notice Initializes the liquidity bin with the given trading fee rate\\n     * @param self The LiquidityBin storage\\n     * @param tradingFeeRate The trading fee rate to set\\n     */\\n    function initialize(LiquidityBin storage self, int16 tradingFeeRate) internal {\\n        self.clbTokenId = CLBTokenLib.encodeId(tradingFeeRate);\\n    }\\n\\n    /**\\n     * @notice Opens a new position in the liquidity bin\\n     * @param self The LiquidityBin storage\\n     * @param ctx The LpContext data struct\\n     * @param param The position parameters\\n     * @param tradingFee The trading fee amount\\n     */\\n    function openPosition(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param,\\n        uint256 tradingFee\\n    ) internal _settle(self, ctx) {\\n        require(param.makerMargin <= self.freeLiquidity(), Errors.NOT_ENOUGH_FREE_LIQUIDITY);\\n\\n        self._position.onOpenPosition(ctx, param);\\n        self._liquidity.total += tradingFee;\\n    }\\n\\n    /**\\n     * @notice Closes a position in the liquidity bin\\n     * @param self The LiquidityBin storage\\n     * @param ctx The LpContext data struct\\n     * @param param The position parameters\\n     */\\n    function closePosition(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param\\n    ) internal _settle(self, ctx) {\\n        self._position.onClosePosition(ctx, param);\\n        if (param.closeVersion > param.openVersion) {\\n            self._closedPosition.onClosePosition(ctx, param);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims an existing liquidity position in the bin.\\n     * @dev This function claims the position using the specified parameters\\n     *      and updates the total by subtracting the absolute value\\n     *      of the taker's profit or loss (takerPnl) from it.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @param param The PositionParam memory.\\n     * @param takerPnl The taker's profit/loss.\\n     */\\n    function claimPosition(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        PositionParam memory param,\\n        int256 takerPnl\\n    ) internal _settle(self, ctx) {\\n        if (param.closeVersion == 0) {\\n            // called when liquidate\\n            self._position.onClosePosition(ctx, param);\\n        } else if (param.closeVersion > param.openVersion) {\\n            self._closedPosition.onClaimPosition(ctx, param);\\n        }\\n\\n        uint256 absTakerPnl = takerPnl.abs();\\n        if (takerPnl < 0) {\\n            self._liquidity.total += absTakerPnl;\\n        } else {\\n            self._liquidity.total -= absTakerPnl;\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the total liquidity in the bin\\n     * @param self The LiquidityBin storage\\n     * @return uint256 The total liquidity in the bin\\n     */\\n    function liquidity(LiquidityBin storage self) internal view returns (uint256) {\\n        return self._liquidity.total;\\n    }\\n\\n    /**\\n     * @notice Retrieves the free liquidity in the bin (liquidity minus total maker margin)\\n     * @param self The LiquidityBin storage\\n     * @return uint256 The free liquidity in the bin\\n     */\\n    function freeLiquidity(LiquidityBin storage self) internal view returns (uint256) {\\n        return self._liquidity.total - self._position.totalMakerMargin();\\n    }\\n\\n    /**\\n     * @notice Applies earnings to the liquidity bin\\n     * @param self The LiquidityBin storage\\n     * @param earning The earning amount to apply\\n     */\\n    function applyEarning(LiquidityBin storage self, uint256 earning) internal {\\n        self._liquidity.total += earning;\\n    }\\n\\n    /**\\n     * @notice Calculates the value of the bin.\\n     * @dev This function considers the unrealized profit or loss of the position\\n     *      and adds it to the total value.\\n     *      Additionally, it includes the pending bin share from the market's vault.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @return uint256 The value of the bin.\\n     */\\n    function value(\\n        LiquidityBin storage self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        int256 unrealizedPnl = self._position.unrealizedPnl(ctx);\\n\\n        uint256 absPnl = unrealizedPnl.abs();\\n\\n        uint256 _liquidity = self.liquidity();\\n        uint256 _value = unrealizedPnl < 0 ? _liquidity - absPnl : _liquidity + absPnl;\\n        return\\n            _value +\\n            self._closedPosition.currentInterest(ctx) +\\n            ctx.vault.getPendingBinShare(ctx.market, _liquidity);\\n    }\\n\\n    /**\\n     * @notice Accepts an add liquidity request.\\n     * @dev This function adds liquidity to the bin by calling the `onAddLiquidity` function\\n     *      of the liquidity component.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @param amount The amount of liquidity to add.\\n     */\\n    function acceptAddLiquidity(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        uint256 amount\\n    ) internal _settle(self, ctx) {\\n        self._liquidity.onAddLiquidity(amount, ctx.currentOracleVersion().version);\\n    }\\n\\n    /**\\n     * @notice Accepts a claim liquidity request.\\n     * @dev This function claims liquidity from the bin by calling the `onClaimLiquidity` function\\n     *      of the liquidity component.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @param amount The amount of liquidity to claim.\\n     *        (should be the same as the one used in acceptAddLiquidity)\\n     * @param oracleVersion The oracle version used for the claim.\\n     *        (should be the oracle version when call acceptAddLiquidity)\\n     * @return The amount of liquidity (CLB tokens) received as a result of the liquidity claim.\\n     */\\n    function acceptClaimLiquidity(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        uint256 amount,\\n        uint256 oracleVersion\\n    ) internal _settle(self, ctx) returns (uint256) {\\n        return self._liquidity.onClaimLiquidity(amount, oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Accepts a remove liquidity request.\\n     * @dev This function removes liquidity from the bin by calling the `onRemoveLiquidity` function\\n     *      of the liquidity component.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @param clbTokenAmount The amount of CLB tokens to remove.\\n     */\\n    function acceptRemoveLiquidity(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        uint256 clbTokenAmount\\n    ) internal _settle(self, ctx) {\\n        self._liquidity.onRemoveLiquidity(clbTokenAmount, ctx.currentOracleVersion().version);\\n    }\\n\\n    /**\\n     * @notice Accepts a withdraw liquidity request.\\n     * @dev This function withdraws liquidity from the bin by calling the `onWithdrawLiquidity` function\\n     *      of the liquidity component.\\n     * @param self The LiquidityBin storage.\\n     * @param ctx The LpContext memory.\\n     * @param clbTokenAmount The amount of CLB tokens to withdraw.\\n     *        (should be the same as the one used in acceptRemoveLiquidity)\\n     * @param oracleVersion The oracle version used for the withdrawal.\\n     *        (should be the oracle version when call acceptRemoveLiquidity)\\n     * @return amount The amount of liquidity withdrawn\\n     * @return burnedCLBTokenAmount The amount of CLB tokens burned during the withdrawal.\\n     */\\n    function acceptWithdrawLiquidity(\\n        LiquidityBin storage self,\\n        LpContext memory ctx,\\n        uint256 clbTokenAmount,\\n        uint256 oracleVersion\\n    ) internal _settle(self, ctx) returns (uint256 amount, uint256 burnedCLBTokenAmount) {\\n        return self._liquidity.onWithdrawLiquidity(clbTokenAmount, oracleVersion);\\n    }\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific oracle version from a LiquidityBin.\\n     * @param self The reference to the LiquidityBin struct.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ILiquidity.ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        LiquidityBin storage self,\\n        uint256 oracleVersion\\n    ) internal view returns (ILiquidity.ClaimableLiquidity memory) {\\n        return self._liquidity.claimableLiquidity(oracleVersion);\\n    }\\n}\\n\",\"keccak256\":\"0x27e53451b275f7c9b8aca59233a0e41580c7a20eaa8dc7a7305eff834d499794\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/liquidity/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {ILiquidity} from \\\"@chromatic-protocol/contracts/core/interfaces/market/ILiquidity.sol\\\";\\nimport {LiquidityBin, LiquidityBinLib} from \\\"@chromatic-protocol/contracts/core/external/liquidity/LiquidityBin.sol\\\";\\nimport {PositionParam} from \\\"@chromatic-protocol/contracts/core/external/liquidity/PositionParam.sol\\\";\\nimport {FEE_RATES_LENGTH} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\nimport {BinMargin} from \\\"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title LiquidityPool\\n * @notice Represents a collection of long and short liquidity bins\\n */\\nstruct LiquidityPool {\\n    mapping(uint16 => LiquidityBin) _longBins;\\n    mapping(uint16 => LiquidityBin) _shortBins;\\n}\\n\\nusing LiquidityPoolLib for LiquidityPool global;\\n\\n/**\\n * @title LiquidityPoolLib\\n * @notice Library for managing liquidity bins in an LiquidityPool\\n */\\nlibrary LiquidityPoolLib {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n    using LiquidityBinLib for LiquidityBin;\\n\\n    /**\\n     * @notice Emitted when earning is accumulated for a liquidity bin.\\n     * @param feeRate The fee rate of the bin.\\n     * @param binType The type of the bin (\\\"L\\\" for long, \\\"S\\\" for short).\\n     * @param earning The accumulated earning.\\n     */\\n    event LiquidityBinEarningAccumulated(\\n        uint16 indexed feeRate,\\n        bytes1 indexed binType,\\n        uint256 indexed earning\\n    );\\n\\n    struct _proportionalPositionParamValue {\\n        int256 leveragedQty;\\n        uint256 takerMargin;\\n    }\\n\\n    /**\\n     * @notice Modifier to validate the trading fee rate.\\n     * @param tradingFeeRate The trading fee rate to validate.\\n     */\\n    modifier _validTradingFeeRate(int16 tradingFeeRate) {\\n        validateTradingFeeRate(tradingFeeRate);\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the LiquidityPool.\\n     * @param self The reference to the LiquidityPool.\\n     */\\n    function initialize(LiquidityPool storage self) external {\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n        for (uint256 i = 0; i < FEE_RATES_LENGTH; i++) {\\n            uint16 feeRate = _tradingFeeRates[i];\\n            self._longBins[feeRate].initialize(int16(feeRate));\\n            self._shortBins[feeRate].initialize(-int16(feeRate));\\n        }\\n    }\\n\\n    /**\\n     * @notice Settles the liquidity bins in the LiquidityPool.\\n     * @param self The reference to the LiquidityPool.\\n     * @param ctx The LpContext object.\\n     */\\n    function settle(LiquidityPool storage self, LpContext memory ctx) external {\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n        for (uint256 i = 0; i < FEE_RATES_LENGTH; i++) {\\n            uint16 feeRate = _tradingFeeRates[i];\\n            self._longBins[feeRate].settle(ctx);\\n            self._shortBins[feeRate].settle(ctx);\\n        }\\n    }\\n\\n    /**\\n     * @notice Prepares bin margins based on the given quantity and maker margin.\\n     * @dev This function prepares bin margins by performing the following steps:\\n     *      1. Calculates the appropriate bin margins\\n     *         for each trading fee rate based on the provided quantity and maker margin.\\n     *      2. Iterates through the target bins based on the quantity,\\n     *         finds the minimum available fee rate,\\n     *         and determines the upper bound for calculating bin margins.\\n     *      3. Iterates from the minimum fee rate until the upper bound,\\n     *         assigning the remaining maker margin to the bins until it is exhausted.\\n     *      4. Creates an array of BinMargin structs\\n     *         containing the trading fee rate and corresponding margin amount for each bin.\\n     * @param self The reference to the LiquidityPool.\\n     * @param qty The quantity of the position.\\n     * @param makerMargin The maker margin of the position.\\n     * @return binMargins An array of BinMargin representing the calculated bin margins.\\n     */\\n    function prepareBinMargins(\\n        LiquidityPool storage self,\\n        int224 qty,\\n        uint256 makerMargin,\\n        uint256 minimumBinMargin\\n    ) external view returns (BinMargin[] memory) {\\n        // Retrieve the target liquidity bins based on the position quantity\\n        mapping(uint16 => LiquidityBin) storage _bins = targetBins(self, qty);\\n\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n        uint256[FEE_RATES_LENGTH] memory _binMargins;\\n\\n        uint256 to;\\n        uint256 cnt;\\n        uint256 remain = makerMargin;\\n        for (; to < FEE_RATES_LENGTH; to++) {\\n            if (remain == 0) break;\\n\\n            uint256 freeLiquidity = _bins[_tradingFeeRates[to]].freeLiquidity();\\n            if (freeLiquidity >= minimumBinMargin) {\\n                if (remain <= freeLiquidity) {\\n                    _binMargins[to] = remain;\\n                    remain = 0;\\n                } else {\\n                    _binMargins[to] = freeLiquidity;\\n                    remain -= freeLiquidity;\\n                }\\n                cnt++;\\n            }\\n        }\\n\\n        require(remain == 0, Errors.NOT_ENOUGH_FREE_LIQUIDITY);\\n\\n        BinMargin[] memory binMargins = new BinMargin[](cnt);\\n        for ((uint256 i, uint256 idx) = (0, 0); i < to; i++) {\\n            if (_binMargins[i] > 0) {\\n                binMargins[idx] = BinMargin({\\n                    tradingFeeRate: _tradingFeeRates[i],\\n                    amount: _binMargins[i]\\n                });\\n                unchecked {\\n                    idx++;\\n                }\\n            }\\n        }\\n\\n        return binMargins;\\n    }\\n\\n    /**\\n     * @notice Accepts an open position and opens corresponding liquidity bins.\\n     * @dev This function calculates the target liquidity bins based on the position quantity.\\n     *      It prepares the bin margins and divides the position parameters accordingly.\\n     *      Then, it opens the liquidity bins with the corresponding parameters and trading fees.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param position The Position object representing the open position.\\n     */\\n    function acceptOpenPosition(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        Position memory position\\n    ) external {\\n        // Retrieve the target liquidity bins based on the position quantity\\n        mapping(uint16 => LiquidityBin) storage _bins = targetBins(self, position.qty);\\n\\n        uint256 makerMargin = position.makerMargin();\\n        BinMargin[] memory binMargins = position.binMargins();\\n\\n        // Divide the position parameters to match the bin margins\\n        _proportionalPositionParamValue[] memory paramValues = divideToPositionParamValue(\\n            position.leveragedQty(ctx),\\n            makerMargin,\\n            position.takerMargin,\\n            binMargins\\n        );\\n\\n        PositionParam memory param = newPositionParam(position.openVersion, position.openTimestamp);\\n        for (uint256 i = 0; i < binMargins.length; i++) {\\n            BinMargin memory binMargin = binMargins[i];\\n\\n            if (binMargin.amount > 0) {\\n                param.leveragedQty = paramValues[i].leveragedQty;\\n                param.takerMargin = paramValues[i].takerMargin;\\n                param.makerMargin = binMargin.amount;\\n\\n                _bins[binMargins[i].tradingFeeRate].openPosition(\\n                    ctx,\\n                    param,\\n                    binMargin.tradingFee(position._feeProtocol)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accepts a close position request and closes the corresponding liquidity bins.\\n     * @dev This function calculates the target liquidity bins based on the position quantity.\\n     *      It retrieves the maker margin and bin margins from the position.\\n     *      Then, it divides the position parameters to match the bin margins.\\n     *      Finally, it closes the liquidity bins with the provided parameters.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param position The Position object representing the close position request.\\n     */\\n    function acceptClosePosition(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        Position memory position\\n    ) external {\\n        // Retrieve the target liquidity bins based on the position quantity\\n        mapping(uint16 => LiquidityBin) storage _bins = targetBins(self, position.qty);\\n\\n        uint256 makerMargin = position.makerMargin();\\n        BinMargin[] memory binMargins = position.binMargins();\\n\\n        // Divide the position parameters to match the bin margins\\n        _proportionalPositionParamValue[] memory paramValues = divideToPositionParamValue(\\n            position.leveragedQty(ctx),\\n            makerMargin,\\n            position.takerMargin,\\n            binMargins\\n        );\\n\\n        PositionParam memory param = newPositionParam(\\n            position.openVersion,\\n            position.closeVersion,\\n            position.openTimestamp,\\n            position.closeTimestamp\\n        );\\n\\n        for (uint256 i = 0; i < binMargins.length; i++) {\\n            if (binMargins[i].amount > 0) {\\n                LiquidityBin storage _bin = _bins[binMargins[i].tradingFeeRate];\\n\\n                param.leveragedQty = paramValues[i].leveragedQty;\\n                param.takerMargin = paramValues[i].takerMargin;\\n                param.makerMargin = binMargins[i].amount;\\n\\n                _bin.closePosition(ctx, param);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accepts a claim position request and processes the corresponding liquidity bins\\n     *         based on the realized position pnl.\\n     * @dev This function verifies if the absolute value of the realized position pnl is within the acceptable margin range.\\n     *      It retrieves the target liquidity bins based on the position quantity and the bin margins from the position.\\n     *      Then, it divides the position parameters to match the bin margins.\\n     *      Depending on the value of the realized position pnl, it either claims the position fully or partially.\\n     *      The claimed pnl is distributed among the liquidity bins according to their respective margins.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param position The Position object representing the position to claim.\\n     * @param realizedPnl The realized position pnl (taker side).\\n     */\\n    function acceptClaimPosition(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        Position memory position,\\n        int256 realizedPnl // realized position pnl (taker side)\\n    ) external {\\n        uint256 absRealizedPnl = realizedPnl.abs();\\n        uint256 makerMargin = position.makerMargin();\\n        // Ensure that the realized position pnl is within the acceptable margin range\\n        require(\\n            !((realizedPnl > 0 && absRealizedPnl > makerMargin) ||\\n                (realizedPnl < 0 && absRealizedPnl > position.takerMargin)),\\n            Errors.EXCEED_MARGIN_RANGE\\n        );\\n\\n        // Retrieve the target liquidity bins based on the position quantity\\n        mapping(uint16 => LiquidityBin) storage _bins = targetBins(self, position.qty);\\n        BinMargin[] memory binMargins = position.binMargins();\\n\\n        // Divide the position parameters to match the bin margins\\n        _proportionalPositionParamValue[] memory paramValues = divideToPositionParamValue(\\n            position.leveragedQty(ctx),\\n            makerMargin,\\n            position.takerMargin,\\n            binMargins\\n        );\\n\\n        PositionParam memory param = newPositionParam(\\n            position.openVersion,\\n            position.closeVersion,\\n            position.openTimestamp,\\n            position.closeTimestamp\\n        );\\n\\n        if (realizedPnl == 0) {\\n            for (uint256 i = 0; i < binMargins.length; i++) {\\n                if (binMargins[i].amount > 0) {\\n                    LiquidityBin storage _bin = _bins[binMargins[i].tradingFeeRate];\\n\\n                    param.leveragedQty = paramValues[i].leveragedQty;\\n                    param.takerMargin = paramValues[i].takerMargin;\\n                    param.makerMargin = binMargins[i].amount;\\n\\n                    _bin.claimPosition(ctx, param, 0);\\n                }\\n            }\\n        } else if (realizedPnl > 0 && absRealizedPnl == makerMargin) {\\n            for (uint256 i = 0; i < binMargins.length; i++) {\\n                if (binMargins[i].amount > 0) {\\n                    LiquidityBin storage _bin = _bins[binMargins[i].tradingFeeRate];\\n\\n                    param.leveragedQty = paramValues[i].leveragedQty;\\n                    param.takerMargin = paramValues[i].takerMargin;\\n                    param.makerMargin = binMargins[i].amount;\\n\\n                    _bin.claimPosition(ctx, param, param.makerMargin.toInt256());\\n                }\\n            }\\n        } else {\\n            uint256 remainMakerMargin = makerMargin;\\n            uint256 remainRealizedPnl = absRealizedPnl;\\n\\n            for (uint256 i = 0; i < binMargins.length; i++) {\\n                if (binMargins[i].amount > 0) {\\n                    LiquidityBin storage _bin = _bins[binMargins[i].tradingFeeRate];\\n\\n                    param.leveragedQty = paramValues[i].leveragedQty;\\n                    param.takerMargin = paramValues[i].takerMargin;\\n                    param.makerMargin = binMargins[i].amount;\\n\\n                    uint256 absTakerPnl = remainRealizedPnl.mulDiv(\\n                        param.makerMargin,\\n                        remainMakerMargin\\n                    );\\n                    if (realizedPnl < 0) {\\n                        // maker profit\\n                        absTakerPnl = Math.min(absTakerPnl, param.takerMargin);\\n                    } else {\\n                        // taker profit\\n                        absTakerPnl = Math.min(absTakerPnl, param.makerMargin);\\n                    }\\n\\n                    int256 takerPnl = realizedPnl < 0\\n                        ? -(absTakerPnl.toInt256())\\n                        : absTakerPnl.toInt256();\\n\\n                    _bin.claimPosition(ctx, param, takerPnl);\\n\\n                    remainMakerMargin -= param.makerMargin;\\n                    remainRealizedPnl -= absTakerPnl;\\n                }\\n            }\\n\\n            require(remainRealizedPnl == 0, Errors.EXCEED_MARGIN_RANGE);\\n        }\\n    }\\n\\n    /**\\n     * @notice Accepts an add liquidity request\\n     *         and processes the liquidity bin corresponding to the given trading fee rate.\\n     * @dev This function validates the trading fee rate\\n     *      and calls the acceptAddLiquidity function on the target liquidity bin.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @param amount The amount of liquidity to add.\\n     */\\n    function acceptAddLiquidity(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int16 tradingFeeRate,\\n        uint256 amount\\n    ) external _validTradingFeeRate(tradingFeeRate) {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Process the add liquidity request on the liquidity bin\\n        bin.acceptAddLiquidity(ctx, amount);\\n    }\\n\\n    /**\\n     * @notice Accepts a claim liquidity request\\n     *         and processes the liquidity bin corresponding to the given trading fee rate.\\n     * @dev This function validates the trading fee rate\\n     *      and calls the acceptClaimLiquidity function on the target liquidity bin.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @param amount The amount of liquidity to claim.\\n     *        (should be the same as the one used in acceptAddLiquidity)\\n     * @param oracleVersion The oracle version used for the claim.\\n     *        (should be the oracle version when call acceptAddLiquidity)\\n     * @return The amount of liquidity (CLB tokens) received as a result of the liquidity claim.\\n     */\\n    function acceptClaimLiquidity(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int16 tradingFeeRate,\\n        uint256 amount,\\n        uint256 oracleVersion\\n    ) external _validTradingFeeRate(tradingFeeRate) returns (uint256) {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Process the claim liquidity request on the liquidity bin and return the actual claimed amount\\n        return bin.acceptClaimLiquidity(ctx, amount, oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Accepts a remove liquidity request\\n     *         and processes the liquidity bin corresponding to the given trading fee rate.\\n     * @dev This function validates the trading fee rate\\n     *      and calls the acceptRemoveLiquidity function on the target liquidity bin.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @param clbTokenAmount The amount of CLB tokens to remove.\\n     */\\n    function acceptRemoveLiquidity(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int16 tradingFeeRate,\\n        uint256 clbTokenAmount\\n    ) external _validTradingFeeRate(tradingFeeRate) {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Process the remove liquidity request on the liquidity bin\\n        bin.acceptRemoveLiquidity(ctx, clbTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Accepts a withdraw liquidity request\\n     *         and processes the liquidity bin corresponding to the given trading fee rate.\\n     * @dev This function validates the trading fee rate\\n     *      and calls the acceptWithdrawLiquidity function on the target liquidity bin.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param ctx The LpContext object.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @param clbTokenAmount The amount of CLB tokens to withdraw.\\n     *        (should be the same as the one used in acceptRemoveLiquidity)\\n     * @param oracleVersion The oracle version used for the withdrawal.\\n     *        (should be the oracle version when call acceptRemoveLiquidity)\\n     * @return amount The amount of base tokens withdrawn\\n     * @return burnedCLBTokenAmount the amount of CLB tokens burned.\\n     */\\n    function acceptWithdrawLiquidity(\\n        LiquidityPool storage self,\\n        LpContext memory ctx,\\n        int16 tradingFeeRate,\\n        uint256 clbTokenAmount,\\n        uint256 oracleVersion\\n    )\\n        external\\n        _validTradingFeeRate(tradingFeeRate)\\n        returns (uint256 amount, uint256 burnedCLBTokenAmount)\\n    {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Process the withdraw liquidity request on the liquidity bin\\n        // and get the amount of base tokens withdrawn and CLB tokens burned\\n        return bin.acceptWithdrawLiquidity(ctx, clbTokenAmount, oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Retrieves the total liquidity amount in base tokens for the specified trading fee rate.\\n     * @dev This function retrieves the liquidity bin based on the trading fee rate\\n     *      and calls the liquidity function on it.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @return amount The total liquidity amount in base tokens.\\n     */\\n    function getBinLiquidity(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate\\n    ) external view returns (uint256 amount) {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Get the total liquidity amount in base tokens from the liquidity bin\\n        return bin.liquidity();\\n    }\\n\\n    /**\\n     * @notice Retrieves the free liquidity amount in base tokens for the specified trading fee rate.\\n     * @dev This function retrieves the liquidity bin based on the trading fee rate\\n     *      and calls the freeLiquidity function on it.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param tradingFeeRate The trading fee rate associated with the liquidity bin.\\n     * @return amount The free liquidity amount in base tokens.\\n     */\\n    function getBinFreeLiquidity(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate\\n    ) external view returns (uint256 amount) {\\n        // Retrieve the liquidity bin based on the trading fee rate\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        // Get the free liquidity amount in base tokens from the liquidity bin\\n        return bin.freeLiquidity();\\n    }\\n\\n    /**\\n     * @notice Retrieves the target bins based on the sign of the given value.\\n     * @dev This function retrieves the target bins mapping (short or long) based on the sign of the given value.\\n     * @param self The storage reference to the LiquidityPool.\\n     * @param sign The sign of the value (-1 for negative, 1 for positive).\\n     * @return _bins The target bins mapping associated with the sign of the value.\\n     */\\n    function targetBins(\\n        LiquidityPool storage self,\\n        int256 sign\\n    ) private view returns (mapping(uint16 => LiquidityBin) storage) {\\n        return sign < 0 ? self._shortBins : self._longBins;\\n    }\\n\\n    /**\\n     * @notice Retrieves the target bin based on the trading fee rate.\\n     * @dev This function retrieves the target bin based on the sign of the trading fee rate and returns it.\\n     * @param self The storage reference to the LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate associated with the bin.\\n     * @return bin The target bin associated with the trading fee rate.\\n     */\\n    function targetBin(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate\\n    ) private view returns (LiquidityBin storage) {\\n        return\\n            tradingFeeRate < 0\\n                ? self._shortBins[abs(tradingFeeRate)]\\n                : self._longBins[abs(tradingFeeRate)];\\n    }\\n\\n    /**\\n     * @notice Divides the leveraged quantity, maker margin, and taker margin\\n     *         into proportional position parameter values.\\n     * @dev This function divides the leveraged quantity, maker margin, and taker margin\\n     *      into proportional position parameter values based on the bin margins.\\n     *      It calculates the proportional values for each bin margin and returns them in an array.\\n     * @param leveragedQty The leveraged quantity.\\n     * @param makerMargin The maker margin amount.\\n     * @param takerMargin The taker margin amount.\\n     * @param binMargins The array of bin margins.\\n     * @return values The array of proportional position parameter values.\\n     */\\n    function divideToPositionParamValue(\\n        int256 leveragedQty,\\n        uint256 makerMargin,\\n        uint256 takerMargin,\\n        BinMargin[] memory binMargins\\n    ) private pure returns (_proportionalPositionParamValue[] memory) {\\n        uint256 remainLeveragedQty = leveragedQty.abs();\\n        uint256 remainTakerMargin = takerMargin;\\n\\n        _proportionalPositionParamValue[] memory values = new _proportionalPositionParamValue[](\\n            binMargins.length\\n        );\\n\\n        for (uint256 i = 0; i < binMargins.length - 1; i++) {\\n            uint256 _qty = remainLeveragedQty.mulDiv(binMargins[i].amount, makerMargin);\\n            uint256 _takerMargin = remainTakerMargin.mulDiv(binMargins[i].amount, makerMargin);\\n\\n            values[i] = _proportionalPositionParamValue({\\n                leveragedQty: leveragedQty < 0 ? _qty.toInt256() : -(_qty.toInt256()), // opposit side\\n                takerMargin: _takerMargin\\n            });\\n\\n            remainLeveragedQty -= _qty;\\n            remainTakerMargin -= _takerMargin;\\n        }\\n\\n        values[binMargins.length - 1] = _proportionalPositionParamValue({\\n            leveragedQty: leveragedQty < 0\\n                ? remainLeveragedQty.toInt256()\\n                : -(remainLeveragedQty.toInt256()), // opposit side\\n            takerMargin: remainTakerMargin\\n        });\\n\\n        return values;\\n    }\\n\\n    /**\\n     * @notice Creates a new PositionParam struct with the given oracle version and timestamp.\\n     * @param openVersion The version of the oracle when the position was opened\\n     * @param openTimestamp The timestamp when the position was opened\\n     * @return param The new PositionParam struct.\\n     */\\n    function newPositionParam(\\n        uint256 openVersion,\\n        uint256 openTimestamp\\n    ) private pure returns (PositionParam memory param) {\\n        param.openVersion = openVersion;\\n        param.openTimestamp = openTimestamp;\\n    }\\n\\n    /**\\n     * @notice Creates a new PositionParam struct with the given oracle version and timestamp.\\n     * @param openVersion The version of the oracle when the position was opened\\n     * @param closeVersion The version of the oracle when the position was closed\\n     * @param openTimestamp The timestamp when the position was opened\\n     * @param closeTimestamp The timestamp when the position was closed\\n     * @return param The new PositionParam struct.\\n     */\\n    function newPositionParam(\\n        uint256 openVersion,\\n        uint256 closeVersion,\\n        uint256 openTimestamp,\\n        uint256 closeTimestamp\\n    ) private pure returns (PositionParam memory param) {\\n        param.openVersion = openVersion;\\n        param.closeVersion = closeVersion;\\n        param.openTimestamp = openTimestamp;\\n        param.closeTimestamp = closeTimestamp;\\n    }\\n\\n    /**\\n     * @notice Validates the trading fee rate.\\n     * @dev This function validates the trading fee rate by checking if it is supported.\\n     *      It compares the absolute value of the fee rate with the predefined trading fee rates\\n     *      to determine if it is a valid rate.\\n     * @param tradingFeeRate The trading fee rate to be validated.\\n     */\\n    function validateTradingFeeRate(int16 tradingFeeRate) private pure {\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n\\n        uint16 absFeeRate = abs(tradingFeeRate);\\n\\n        uint256 idx = findUpperBound(_tradingFeeRates, absFeeRate);\\n        require(\\n            idx < _tradingFeeRates.length && absFeeRate == _tradingFeeRates[idx],\\n            Errors.UNSUPPORTED_TRADING_FEE_RATE\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the absolute value of an int16 number.\\n     * @param i The int16 number.\\n     * @return absValue The absolute value of the input number.\\n     */\\n    function abs(int16 i) private pure returns (uint16) {\\n        return i < 0 ? uint16(-i) : uint16(i);\\n    }\\n\\n    /**\\n     * @notice Finds the upper bound index of an element in a sorted array.\\n     * @dev This function performs a binary search on the sorted array\\n     *      to find * the index of the upper bound of the given element.\\n     *      It returns the index as the exclusive upper bound,\\n     *      or the inclusive upper bound if the element is found at the end of the array.\\n     * @param array The sorted array.\\n     * @param element The element to find the upper bound for.\\n     * @return uint256 The index of the upper bound of the element in the array.\\n     */\\n    function findUpperBound(\\n        uint16[FEE_RATES_LENGTH] memory array,\\n        uint16 element\\n    ) private pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @notice Distributes earnings among the liquidity bins.\\n     * @dev This function distributes the earnings among the liquidity bins,\\n     *      proportional to their total balances.\\n     *      It iterates through the trading fee rates\\n     *      and distributes the proportional amount of earnings to each bin\\n     *      based on its total balance relative to the market balance.\\n     * @param self The LiquidityPool storage.\\n     * @param earning The total earnings to be distributed.\\n     * @param marketBalance The market balance.\\n     */\\n    function distributeEarning(\\n        LiquidityPool storage self,\\n        uint256 earning,\\n        uint256 marketBalance\\n    ) external {\\n        uint256 remainEarning = earning;\\n        uint256 remainBalance = marketBalance;\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n\\n        (remainEarning, remainBalance) = distributeEarning(\\n            self._longBins,\\n            remainEarning,\\n            remainBalance,\\n            _tradingFeeRates,\\n            \\\"L\\\"\\n        );\\n        (remainEarning, remainBalance) = distributeEarning(\\n            self._shortBins,\\n            remainEarning,\\n            remainBalance,\\n            _tradingFeeRates,\\n            \\\"S\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Distributes earnings among the liquidity bins of a specific type.\\n     * @dev This function distributes the earnings among the liquidity bins of\\n     *      the specified type, proportional to their total balances.\\n     *      It iterates through the trading fee rates\\n     *      and distributes the proportional amount of earnings to each bin\\n     *      based on its total balance relative to the market balance.\\n     * @param bins The liquidity bins mapping.\\n     * @param earning The total earnings to be distributed.\\n     * @param marketBalance The market balance.\\n     * @param _tradingFeeRates The array of supported trading fee rates.\\n     * @param binType The type of liquidity bin (\\\"L\\\" for long, \\\"S\\\" for short).\\n     * @return remainEarning The remaining earnings after distribution.\\n     * @return remainBalance The remaining market balance after distribution.\\n     */\\n    function distributeEarning(\\n        mapping(uint16 => LiquidityBin) storage bins,\\n        uint256 earning,\\n        uint256 marketBalance,\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates,\\n        bytes1 binType\\n    ) private returns (uint256 remainEarning, uint256 remainBalance) {\\n        remainBalance = marketBalance;\\n        remainEarning = earning;\\n\\n        for (uint256 i = 0; i < FEE_RATES_LENGTH; i++) {\\n            uint16 feeRate = _tradingFeeRates[i];\\n            LiquidityBin storage bin = bins[feeRate];\\n            uint256 binLiquidity = bin.liquidity();\\n\\n            if (binLiquidity == 0) continue;\\n\\n            uint256 binEarning = remainEarning.mulDiv(binLiquidity, remainBalance);\\n\\n            bin.applyEarning(binEarning);\\n\\n            remainBalance -= binLiquidity;\\n            remainEarning -= binEarning;\\n\\n            emit LiquidityBinEarningAccumulated(feeRate, binType, binEarning);\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves the value of a specific bin in the LiquidityPool storage for the provided trading fee rate.\\n     * @param self The reference to the LiquidityPool storage.\\n     * @param _tradingFeeRate The trading fee rate for which to calculate the bin value.\\n     * @param ctx The LP context containing relevant information for the calculation.\\n     * @return value The value of the specified bin.\\n     */\\n    function binValue(\\n        LiquidityPool storage self,\\n        int16 _tradingFeeRate,\\n        LpContext memory ctx\\n    ) external view returns (uint256 value) {\\n        value = targetBin(self, _tradingFeeRate).value(ctx);\\n    }\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from a LiquidityPool.\\n     * @param self The reference to the LiquidityPool struct.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ILiquidity.ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        LiquidityPool storage self,\\n        int16 tradingFeeRate,\\n        uint256 oracleVersion\\n    )\\n        external\\n        view\\n        _validTradingFeeRate(tradingFeeRate)\\n        returns (ILiquidity.ClaimableLiquidity memory)\\n    {\\n        LiquidityBin storage bin = targetBin(self, tradingFeeRate);\\n        return bin.claimableLiquidity(oracleVersion);\\n    }\\n\\n    /**\\n     * @dev Retrieves the liquidity bin statuses for the LiquidityPool using the provided context.\\n     * @param self The LiquidityPool storage instance.\\n     * @param ctx The LpContext containing the necessary context for calculating the bin statuses.\\n     * @return stats An array of ILiquidity.LiquidityBinStatus representing the liquidity bin statuses.\\n     */\\n    function liquidityBinStatuses(\\n        LiquidityPool storage self,\\n        LpContext memory ctx\\n    ) external view returns (ILiquidity.LiquidityBinStatus[] memory) {\\n        uint16[FEE_RATES_LENGTH] memory _tradingFeeRates = CLBTokenLib.tradingFeeRates();\\n\\n        ILiquidity.LiquidityBinStatus[] memory stats = new ILiquidity.LiquidityBinStatus[](\\n            FEE_RATES_LENGTH * 2\\n        );\\n        for (uint256 i = 0; i < FEE_RATES_LENGTH; i++) {\\n            uint16 _feeRate = _tradingFeeRates[i];\\n            LiquidityBin storage longBin = targetBin(self, int16(_feeRate));\\n            LiquidityBin storage shortBin = targetBin(self, -int16(_feeRate));\\n\\n            stats[i] = ILiquidity.LiquidityBinStatus({\\n                tradingFeeRate: int16(_feeRate),\\n                liquidity: longBin.liquidity(),\\n                freeLiquidity: longBin.freeLiquidity(),\\n                binValue: longBin.value(ctx)\\n            });\\n            stats[i + FEE_RATES_LENGTH] = ILiquidity.LiquidityBinStatus({\\n                tradingFeeRate: -int16(_feeRate),\\n                liquidity: shortBin.liquidity(),\\n                freeLiquidity: shortBin.freeLiquidity(),\\n                binValue: shortBin.value(ctx)\\n            });\\n        }\\n\\n        return stats;\\n    }\\n}\\n\",\"keccak256\":\"0x2632fd14a7180b19d6ddb9d3dd531296924a108ad3fb5c517745c73606d28f99\",\"license\":\"BUSL-1.1\"},\"contracts/core/external/liquidity/PositionParam.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {UFixed18} from \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PositionUtil} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\n\\n/**\\n * @title PositionParam\\n * @dev A struct representing the parameters of a position.\\n */\\nstruct PositionParam {\\n    /// @dev The version of the position's open transaction\\n    uint256 openVersion;\\n    /// @dev The version of the position's close transaction\\n    uint256 closeVersion;\\n    /// @dev The leveraged quantity of the position\\n    int256 leveragedQty;\\n    /// @dev The margin amount provided by the taker\\n    uint256 takerMargin;\\n    /// @dev The margin amount provided by the maker\\n    uint256 makerMargin;\\n    /// @dev The timestamp of the position's open transaction\\n    uint256 openTimestamp;\\n    /// @dev The timestamp of the position's close transaction\\n    uint256 closeTimestamp;\\n    /// @dev Caches the settle oracle version for the position's entry\\n    IOracleProvider.OracleVersion _entryVersionCache;\\n    /// @dev Caches the settle oracle version for the position's exit\\n    IOracleProvider.OracleVersion _exitVersionCache;\\n}\\n\\nusing PositionParamLib for PositionParam global;\\n\\n/**\\n * @title PositionParamLib\\n * @notice Library for manipulating PositionParam struct.\\n */\\nlibrary PositionParamLib {\\n    using Math for uint256;\\n    using SignedMath for int256;\\n\\n    /**\\n     * @notice Returns the settle version for the position's entry.\\n     * @param self The PositionParam struct.\\n     * @return uint256 The settle version for the position's entry.\\n     */\\n    function entryVersion(PositionParam memory self) internal pure returns (uint256) {\\n        return PositionUtil.settleVersion(self.openVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the entry price for a PositionParam.\\n     * @param self The PositionParam struct.\\n     * @param ctx The LpContext struct.\\n     * @return UFixed18 The entry price.\\n     */\\n    function entryPrice(\\n        PositionParam memory self,\\n        LpContext memory ctx\\n    ) internal view returns (UFixed18) {\\n        return\\n            PositionUtil.settlePrice(\\n                ctx.oracleProvider,\\n                self.openVersion,\\n                self.entryOracleVersion(ctx)\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the entry amount for a PositionParam.\\n     * @param self The PositionParam struct.\\n     * @param ctx The LpContext struct.\\n     * @return uint256 The entry amount.\\n     */\\n    function entryAmount(\\n        PositionParam memory self,\\n        LpContext memory ctx\\n    ) internal view returns (uint256) {\\n        return PositionUtil.transactionAmount(self.leveragedQty, self.entryPrice(ctx));\\n    }\\n\\n    /**\\n     * @notice Retrieves the settle oracle version for the position's entry.\\n     * @param self The PositionParam struct.\\n     * @param ctx The LpContext struct.\\n     * @return OracleVersion The settle oracle version for the position's entry.\\n     */\\n    function entryOracleVersion(\\n        PositionParam memory self,\\n        LpContext memory ctx\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._entryVersionCache.version == 0) {\\n            self._entryVersionCache = ctx.oracleVersionAt(self.entryVersion());\\n        }\\n        return self._entryVersionCache;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest for a PositionParam until a specified timestamp.\\n     * @dev It is used only to deduct accumulated accrued interest when close position\\n     * @param self The PositionParam struct.\\n     * @param ctx The LpContext struct.\\n     * @param until The timestamp until which to calculate the interest.\\n     * @return uint256 The calculated interest.\\n     */\\n    function calculateInterest(\\n        PositionParam memory self,\\n        LpContext memory ctx,\\n        uint256 until\\n    ) internal view returns (uint256) {\\n        return ctx.calculateInterest(self.makerMargin, self.openTimestamp, until);\\n    }\\n\\n    /**\\n     * @notice Creates a clone of a PositionParam.\\n     * @param self The PositionParam data struct.\\n     * @return PositionParam The cloned PositionParam.\\n     */\\n    function clone(PositionParam memory self) internal pure returns (PositionParam memory) {\\n        return\\n            PositionParam({\\n                openVersion: self.openVersion,\\n                closeVersion: self.closeVersion,\\n                leveragedQty: self.leveragedQty,\\n                takerMargin: self.takerMargin,\\n                makerMargin: self.makerMargin,\\n                openTimestamp: self.openTimestamp,\\n                closeTimestamp: self.closeTimestamp,\\n                _entryVersionCache: self._entryVersionCache,\\n                _exitVersionCache: self._exitVersionCache\\n            });\\n    }\\n\\n    /**\\n     * @notice Creates the inverse of a PositionParam by negating the leveragedQty.\\n     * @param self The PositionParam data struct.\\n     * @return PositionParam The inverted PositionParam.\\n     */\\n    function inverse(PositionParam memory self) internal pure returns (PositionParam memory) {\\n        PositionParam memory param = self.clone();\\n        param.leveragedQty *= -1;\\n        return param;\\n    }\\n}\\n\",\"keccak256\":\"0x96b344b4d4694cfa13eabe5a120437ee6c841e00c5a1d24c3779041095b39907\",\"license\":\"BUSL-1.1\"},\"contracts/core/interfaces/ICLBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\n\\n/**\\n * @title ICLBToken\\n * @dev Interface for CLBToken contract, which represents Liquidity Bin tokens.\\n */\\ninterface ICLBToken is IERC1155, IERC1155MetadataURI {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     * @param id The token ID for which to retrieve the total supply.\\n     * @return The total supply of tokens for the given token ID.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Total amounts of tokens in with the given ids.\\n     * @param ids The token IDs for which to retrieve the total supply.\\n     * @return The total supples of tokens for the given token IDs.\\n     */\\n    function totalSupplyBatch(uint256[] memory ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Mints new tokens and assigns them to the specified address.\\n     * @param to The address to which the minted tokens will be assigned.\\n     * @param id The token ID to mint.\\n     * @param amount The amount of tokens to mint.\\n     * @param data Additional data to pass during the minting process.\\n     */\\n    function mint(address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Burns tokens from a specified address.\\n     * @param from The address from which to burn tokens.\\n     * @param id The token ID to burn.\\n     * @param amount The amount of tokens to burn.\\n     */\\n    function burn(address from, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Retrieves the number of decimals used for token amounts.\\n     * @return The number of decimals used for token amounts.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Retrieves the name of a token.\\n     * @param id The token ID for which to retrieve the name.\\n     * @return The name of the token.\\n     */\\n    function name(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the description of a token.\\n     * @param id The token ID for which to retrieve the description.\\n     * @return The description of the token.\\n     */\\n    function description(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Retrieves the image URI of a token.\\n     * @param id The token ID for which to retrieve the image URI.\\n     * @return The image URI of the token.\\n     */\\n    function image(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x104e532ccc23403fdf1b340c292d208c3837f9abd29eda787eec5b6ac1438488\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IChromaticLiquidator\\n * @dev Interface for the Chromatic Liquidator contract.\\n */\\ninterface IChromaticLiquidator {\\n    /**\\n     * @dev Throws an error indicating that the function can only be accessed by a registered market.\\n     */\\n    error OnlyAccessableByMarket();\\n\\n    /**\\n     * @notice Creates a liquidation task for a given position.\\n     * @param positionId The ID of the position to be liquidated.\\n     */\\n    function createLiquidationTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Cancels a liquidation task for a given position.\\n     * @param positionId The ID of the position for which to cancel the liquidation task.\\n     */\\n    function cancelLiquidationTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Resolves the liquidation of a position.\\n     * @dev This function is called by the Gelato automation system.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be liquidated.\\n     * @return canExec Whether the liquidation can be executed.\\n     * @return execPayload The encoded function call to execute the liquidation.\\n     */\\n    function resolveLiquidation(\\n        address market,\\n        uint256 positionId\\n    ) external view returns (bool canExec, bytes memory execPayload);\\n\\n    /**\\n     * @notice Liquidates a position in a market.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be liquidated.\\n     */\\n    function liquidate(address market, uint256 positionId) external;\\n\\n    /**\\n     * @notice Creates a claim position task for a given position.\\n     * @param positionId The ID of the position to be claimed.\\n     */\\n    function createClaimPositionTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Cancels a claim position task for a given position.\\n     * @param positionId The ID of the position for which to cancel the claim position task.\\n     */\\n    function cancelClaimPositionTask(uint256 positionId) external;\\n\\n    /**\\n     * @notice Resolves the claim of a position.\\n     * @dev This function is called by the Gelato automation system.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be claimed.\\n     * @return canExec Whether the claim can be executed.\\n     * @return execPayload The encoded function call to execute the claim.\\n     */\\n    function resolveClaimPosition(\\n        address market,\\n        uint256 positionId\\n    ) external view returns (bool canExec, bytes memory execPayload);\\n\\n    /**\\n     * @notice Claims a position in a market.\\n     * @param market The address of the market contract.\\n     * @param positionId The ID of the position to be claimed.\\n     */\\n    function claimPosition(address market, uint256 positionId) external;\\n}\\n\",\"keccak256\":\"0xc66f3a457caf3920ccb4449cbc3ab4291eaade94f3a9a2927cf9d91db044a5dd\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ITrade} from \\\"@chromatic-protocol/contracts/core/interfaces/market/ITrade.sol\\\";\\nimport {ILiquidity} from \\\"@chromatic-protocol/contracts/core/interfaces/market/ILiquidity.sol\\\";\\nimport {IMarketState} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketState.sol\\\";\\nimport {IMarketLiquidate} from \\\"@chromatic-protocol/contracts/core/interfaces/market/IMarketLiquidate.sol\\\";\\n\\n/**\\n * @title IChromaticMarket\\n * @dev Interface for the Chromatic Market contract, which combines trade and liquidity functionalities.\\n */\\ninterface IChromaticMarket is ITrade, ILiquidity, IMarketState, IMarketLiquidate {\\n    /**\\n     * @notice Executes the settlement process for the Chromatic market.\\n     * @dev This function is called to settle the market.\\n     */\\n    function settle() external;\\n}\\n\",\"keccak256\":\"0xd15fc35b9cf62364177362732001b11fcab2b8b4d9418538a4e944bf824a5d3b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IMarketDeployer} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IMarketDeployer.sol\\\";\\nimport {ISettlementTokenRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\\\";\\nimport {IOracleProviderRegistry} from \\\"@chromatic-protocol/contracts/core/interfaces/factory/IOracleProviderRegistry.sol\\\";\\n\\n/**\\n * @title IChromaticMarketFactory\\n * @dev Interface for the Chromatic Market Factory contract.\\n */\\ninterface IChromaticMarketFactory is\\n    IMarketDeployer,\\n    IOracleProviderRegistry,\\n    ISettlementTokenRegistry,\\n    IInterestCalculator\\n{\\n    /**\\n     * @notice Emitted when the DAO address is updated.\\n     * @param dao The new DAO address.\\n     */\\n    event UpdateDao(address indexed dao);\\n\\n    /**\\n     * @notice Emitted when the DAO treasury address is updated.\\n     * @param treasury The new DAO treasury address.\\n     */\\n    event UpdateTreasury(address indexed treasury);\\n\\n    /**\\n     * @notice Emitted when the liquidator address is set.\\n     * @param liquidator The liquidator address.\\n     */\\n    event SetLiquidator(address indexed liquidator);\\n\\n    /**\\n     * @notice Emitted when the vault address is set.\\n     * @param vault The vault address.\\n     */\\n    event SetVault(address indexed vault);\\n\\n    /**\\n     * @notice Emitted when the keeper fee payer address is set.\\n     * @param keeperFeePayer The keeper fee payer address.\\n     */\\n    event SetKeeperFeePayer(address indexed keeperFeePayer);\\n\\n    /**\\n     * @notice Emitted when a market is created.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @param market The address of the created market.\\n     */\\n    event MarketCreated(\\n        address indexed oracleProvider,\\n        address indexed settlementToken,\\n        address indexed market\\n    );\\n\\n    /**\\n     * @notice Returns the address of the DAO.\\n     * @return The address of the DAO.\\n     */\\n    function dao() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO treasury.\\n     * @return The address of the DAO treasury.\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the liquidator.\\n     * @return The address of the liquidator.\\n     */\\n    function liquidator() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the vault.\\n     * @return The address of the vault.\\n     */\\n    function vault() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the keeper fee payer.\\n     * @return The address of the keeper fee payer.\\n     */\\n    function keeperFeePayer() external view returns (address);\\n\\n    /**\\n     * @notice Updates the DAO address.\\n     * @param dao The new DAO address.\\n     */\\n    function updateDao(address dao) external;\\n\\n    /**\\n     * @notice Updates the DAO treasury address.\\n     * @param treasury The new DAO treasury address.\\n     */\\n    function updateTreasury(address treasury) external;\\n\\n    /**\\n     * @notice Sets the liquidator address.\\n     * @param liquidator The liquidator address.\\n     */\\n    function setLiquidator(address liquidator) external;\\n\\n    /**\\n     * @notice Sets the vault address.\\n     * @param vault The vault address.\\n     */\\n    function setVault(address vault) external;\\n\\n    /**\\n     * @notice Sets the keeper fee payer address.\\n     * @param keeperFeePayer The keeper fee payer address.\\n     */\\n    function setKeeperFeePayer(address keeperFeePayer) external;\\n\\n    /**\\n     * @notice Returns an array of all market addresses.\\n     * @return markets An array of all market addresses.\\n     */\\n    function getMarkets() external view returns (address[] memory markets);\\n\\n    /**\\n     * @notice Returns an array of market addresses associated with a settlement token.\\n     * @param settlementToken The address of the settlement token.\\n     * @return An array of market addresses.\\n     */\\n    function getMarketsBySettlmentToken(\\n        address settlementToken\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of a market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     * @return The address of the market.\\n     */\\n    function getMarket(\\n        address oracleProvider,\\n        address settlementToken\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Creates a new market associated with an oracle provider and settlement token.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param settlementToken The address of the settlement token.\\n     */\\n    function createMarket(address oracleProvider, address settlementToken) external;\\n\\n    /**\\n     * @notice Checks if a market is registered.\\n     * @param market The address of the market.\\n     * @return True if the market is registered, false otherwise.\\n     */\\n    function isRegisteredMarket(address market) external view returns (bool);\\n\\n    /**\\n     * @notice Creates a Maker earning distribution task for a token.\\n     * @param token The address of the token.\\n     */\\n    function createMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Cancels a Maker earning distribution task for a token.\\n     * @param token The address of the token.\\n     */\\n    function cancelMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Creates a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function createMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Cancels a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function cancelMarketEarningDistributionTask(address market) external;\\n}\\n\",\"keccak256\":\"0x0112f74860cabe86e383932c524b99d92288602b637b14c00edbcd5188bc84bf\",\"license\":\"MIT\"},\"contracts/core/interfaces/IChromaticVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ILendingPool} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/ILendingPool.sol\\\";\\nimport {IVault} from \\\"@chromatic-protocol/contracts/core/interfaces/vault/IVault.sol\\\";\\n\\n/**\\n * @title IChromaticVault\\n * @notice Interface for the Chromatic Vault contract.\\n */\\ninterface IChromaticVault is IVault, ILendingPool {\\n    /**\\n     * @dev Emitted when market earning is accumulated.\\n     * @param market The address of the market.\\n     * @param earning The amount of earning accumulated.\\n     */\\n    event MarketEarningAccumulated(address indexed market, uint256 earning);\\n\\n    /**\\n     * @dev Emitted when maker earning is distributed.\\n     * @param token The address of the settlement token.\\n     * @param earning The amount of earning distributed.\\n     * @param usedKeeperFee The amount of keeper fee used.\\n     */\\n    event MakerEarningDistributed(\\n        address indexed token,\\n        uint256 indexed earning,\\n        uint256 indexed usedKeeperFee\\n    );\\n\\n    /**\\n     * @dev Emitted when market earning is distributed.\\n     * @param market The address of the market.\\n     * @param earning The amount of earning distributed.\\n     * @param usedKeeperFee The amount of keeper fee used.\\n     * @param marketBalance The balance of the market.\\n     */\\n    event MarketEarningDistributed(\\n        address indexed market,\\n        uint256 indexed earning,\\n        uint256 indexed usedKeeperFee,\\n        uint256 marketBalance\\n    );\\n\\n    /**\\n     * @notice Creates a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function createMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Cancels a maker earning distribution task for a token.\\n     * @param token The address of the settlement token.\\n     */\\n    function cancelMakerEarningDistributionTask(address token) external;\\n\\n    /**\\n     * @notice Creates a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function createMarketEarningDistributionTask(address market) external;\\n\\n    /**\\n     * @notice Cancels a market earning distribution task for a market.\\n     * @param market The address of the market.\\n     */\\n    function cancelMarketEarningDistributionTask(address market) external;\\n}\\n\",\"keccak256\":\"0x6a1e0a240cd3ae3ed40cdc96f1430e5f57054d775db58d24f0760137245e7c44\",\"license\":\"MIT\"},\"contracts/core/interfaces/IInterestCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IInterestCalculator\\n * @dev Interface for an interest calculator contract.\\n */\\ninterface IInterestCalculator {\\n    /**\\n     * @notice Calculates the interest accrued for a given token and amount within a specified time range.\\n     * @param token The address of the token.\\n     * @param amount The amount of the token.\\n     * @param from The starting timestamp (inclusive) of the time range.\\n     * @param to The ending timestamp (exclusive) of the time range.\\n     * @return The accrued interest for the specified token and amount within the given time range.\\n     */\\n    function calculateInterest(\\n        address token,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf70b44ce6eb1422abed056169dc5db83ddbb2ee34d7751192f00e6cb3dc1ccbe\",\"license\":\"MIT\"},\"contracts/core/interfaces/IKeeperFeePayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IKeeperFeePayer\\n * @dev Interface for a contract that pays keeper fees.\\n */\\ninterface IKeeperFeePayer {\\n    /**\\n     * @notice Approves or revokes approval to the Uniswap router for a given token.\\n     * @param token The address of the token.\\n     * @param approve A boolean indicating whether to approve or revoke approval.\\n     */\\n    function approveToRouter(address token, bool approve) external;\\n\\n    /**\\n     * @notice Pays the keeper fee using Uniswap swaps.\\n     * @param tokenIn The address of the token being swapped.\\n     * @param amountOut The desired amount of output tokens.\\n     * @param keeperAddress The address of the keeper to receive the fee.\\n     * @return amountIn The actual amount of input tokens used for the swap.\\n     */\\n    function payKeeperFee(\\n        address tokenIn,\\n        uint256 amountOut,\\n        address keeperAddress\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x7ce1f86013c2e8bfa5b9715f2d646f984ea6f56896d82e449a4511cd0a9ab190\",\"license\":\"MIT\"},\"contracts/core/interfaces/callback/IChromaticLiquidityCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IChromaticLiquidityCallback\\n * @dev Interface for a contract that handles liquidity callbacks in the Chromatic protocol.\\n *      Liquidity callbacks are used to handle various operations related to liquidity management.\\n *      This interface defines the function signatures for different types of liquidity callbacks.\\n */\\ninterface IChromaticLiquidityCallback {\\n    /**\\n     * @notice Handles the callback after adding liquidity to the Chromatic protocol.\\n     * @param settlementToken The address of the settlement token used for adding liquidity.\\n     * @param vault The address of the vault where the liquidity is added.\\n     * @param data Additional data associated with the liquidity addition.\\n     */\\n    function addLiquidityCallback(\\n        address settlementToken,\\n        address vault,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after claiming liquidity from the Chromatic protocol.\\n     * @param receiptId The ID of the liquidity claim receipt.\\n     * @param data Additional data associated with the liquidity claim.\\n     */\\n    function claimLiquidityCallback(uint256 receiptId, bytes calldata data) external;\\n\\n    /**\\n     * @notice Handles the callback after removing liquidity from the Chromatic protocol.\\n     * @param clbToken The address of the Chromatic liquidity token.\\n     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.\\n     * @param data Additional data associated with the liquidity removal.\\n     */\\n    function removeLiquidityCallback(\\n        address clbToken,\\n        uint256 clbTokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Handles the callback after withdrawing liquidity from the Chromatic protocol.\\n     * @param receiptId The ID of the liquidity withdrawal receipt.\\n     * @param data Additional data associated with the liquidity withdrawal.\\n     */\\n    function withdrawLiquidityCallback(uint256 receiptId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x86e4bf7586f8d816a686bdb0abd6f9293113feeccd70e108d124e7d77233c60f\",\"license\":\"MIT\"},\"contracts/core/interfaces/callback/IChromaticTradeCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IChromaticTradeCallback\\n * @dev The interface for handling callbacks related to Chromatic trading operations.\\n */\\ninterface IChromaticTradeCallback {\\n    /**\\n     * @notice Callback function called after opening a position.\\n     * @param settlementToken The address of the settlement token used in the position.\\n     * @param vault The address of the vault contract.\\n     * @param marginRequired The amount of margin required for the position.\\n     * @param data Additional data related to the callback.\\n     */\\n    function openPositionCallback(\\n        address settlementToken,\\n        address vault,\\n        uint256 marginRequired,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Callback function called after claiming a position.\\n     * @param positionId The ID of the claimed position.\\n     * @param data Additional data related to the callback.\\n     */\\n    function claimPositionCallback(uint256 positionId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x1b1750f55f06cb153c0bd45671e4a2330d7f370fc23fceb8b6bebc8639ed05b6\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/IMarketDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title An interface for a contract that is capable of deploying Chromatic markets\\n * @notice A contract that constructs a market must implement this to pass arguments to the market\\n * @dev This is used to avoid having constructor arguments in the market contract, which results in the init code hash\\n * of the market being constant allowing the CREATE2 address of the market to be cheaply computed on-chain\\n */\\ninterface IMarketDeployer {\\n    /**\\n     * @notice Get the parameters to be used in constructing the market, set transiently during market creation.\\n     * @dev Called by the market constructor to fetch the parameters of the market\\n     * Returns underlyingAsset The underlying asset of the market\\n     * Returns settlementToken The settlement token of the market\\n     * Returns vPoolCapacity Capacity of virtual future pool\\n     * Returns vPoolA Amplification coefficient of virtual future pool, precise value\\n     */\\n    function parameters() external view returns (address oracleProvider, address settlementToken);\\n}\\n\",\"keccak256\":\"0x6ce7c90b2b1a8ff9b721644a33ab4585d84fdacf789af3ea6169f49dc033fd77\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/IOracleProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IOracleProviderRegistry\\n * @dev Interface for the Oracle Provider Registry contract.\\n */\\ninterface IOracleProviderRegistry {\\n    /**\\n     * @dev Emitted when a new oracle provider is registered.\\n     * @param oracleProvider The address of the registered oracle provider.\\n     */\\n    event OracleProviderRegistered(address indexed oracleProvider);\\n\\n    /**\\n     * @dev Emitted when an oracle provider is unregistered.\\n     * @param oracleProvider The address of the unregistered oracle provider.\\n     */\\n    event OracleProviderUnregistered(address indexed oracleProvider);\\n\\n    /**\\n     * @dev Emitted when the level of an oracle provider is set.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new level set for the oracle provider.\\n     */\\n    event SetOracleProviderLevel(address indexed oracleProvider, uint8 indexed level);\\n\\n    /**\\n     * @notice Registers an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to register.\\n     */\\n    function registerOracleProvider(address oracleProvider) external;\\n\\n    /**\\n     * @notice Unregisters an oracle provider.\\n     * @param oracleProvider The address of the oracle provider to unregister.\\n     */\\n    function unregisterOracleProvider(address oracleProvider) external;\\n\\n    /**\\n     * @notice Gets the registered oracle providers.\\n     * @return An array of registered oracle provider addresses.\\n     */\\n    function registeredOracleProviders() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if an oracle provider is registered.\\n     * @param oracleProvider The address of the oracle provider to check.\\n     * @return A boolean indicating if the oracle provider is registered.\\n     */\\n    function isRegisteredOracleProvider(address oracleProvider) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the level of an oracle provider in the registry.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @return The level of the oracle provider.\\n     */\\n    function getOracleProviderLevel(address oracleProvider) external view returns (uint8);\\n\\n    /**\\n     * @notice Sets the level of an oracle provider in the registry.\\n     * @dev The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new level to be set for the oracle provider.\\n     */\\n    function setOracleProviderLevel(address oracleProvider, uint8 level) external;\\n}\\n\",\"keccak256\":\"0x7b2789456b7c609e8acf1414389502b009f7a0504e8f1986383ceff51953754d\",\"license\":\"MIT\"},\"contracts/core/interfaces/factory/ISettlementTokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {InterestRate} from \\\"@chromatic-protocol/contracts/core/libraries/InterestRate.sol\\\";\\n\\n/**\\n * @title ISettlementTokenRegistry\\n * @dev Interface for the Settlement Token Registry contract.\\n */\\ninterface ISettlementTokenRegistry {\\n    /**\\n     * @dev Emitted when a new settlement token is registered.\\n     * @param token The address of the registered settlement token.\\n     * @param minimumMargin The minimum margin for the markets using this settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    event SettlementTokenRegistered(\\n        address indexed token,\\n        uint256 indexed minimumMargin,\\n        uint256 indexed interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    );\\n\\n    /**\\n     * @dev Emitted when the minimum margin for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    event SetMinimumMargin(address indexed token, uint256 indexed minimumMargin);\\n\\n    /**\\n     * @dev Emitted when the flash loan fee rate for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    event SetFlashLoanFeeRate(address indexed token, uint256 indexed flashLoanFeeRate);\\n\\n    /**\\n     * @dev Emitted when the earning distribution threshold for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    event SetEarningDistributionThreshold(\\n        address indexed token,\\n        uint256 indexed earningDistributionThreshold\\n    );\\n\\n    /**\\n     * @dev Emitted when the Uniswap fee tier for a settlement token is set.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    event SetUniswapFeeTier(address indexed token, uint24 indexed uniswapFeeTier);\\n\\n    /**\\n     * @dev Emitted when an interest rate record is appended for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event InterestRateRecordAppended(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the last interest rate record is removed for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    event LastInterestRateRecordRemoved(\\n        address indexed token,\\n        uint256 indexed annualRateBPS,\\n        uint256 indexed beginTimestamp\\n    );\\n\\n    /**\\n     * @notice Registers a new settlement token.\\n     * @param token The address of the settlement token to register.\\n     * @param minimumMargin The minimum margin for the settlement token.\\n     * @param interestRate The interest rate for the settlement token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.\\n     */\\n    function registerSettlementToken(\\n        address token,\\n        uint256 minimumMargin,\\n        uint256 interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    ) external;\\n\\n    /**\\n     * @notice Gets the list of registered settlement tokens.\\n     * @return An array of addresses representing the registered settlement tokens.\\n     */\\n    function registeredSettlementTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Checks if a settlement token is registered.\\n     * @param token The address of the settlement token to check.\\n     * @return True if the settlement token is registered, false otherwise.\\n     */\\n    function isRegisteredSettlementToken(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the minimum margin for a settlement token.\\n     * @dev The minimumMargin is used as the minimum value for the taker margin of a position\\n     *      or as the minimum value for the maker margin of each bin.\\n     * @param token The address of the settlement token.\\n     * @return The minimum margin for the settlement token.\\n     */\\n    function getMinimumMargin(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the minimum margin for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    function setMinimumMargin(address token, uint256 minimumMargin) external;\\n\\n    /**\\n     * @notice Gets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The flash loan fee rate for the settlement token.\\n     */\\n    function getFlashLoanFeeRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the flash loan fee rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    function setFlashLoanFeeRate(address token, uint256 flashLoanFeeRate) external;\\n\\n    /**\\n     * @notice Gets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The earning distribution threshold for the settlement token.\\n     */\\n    function getEarningDistributionThreshold(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the earning distribution threshold for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    function setEarningDistributionThreshold(\\n        address token,\\n        uint256 earningDistributionThreshold\\n    ) external;\\n\\n    /**\\n     * @notice Gets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The Uniswap fee tier for the settlement token.\\n     */\\n    function getUniswapFeeTier(address token) external view returns (uint24);\\n\\n    /**\\n     * @notice Sets the Uniswap fee tier for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    function setUniswapFeeTier(address token, uint24 uniswapFeeTier) external;\\n\\n    /**\\n     * @notice Appends an interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points (BPS).\\n     * @param beginTimestamp The timestamp when the interest rate record begins.\\n     */\\n    function appendInterestRateRecord(\\n        address token,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes the last interest rate record for a settlement token.\\n     * @param token The address of the settlement token.\\n     */\\n    function removeLastInterestRateRecord(address token) external;\\n\\n    /**\\n     * @notice Gets the current interest rate for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return The current interest rate for the settlement token.\\n     */\\n    function currentInterestRate(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets all the interest rate records for a settlement token.\\n     * @param token The address of the settlement token.\\n     * @return An array of interest rate records for the settlement token.\\n     */\\n    function getInterestRateRecords(\\n        address token\\n    ) external view returns (InterestRate.Record[] memory);\\n}\\n\",\"keccak256\":\"0xd6f2e609c42fed3def6cde7e2d14623e1252356ab0ce79db7fc491c302c491b2\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/ILiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {LpReceipt} from \\\"@chromatic-protocol/contracts/core/libraries/LpReceipt.sol\\\";\\n\\n/**\\n * @title ILiquidity\\n * @dev The interface for liquidity operations in a market.\\n */\\ninterface ILiquidity {\\n    /**\\n     * @dev A struct representing claimable liquidity information.\\n     */\\n    struct ClaimableLiquidity {\\n        /// @dev The amount of settlement tokens requested for minting.\\n        uint256 mintingTokenAmountRequested;\\n        /// @dev The actual amount of CLB tokens minted.\\n        uint256 mintingCLBTokenAmount;\\n        /// @dev The amount of CLB tokens requested for burning.\\n        uint256 burningCLBTokenAmountRequested;\\n        /// @dev The actual amount of CLB tokens burned.\\n        uint256 burningCLBTokenAmount;\\n        /// @dev The amount of settlement tokens equal in value to the burned CLB tokens.\\n        uint256 burningTokenAmount;\\n    }\\n\\n    struct LiquidityBinStatus {\\n        uint256 liquidity;\\n        uint256 freeLiquidity;\\n        uint256 binValue;\\n        int16 tradingFeeRate;\\n    }\\n\\n    error TooSmallAmount();\\n    error OnlyAccessableByVault();\\n    error NotExistLpReceipt();\\n    error NotClaimableLpReceipt();\\n    error NotWithdrawableLpReceipt();\\n    error InvalidLpReceiptAction();\\n\\n    /**\\n     * @dev Emitted when liquidity is added to the market.\\n     * @param recipient The address to receive the CLB tokens.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event AddLiquidity(address indexed recipient, LpReceipt receipt);\\n\\n    /**\\n     * @dev Emitted when liquidity is claimed from the market.\\n     * @param recipient The address that receives the claimed CLB tokens.\\n     * @param clbTokenAmount The amount of CLB tokens claimed.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event ClaimLiquidity(\\n        address indexed recipient,\\n        uint256 indexed clbTokenAmount,\\n        LpReceipt receipt\\n    );\\n\\n    /**\\n     * @dev Emitted when liquidity is removed from the market.\\n     * @param recipient The address that receives the removed liquidity.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event RemoveLiquidity(address indexed recipient, LpReceipt receipt);\\n\\n    /**\\n     * @dev Emitted when liquidity is withdrawn from the market.\\n     * @param recipient The address that receives the withdrawn liquidity.\\n     * @param amount The amount of liquidity withdrawn.\\n     * @param burnedCLBTokenAmount The amount of burned CLB tokens.\\n     * @param receipt The liquidity receipt.\\n     */\\n    event WithdrawLiquidity(\\n        address indexed recipient,\\n        uint256 indexed amount,\\n        uint256 indexed burnedCLBTokenAmount,\\n        LpReceipt receipt\\n    );\\n\\n    /**\\n     * @dev Adds liquidity to the market.\\n     * @param recipient The address to receive the liquidity tokens.\\n     * @param tradingFeeRate The trading fee rate for the liquidity.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function addLiquidity(\\n        address recipient,\\n        int16 tradingFeeRate,\\n        bytes calldata data\\n    ) external returns (LpReceipt memory);\\n\\n    /**\\n     * @dev Claims liquidity from a liquidity receipt.\\n     * @param receiptId The ID of the liquidity receipt.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function claimLiquidity(uint256 receiptId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Removes liquidity from the market.\\n     * @param recipient The address to receive the removed liquidity.\\n     * @param tradingFeeRate The trading fee rate for the liquidity.\\n     * @param data Additional data for the liquidity callback.\\n     * @return The liquidity receipt.\\n     */\\n    function removeLiquidity(\\n        address recipient,\\n        int16 tradingFeeRate,\\n        bytes calldata data\\n    ) external returns (LpReceipt memory);\\n\\n    /**\\n     * @dev Withdraws liquidity from a liquidity receipt.\\n     * @param receiptId The ID of the liquidity receipt.\\n     * @param data Additional data for the liquidity callback.\\n     */\\n    function withdrawLiquidity(uint256 receiptId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.\\n     * @return amount The total liquidity amount for the specified trading fee rate.\\n     */\\n    function getBinLiquidity(int16 tradingFeeRate) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.\\n     * @return amount The available (free) liquidity amount for the specified trading fee rate.\\n     */\\n    function getBinFreeLiquidity(int16 tradingFeeRate) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev Retrieves the values of a specific trading fee rate's bins in the liquidity pool.\\n     *      The value of a bin represents the total valuation of the liquidity in the bin.\\n     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.\\n     * @return values The value list of the bins for the specified trading fee rates.\\n     */\\n    function getBinValues(\\n        int16[] memory tradingFeeRates\\n    ) external view returns (uint256[] memory values);\\n\\n    /**\\n     * @dev Distributes earning to the liquidity bins.\\n     * @param earning The amount of earning to distribute.\\n     * @param marketBalance The balance of the market.\\n     */\\n    function distributeEarningToBins(uint256 earning, uint256 marketBalance) external;\\n\\n    /**\\n     * @dev Retrieves the liquidity receipt with the given receipt ID.\\n     *      It throws NotExistLpReceipt if the specified receipt ID does not exist.\\n     * @param receiptId The ID of the liquidity receipt to retrieve.\\n     * @return receipt The liquidity receipt with the specified ID.\\n     */\\n    function getLpReceipt(uint256 receiptId) external view returns (LpReceipt memory);\\n\\n    /**\\n     * @dev Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.\\n     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.\\n     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.\\n     * @return claimableLiquidity An instance of ClaimableLiquidity representing the claimable liquidity information.\\n     */\\n    function claimableLiquidity(\\n        int16 tradingFeeRate,\\n        uint256 oracleVersion\\n    ) external view returns (ClaimableLiquidity memory);\\n\\n    /**\\n     * @dev Retrieves the liquidity bin statuses for the caller's liquidity pool.\\n     * @return statuses An array of LiquidityBinStatus representing the liquidity bin statuses.\\n     */\\n    function liquidityBinStatuses() external view returns (LiquidityBinStatus[] memory);\\n}\\n\",\"keccak256\":\"0x2ccdffc3ec4aa04a1002bfd70d884f729ba00f0382e371fd0a40a776ec4b07e0\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketLiquidate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IMarketLiquidate\\n * @dev Interface for liquidating and claiming positions in a market.\\n */\\ninterface IMarketLiquidate {\\n    /**\\n     * @dev Checks if a position is eligible for liquidation.\\n     * @param positionId The ID of the position to check.\\n     * @return A boolean indicating if the position is eligible for liquidation.\\n     */\\n    function checkLiquidation(uint256 positionId) external view returns (bool);\\n\\n    /**\\n     * @dev Liquidates a position.\\n     * @param positionId The ID of the position to liquidate.\\n     * @param keeper The address of the keeper performing the liquidation.\\n     * @param keeperFee The native token amount of the keeper's fee.\\n     */\\n    function liquidate(uint256 positionId, address keeper, uint256 keeperFee) external;\\n\\n    /**\\n     * @dev Checks if a position is eligible for claim.\\n     * @param positionId The ID of the position to check.\\n     * @return A boolean indicating if the position is eligible for claim.\\n     */\\n    function checkClaimPosition(uint256 positionId) external view returns (bool);\\n\\n    /**\\n     * @dev Claims a closed position on behalf of a keeper.\\n     * @param positionId The ID of the position to claim.\\n     * @param keeper The address of the keeper claiming the position.\\n     * @param keeperFee The native token amount of the keeper's fee.\\n     */\\n    function claimPosition(uint256 positionId, address keeper, uint256 keeperFee) external;\\n}\\n\",\"keccak256\":\"0xb17fe013f0b218ba61bff6a45be2b53326be747427e3f886f95806eaa9f4c8f4\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/IMarketState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IChromaticMarketFactory} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarketFactory.sol\\\";\\nimport {IChromaticLiquidator} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticLiquidator.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\nimport {IKeeperFeePayer} from \\\"@chromatic-protocol/contracts/core/interfaces/IKeeperFeePayer.sol\\\";\\n\\n/**\\n * @title IMarketState\\n * @dev Interface for accessing the state of a market contract.\\n */\\ninterface IMarketState {\\n    /**\\n     * @dev Returns the factory contract for the market.\\n     * @return The factory contract.\\n     */\\n    function factory() external view returns (IChromaticMarketFactory);\\n\\n    /**\\n     * @dev Returns the settlement token of the market.\\n     * @return The settlement token.\\n     */\\n    function settlementToken() external view returns (IERC20Metadata);\\n\\n    /**\\n     * @dev Returns the oracle provider contract for the market.\\n     * @return The oracle provider contract.\\n     */\\n    function oracleProvider() external view returns (IOracleProvider);\\n\\n    /**\\n     * @dev Returns the CLB token contract for the market.\\n     * @return The CLB token contract.\\n     */\\n    function clbToken() external view returns (ICLBToken);\\n\\n    /**\\n     * @dev Returns the liquidator contract for the market.\\n     * @return The liquidator contract.\\n     */\\n    function liquidator() external view returns (IChromaticLiquidator);\\n\\n    /**\\n     * @dev Returns the vault contract for the market.\\n     * @return The vault contract.\\n     */\\n    function vault() external view returns (IChromaticVault);\\n\\n    /**\\n     * @dev Returns the keeper fee payer contract for the market.\\n     * @return The keeper fee payer contract.\\n     */\\n    function keeperFeePayer() external view returns (IKeeperFeePayer);\\n}\\n\",\"keccak256\":\"0x6f06aa64c53e0b8591f48abef262a784157db84d761d453fa1ce9a26045c31bf\",\"license\":\"MIT\"},\"contracts/core/interfaces/market/ITrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {Position} from \\\"@chromatic-protocol/contracts/core/libraries/Position.sol\\\";\\n\\n/**\\n * @title ITrade\\n * @dev Interface for trading positions in a market.\\n */\\ninterface ITrade {\\n    error ZeroTargetAmount();\\n    error TooSmallTakerMargin();\\n    error NotEnoughMarginTransfered();\\n    error NotExistPosition();\\n    error NotPermitted();\\n    error AlreadyClosedPosition();\\n    error NotClaimablePosition();\\n    error ExceedMaxAllowableTradingFee();\\n    error ExceedMaxAllowableLeverage();\\n    error ClaimPositionCallbackError();\\n\\n    /**\\n     * @dev Emitted when a position is opened.\\n     * @param account The address of the account opening the position.\\n     * @param position The opened position.\\n     */\\n    event OpenPosition(address indexed account, Position position);\\n\\n    /**\\n     * @dev Emitted when a position is closed.\\n     * @param account The address of the account closing the position.\\n     * @param position The closed position.\\n     */\\n    event ClosePosition(address indexed account, Position position);\\n\\n    /**\\n     * @dev Emitted when a position is claimed.\\n     * @param account The address of the account claiming the position.\\n     * @param pnl The profit or loss of the claimed position.\\n     * @param interest The interest paid for the claimed position.\\n     * @param position The claimed position.\\n     */\\n    event ClaimPosition(\\n        address indexed account,\\n        int256 indexed pnl,\\n        uint256 indexed interest,\\n        Position position\\n    );\\n\\n    /**\\n     * @dev Emitted when protocol fees are transferred.\\n     * @param positionId The ID of the position for which the fees are transferred.\\n     * @param amount The amount of fees transferred.\\n     */\\n    event TransferProtocolFee(uint256 indexed positionId, uint256 indexed amount);\\n\\n    /**\\n     * @dev Emitted when a position is liquidated.\\n     * @param account The address of the account being liquidated.\\n     * @param usedKeeperFee The amount of keeper fee used for the liquidation.\\n     * @param position The liquidated position.\\n     */\\n    event Liquidate(address indexed account, uint256 indexed usedKeeperFee, Position position);\\n\\n    /**\\n     * @notice Emitted when the protocol fee is changed by the market\\n     * @param feeProtocolOld The previous value of the protocol fee\\n     * @param feeProtocolNew The updated value of the protocol fee\\n     */\\n    event SetFeeProtocol(uint8 feeProtocolOld, uint8 feeProtocolNew);\\n\\n    /**\\n     * @dev Opens a new position in the market.\\n     * @param qty The quantity of the position.\\n     * @param leverage The leverage of the position in basis points.\\n     * @param takerMargin The margin amount provided by the taker.\\n     * @param makerMargin The margin amount provided by the maker.\\n     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.\\n     * @param data Additional data for the position callback.\\n     * @return The opened position.\\n     */\\n    function openPosition(\\n        int224 qty,\\n        uint32 leverage, // BPS\\n        uint256 takerMargin,\\n        uint256 makerMargin,\\n        uint256 maxAllowableTradingFee,\\n        bytes calldata data\\n    ) external returns (Position memory);\\n\\n    /**\\n     * @dev Closes a position in the market.\\n     * @param positionId The ID of the position to close.\\n     */\\n    function closePosition(uint256 positionId) external;\\n\\n    /**\\n     * @dev Claims a closed position in the market.\\n     * @param positionId The ID of the position to claim.\\n     * @param recipient The address of the recipient of the claimed position.\\n     * @param data Additional data for the claim callback.\\n     */\\n    function claimPosition(\\n        uint256 positionId,\\n        address recipient, // EOA or account contract\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Retrieves multiple positions by their IDs.\\n     * @param positionIds The IDs of the positions to retrieve.\\n     * @return positions An array of retrieved positions.\\n     */\\n    function getPositions(\\n        uint256[] calldata positionIds\\n    ) external view returns (Position[] memory positions);\\n\\n    /**\\n     * @notice Set the denominator of the protocol's % share of the fees\\n     * @param feeProtocol new protocol fee for the market\\n     */\\n    function setFeeProtocol(uint8 feeProtocol) external;\\n}\\n\",\"keccak256\":\"0x2b29ad450ef133808becdd13e57eab35aaaea712f448e6f299a8918c0236cc8a\",\"license\":\"MIT\"},\"contracts/core/interfaces/vault/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title ILendingPool\\n * @dev Interface for a lending pool contract.\\n */\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted when a flash loan is executed.\\n     * @param sender The address initiating the flash loan.\\n     * @param recipient The address receiving the flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @param paid The amount paid back after the flash loan.\\n     * @param paidToTakerPool The amount paid to the taker pool after the flash loan.\\n     * @param paidToMakerPool The amount paid to the maker pool after the flash loan.\\n     */\\n    event FlashLoan(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed amount,\\n        uint256 paid,\\n        uint256 paidToTakerPool,\\n        uint256 paidToMakerPool\\n    );\\n\\n    /**\\n     * @dev Executes a flash loan.\\n     * @param token The address of the token for the flash loan.\\n     * @param amount The amount of the flash loan.\\n     * @param recipient The address to receive the flash loan.\\n     * @param data Additional data for the flash loan.\\n     */\\n    function flashLoan(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.\\n     * @param market The address of the market.\\n     * @param binBalance The balance of funds in the bin.\\n     * @return The pending share of earnings for the specified bin.\\n     */\\n    function getPendingBinShare(address market, uint256 binBalance) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe3c5c998f3ee5226fd451b6b6954a1b6893c857c73f54a3d9dbbc0be6a97fa2b\",\"license\":\"MIT\"},\"contracts/core/interfaces/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IVault\\n * @dev Interface for the Vault contract, responsible for managing positions and liquidity.\\n */\\ninterface IVault {\\n    /**\\n     * @notice Emitted when a position is opened.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the opened position.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param protocolFee The protocol fee associated with the position.\\n     */\\n    event OnOpenPosition(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        uint256 indexed takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    );\\n\\n    /**\\n     * @notice Emitted when a position is claimed.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the claimed position.\\n     * @param recipient The address of the recipient of the settlement amount.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param settlementAmount The settlement amount received by the recipient.\\n     */\\n    event OnClaimPosition(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        address indexed recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when liquidity is added to the vault.\\n     * @param market The address of the market.\\n     * @param amount The amount of liquidity added.\\n     */\\n    event OnAddLiquidity(address indexed market, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when pending liquidity is settled.\\n     * @param market The address of the market.\\n     * @param pendingDeposit The amount of pending deposit being settled.\\n     * @param pendingWithdrawal The amount of pending withdrawal being settled.\\n     */\\n    event OnSettlePendingLiquidity(\\n        address indexed market,\\n        uint256 indexed pendingDeposit,\\n        uint256 indexed pendingWithdrawal\\n    );\\n\\n    /**\\n     * @notice Emitted when liquidity is withdrawn from the vault.\\n     * @param market The address of the market.\\n     * @param amount The amount of liquidity withdrawn.\\n     * @param recipient The address of the recipient of the withdrawn liquidity.\\n     */\\n    event OnWithdrawLiquidity(\\n        address indexed market,\\n        uint256 indexed amount,\\n        address indexed recipient\\n    );\\n\\n    /**\\n     * @notice Emitted when the keeper fee is transferred.\\n     * @param fee The amount of the transferred keeper fee as native token.\\n     * @param amount The amount of settlement token to be used for paying keeper fee.\\n     */\\n    event TransferKeeperFee(uint256 indexed fee, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when the keeper fee is transferred for a specific market.\\n     * @param market The address of the market.\\n     * @param fee The amount of the transferred keeper fee as native token.\\n     * @param amount The amount of settlement token to be used for paying keeper fee.\\n     */\\n    event TransferKeeperFee(address indexed market, uint256 indexed fee, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when the protocol fee is transferred for a specific position.\\n     * @param market The address of the market.\\n     * @param positionId The ID of the position.\\n     * @param amount The amount of the transferred fee.\\n     */\\n    event TransferProtocolFee(\\n        address indexed market,\\n        uint256 indexed positionId,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @notice Called when a position is opened by a market contract.\\n     * @param positionId The ID of the opened position.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param tradingFee The trading fee associated with the position.\\n     * @param protocolFee The protocol fee associated with the position.\\n     */\\n    function onOpenPosition(\\n        uint256 positionId,\\n        uint256 takerMargin,\\n        uint256 tradingFee,\\n        uint256 protocolFee\\n    ) external;\\n\\n    /**\\n     * @notice Called when a position is claimed by a market contract.\\n     * @param positionId The ID of the claimed position.\\n     * @param recipient The address that will receive the settlement amount.\\n     * @param takerMargin The margin amount provided by the taker for the position.\\n     * @param settlementAmount The amount to be settled for the position.\\n     */\\n    function onClaimPosition(\\n        uint256 positionId,\\n        address recipient,\\n        uint256 takerMargin,\\n        uint256 settlementAmount\\n    ) external;\\n\\n    /**\\n     * @notice Called when liquidity is added to the vault by a market contract.\\n     * @param amount The amount of liquidity being added.\\n     */\\n    function onAddLiquidity(uint256 amount) external;\\n\\n    /**\\n     * @notice Called when pending liquidity is settled in the vault by a market contract.\\n     * @param pendingDeposit The amount of pending deposits being settled.\\n     * @param pendingWithdrawal The amount of pending withdrawals being settled.\\n     */\\n    function onSettlePendingLiquidity(uint256 pendingDeposit, uint256 pendingWithdrawal) external;\\n\\n    /**\\n     * @notice Called when liquidity is withdrawn from the vault by a market contract.\\n     * @param recipient The address that will receive the withdrawn liquidity.\\n     * @param amount The amount of liquidity to be withdrawn.\\n     */\\n    function onWithdrawLiquidity(address recipient, uint256 amount) external;\\n\\n    /**\\n     * @notice Transfers the keeper fee from the market to the specified keeper.\\n     * @param keeper The address of the keeper to receive the fee.\\n     * @param fee The amount of the fee to transfer as native token.\\n     * @param margin The margin amount used for the fee payment.\\n     * @return usedFee The actual settlement token amount of fee used for the transfer.\\n     */\\n    function transferKeeperFee(\\n        address keeper,\\n        uint256 fee,\\n        uint256 margin\\n    ) external returns (uint256 usedFee);\\n}\\n\",\"keccak256\":\"0xc38899968e78edf74929132a7fdd481305ef43650068dda4953d2d1439601fbb\",\"license\":\"MIT\"},\"contracts/core/libraries/BinMargin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title BinMargin\\n * @dev The BinMargin struct represents the margin information for an LP bin.\\n */\\nstruct BinMargin {\\n    /// @dev The trading fee rate associated with the LP bin\\n    uint16 tradingFeeRate;\\n    /// @dev The maker margin amount specified for the LP bin\\n    uint256 amount;\\n}\\n\\nusing BinMarginLib for BinMargin global;\\n\\n/**\\n * @title BinMarginLib\\n * @dev The BinMarginLib library provides functions to operate on BinMargin structs.\\n */\\nlibrary BinMarginLib {\\n    using Math for uint256;\\n\\n    uint256 constant TRADING_FEE_RATE_PRECISION = 10000;\\n\\n    /**\\n     * @notice Calculates the trading fee based on the margin amount and the trading fee rate.\\n     * @param self The BinMargin struct\\n     * @param _feeProtocol The protocol fee for the market\\n     * @return The trading fee amount\\n     */\\n    function tradingFee(BinMargin memory self, uint8 _feeProtocol) internal pure returns (uint256) {\\n        uint256 _tradingFee = self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION);\\n        return _tradingFee - _protocolFee(_tradingFee, _feeProtocol);\\n    }\\n\\n    /**\\n     * @notice Calculates the protocol fee based on the margin amount and the trading fee rate.\\n     * @param self The BinMargin struct\\n     * @param _feeProtocol The protocol fee for the market\\n     * @return The protocol fee amount\\n     */\\n    function protocolFee(\\n        BinMargin memory self,\\n        uint8 _feeProtocol\\n    ) internal pure returns (uint256) {\\n        return\\n            _protocolFee(\\n                self.amount.mulDiv(self.tradingFeeRate, TRADING_FEE_RATE_PRECISION),\\n                _feeProtocol\\n            );\\n    }\\n\\n    function _protocolFee(uint256 _tradingFee, uint8 _feeProtocol) private pure returns (uint256) {\\n        return _feeProtocol > 0 ? _tradingFee / _feeProtocol : 0;\\n    }\\n}\\n\",\"keccak256\":\"0xde9fa25349cde96a0bb43965bbe576ed2843483c8115f90043d18a095b0a35af\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/CLBTokenLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {FEE_RATES_LENGTH} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\n\\n/**\\n * @title CLBTokenLib\\n * @notice Provides utility functions for working with CLB tokens.\\n */\\nlibrary CLBTokenLib {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n\\n    uint256 private constant DIRECTION_PRECISION = 10 ** 10;\\n    uint16 private constant MIN_FEE_RATE = 1;\\n\\n    /**\\n     * @notice Encode the CLB token ID of ERC1155 token type\\n     * @dev If `tradingFeeRate` is negative, it adds `DIRECTION_PRECISION` to the absolute fee rate.\\n     *      Otherwise it returns the fee rate directly.\\n     * @return id The ID of ERC1155 token\\n     */\\n    function encodeId(int16 tradingFeeRate) internal pure returns (uint256) {\\n        bool long = tradingFeeRate > 0;\\n        return _encodeId(uint16(long ? tradingFeeRate : -tradingFeeRate), long);\\n    }\\n\\n    /**\\n     * @notice Decode the trading fee rate from the CLB token ID of ERC1155 token type\\n     * @dev If `id` is greater than or equal to `DIRECTION_PRECISION`,\\n     *      then it substracts `DIRECTION_PRECISION` from `id`\\n     *      and returns the negation of the substracted value.\\n     *      Otherwise it returns `id` directly.\\n     * @return tradingFeeRate The trading fee rate\\n     */\\n    function decodeId(uint256 id) internal pure returns (int16 tradingFeeRate) {\\n        if (id >= DIRECTION_PRECISION) {\\n            tradingFeeRate = -int16((id - DIRECTION_PRECISION).toUint16());\\n        } else {\\n            tradingFeeRate = int16(id.toUint16());\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the array of supported trading fee rates.\\n     * @dev This function returns the array of supported trading fee rates,\\n     *      ranging from the minimum fee rate to the maximum fee rate with step increments.\\n     * @return tradingFeeRates The array of supported trading fee rates.\\n     */\\n    function tradingFeeRates() internal pure returns (uint16[FEE_RATES_LENGTH] memory) {\\n        // prettier-ignore\\n        return [\\n            MIN_FEE_RATE, 2, 3, 4, 5, 6, 7, 8, 9, // 0.01% ~ 0.09%, step 0.01%\\n            10, 20, 30, 40, 50, 60, 70, 80, 90, // 0.1% ~ 0.9%, step 0.1%\\n            100, 200, 300, 400, 500, 600, 700, 800, 900, // 1% ~ 9%, step 1%\\n            1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000 // 10% ~ 50%, step 5%\\n        ];\\n    }\\n\\n    function tokenIds() internal pure returns (uint256[] memory) {\\n        uint16[FEE_RATES_LENGTH] memory feeRates = tradingFeeRates();\\n\\n        uint256[] memory ids = new uint256[](FEE_RATES_LENGTH * 2);\\n        for (uint256 i = 0; i < FEE_RATES_LENGTH; i++) {\\n            ids[i] = _encodeId(feeRates[i], true);\\n            ids[i + FEE_RATES_LENGTH] = _encodeId(feeRates[i], false);\\n        }\\n\\n        return ids;\\n    }\\n\\n    function _encodeId(uint16 tradingFeeRate, bool long) private pure returns (uint256 id) {\\n        id = long ? tradingFeeRate : tradingFeeRate + DIRECTION_PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0xf65a29799dd3e7c915c70b0647c53bafe19ccbd187b0bad6288401fa67d91506\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nuint256 constant BPS = 10000;\\nuint256 constant FEE_RATES_LENGTH = 36;\\n\",\"keccak256\":\"0x7090514076115048f25329d3a18a07456d07e1630c7e3ad13df01cb9f89e59de\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Errors {\\n    string constant ONLY_DAO_CAN_ACCESS = \\\"DAO\\\";\\n    string constant ONLY_VAULT_CAN_ACCESS = \\\"VLT\\\";\\n    string constant ONLY_DEDICATED_MSG_SENDER_CAN_ACCESS = \\\"DMS\\\";\\n    string constant ONLY_LIQUIDATOR_CAN_ACCESS = \\\"LIQ\\\";\\n    string constant ONLY_FUNDS_OWNER_CAN_WITHDRAW_FUNDS = \\\"FOW\\\";\\n    string constant ETH_TRANSFER_FAILED = \\\"ETF\\\";\\n    string constant INVALID_SWAP_VALUE = \\\"ISV\\\";\\n    string constant NOT_ENOUGH_FREE_LIQUIDITY = \\\"NEFL\\\";\\n    string constant TOO_SMALL_AMOUNT = \\\"TSA\\\";\\n    string constant INVALID_ORACLE_VERSION = \\\"IOV\\\";\\n    string constant EXCEED_MARGIN_RANGE = \\\"IOV\\\";\\n    string constant UNSUPPORTED_TRADING_FEE_RATE = \\\"UTFR\\\";\\n    string constant ALREADY_REGISTERED_ORACLE_PROVIDER = \\\"ARO\\\";\\n    string constant ALREADY_REGISTERED_TOKEN = \\\"ART\\\";\\n    string constant UNREGISTERED_TOKEN = \\\"URT\\\";\\n    string constant INTEREST_RATE_NOT_INITIALIZED = \\\"IRNI\\\";\\n    string constant INTEREST_RATE_OVERFLOW = \\\"IROF\\\";\\n    string constant INTEREST_RATE_PAST_TIMESTAMP = \\\"IRPT\\\";\\n    string constant INTEREST_RATE_NOT_APPENDABLE = \\\"IRNA\\\";\\n    string constant INTEREST_RATE_ALREADY_APPLIED = \\\"IRAA\\\";\\n    string constant UNSETTLED_POSITION = \\\"USP\\\";\\n    string constant INVALID_POSITION_QTY = \\\"IPQ\\\";\\n}\\n\",\"keccak256\":\"0x42f8a4ee21e7d9a19a21dd1cad50631fe43f7d07bf56886be52413b6b55b7525\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/InterestRate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {BPS} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title InterestRate\\n * @notice Provides functions for managing interest rates.\\n * @dev The library allows for the initialization, appending, and removal of interest rate records,\\n *      as well as calculating interest based on these records.\\n */\\nlibrary InterestRate {\\n    using Math for uint256;\\n\\n    /// @dev Record type\\n    struct Record {\\n        /// @dev Annual interest rate in BPS\\n        uint256 annualRateBPS;\\n        /// @dev Timestamp when the interest rate becomes effective\\n        uint256 beginTimestamp;\\n    }\\n\\n    uint256 private constant MAX_RATE_BPS = BPS; // max interest rate is 100%\\n    uint256 private constant YEAR = 365 * 24 * 3600;\\n\\n    /**\\n     * @dev Ensure that the interest rate records have been initialized before certain functions can be called.\\n     *      It checks whether the length of the Record array is greater than 0.\\n     */\\n    modifier initialized(Record[] storage self) {\\n        require(self.length > 0, Errors.INTEREST_RATE_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the interest rate records.\\n     * @param self The stored record array\\n     * @param initialInterestRate The initial interest rate\\n     */\\n    function initialize(Record[] storage self, uint256 initialInterestRate) internal {\\n        self.push(Record({annualRateBPS: initialInterestRate, beginTimestamp: 0}));\\n    }\\n\\n    /**\\n     * @notice Add a new interest rate record to the array.\\n     * @dev Annual rate is not greater than the maximum rate and that the begin timestamp is in the future,\\n     *      and the new record's begin timestamp is greater than the previous record's timestamp.\\n     * @param self The stored record array\\n     * @param annualRateBPS The annual interest rate in BPS\\n     * @param beginTimestamp Begin timestamp of this record\\n     */\\n    function appendRecord(\\n        Record[] storage self,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) internal initialized(self) {\\n        require(annualRateBPS <= MAX_RATE_BPS, Errors.INTEREST_RATE_OVERFLOW);\\n        require(beginTimestamp > block.timestamp, Errors.INTEREST_RATE_PAST_TIMESTAMP);\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        require(beginTimestamp > lastRecord.beginTimestamp, Errors.INTEREST_RATE_NOT_APPENDABLE);\\n\\n        self.push(Record({annualRateBPS: annualRateBPS, beginTimestamp: beginTimestamp}));\\n    }\\n\\n    /**\\n     * @notice Remove the last interest rate record from the array.\\n     * @dev The current time must be less than the begin timestamp of the last record.\\n     *      If the array has only one record, it returns false along with an empty record.\\n     *      Otherwise, it removes the last record from the array and returns true along with the removed record.\\n     * @param self The stored record array\\n     * @return removed Whether the last record is removed\\n     * @return record The removed record\\n     */\\n    function removeLastRecord(\\n        Record[] storage self\\n    ) internal initialized(self) returns (bool removed, Record memory record) {\\n        if (self.length <= 1) {\\n            // empty\\n            return (false, Record(0, 0));\\n        }\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        require(block.timestamp < lastRecord.beginTimestamp, Errors.INTEREST_RATE_ALREADY_APPLIED);\\n\\n        self.pop();\\n\\n        return (true, lastRecord);\\n    }\\n\\n    /**\\n     * @notice Find the interest rate record that applies to a given timestamp.\\n     * @dev It iterates through the array from the end to the beginning\\n     *      and returns the first record with a begin timestamp less than or equal to the provided timestamp.\\n     * @param self The stored record array\\n     * @param timestamp Given timestamp\\n     * @return interestRate The record which is found\\n     * @return index The index of record\\n     */\\n    function findRecordAt(\\n        Record[] storage self,\\n        uint256 timestamp\\n    ) internal view initialized(self) returns (Record memory interestRate, uint256 index) {\\n        for (uint256 i = self.length; i > 0; i--) {\\n            index = i - 1;\\n            interestRate = self[index];\\n\\n            if (interestRate.beginTimestamp <= timestamp) {\\n                return (interestRate, index);\\n            }\\n        }\\n\\n        return (self[0], 0); // empty result (this line is not reachable)\\n    }\\n\\n    /**\\n     * @notice Calculate the interest\\n     * @param self The stored record array\\n     * @param amount Token amount\\n     * @param from Begin timestamp (inclusive)\\n     * @param to End timestamp (exclusive)\\n     */\\n    function calculateInterest(\\n        Record[] storage self,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) internal view initialized(self) returns (uint256) {\\n        if (from >= to) {\\n            return 0;\\n        }\\n\\n        uint256 interest = 0;\\n\\n        uint256 endTimestamp = type(uint256).max;\\n        for (uint256 idx = self.length; idx > 0; idx--) {\\n            Record memory record = self[idx - 1];\\n            if (endTimestamp <= from) {\\n                break;\\n            }\\n\\n            interest += _interest(\\n                amount,\\n                record.annualRateBPS,\\n                Math.min(to, endTimestamp) - Math.max(from, record.beginTimestamp)\\n            );\\n            endTimestamp = record.beginTimestamp;\\n        }\\n        return interest;\\n    }\\n\\n    function _interest(\\n        uint256 amount,\\n        uint256 rateBPS, // annual rate\\n        uint256 period // in seconds\\n    ) private pure returns (uint256) {\\n        return amount.mulDiv(rateBPS * period, BPS * YEAR, Math.Rounding.Up);\\n    }\\n}\\n\",\"keccak256\":\"0x1f6bd79aefc6a5ac831cc3156d22761b99df09c73c37d200ee8972f3d7813f22\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/LpContext.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {IInterestCalculator} from \\\"@chromatic-protocol/contracts/core/interfaces/IInterestCalculator.sol\\\";\\nimport {IChromaticMarket} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticMarket.sol\\\";\\nimport {IChromaticVault} from \\\"@chromatic-protocol/contracts/core/interfaces/IChromaticVault.sol\\\";\\nimport {ICLBToken} from \\\"@chromatic-protocol/contracts/core/interfaces/ICLBToken.sol\\\";\\n\\n/**\\n * @title LpContext\\n * @notice Represents the context information required for LP bin operations.\\n */\\nstruct LpContext {\\n    /// @dev The Oracle Provider contract used for price feed\\n    IOracleProvider oracleProvider;\\n    /// @dev The Interest Calculator contract used for interest calculations\\n    IInterestCalculator interestCalculator;\\n    /// @dev The Chromatic Vault contract responsible for managing liquidity and margin\\n    IChromaticVault vault;\\n    /// @dev The CLB token contract that represents LP ownership in the pool\\n    ICLBToken clbToken;\\n    /// @dev The address of market contract\\n    address market;\\n    /// @dev The address of the settlement token used in the market\\n    address settlementToken;\\n    /// @dev The precision of the settlement token used in the market\\n    uint256 tokenPrecision;\\n    /// @dev Cached instance of the current oracle version\\n    IOracleProvider.OracleVersion _currentVersionCache;\\n}\\n\\nusing LpContextLib for LpContext global;\\n\\n/**\\n * @title LpContextLib\\n * @notice Provides functions that operate on the `LpContext` struct\\n */\\nlibrary LpContextLib {\\n    /**\\n     * @notice Syncs the oracle version used by the market.\\n     * @param self The memory instance of `LpContext` struct\\n     */\\n    function syncOracleVersion(LpContext memory self) internal {\\n        self._currentVersionCache = self.oracleProvider.sync();\\n    }\\n\\n    /**\\n     * @notice Retrieves the current oracle version used by the market\\n     * @dev If the `_currentVersionCache` has been initialized, then returns it.\\n     *      If not, it calls the `currentVersion` function on the `oracleProvider of the market\\n     *      to fetch the current version and stores it in the cache,\\n     *      and then returns the current version.\\n     * @param self The memory instance of `LpContext` struct\\n     * @return OracleVersion The current oracle version\\n     */\\n    function currentOracleVersion(\\n        LpContext memory self\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._currentVersionCache.version == 0) {\\n            self._currentVersionCache = self.oracleProvider.currentVersion();\\n        }\\n\\n        return self._currentVersionCache;\\n    }\\n\\n    /**\\n     * @notice Retrieves the oracle version at a specific version number\\n     * @dev If the `_currentVersionCache` matches the requested version, then returns it.\\n     *      Otherwise, it calls the `atVersion` function on the `oracleProvider` of the market\\n     *      to fetch the desired version.\\n     * @param self The memory instance of `LpContext` struct\\n     * @param version The requested version number\\n     * @return OracleVersion The oracle version at the requested version number\\n     */\\n    function oracleVersionAt(\\n        LpContext memory self,\\n        uint256 version\\n    ) internal view returns (IOracleProvider.OracleVersion memory) {\\n        if (self._currentVersionCache.version == version) {\\n            return self._currentVersionCache;\\n        }\\n        return self.oracleProvider.atVersion(version);\\n    }\\n\\n    /**\\n     * @notice Calculates the interest accrued for a given amount of settlement tokens\\n               within a specified time range.\\n     * @dev This function internally calls the `calculateInterest` function on the `interestCalculator` contract.\\n     * @param self The memory instance of the `LpContext` struct.\\n     * @param amount The amount of settlement tokens for which the interest needs to be calculated.\\n     * @param from The starting timestamp of the time range (inclusive).\\n     * @param to The ending timestamp of the time range (exclusive).\\n     * @return The accrued interest as a `uint256` value.\\n     */\\n    function calculateInterest(\\n        LpContext memory self,\\n        uint256 amount,\\n        uint256 from,\\n        uint256 to\\n    ) internal view returns (uint256) {\\n        return\\n            amount == 0 || from >= to\\n                ? 0\\n                : self.interestCalculator.calculateInterest(self.settlementToken, amount, from, to);\\n    }\\n\\n    /**\\n     * @notice Checks if an oracle version is in the past.\\n     * @param self The memory instance of the `LpContext` struct.\\n     * @param oracleVersion The oracle version to check.\\n     * @return A boolean value indicating whether the oracle version is in the past.\\n     */\\n    function isPastVersion(\\n        LpContext memory self,\\n        uint256 oracleVersion\\n    ) internal view returns (bool) {\\n        return oracleVersion > 0 && oracleVersion < self.currentOracleVersion().version;\\n    }\\n}\\n\",\"keccak256\":\"0x2342212ce79b091822db33da7689d2ddf739fe3b6102b230c8612b373abe0045\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/LpReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {CLBTokenLib} from \\\"@chromatic-protocol/contracts/core/libraries/CLBTokenLib.sol\\\";\\n\\n/**\\n * @dev The LpAction enum represents the types of LP actions that can be performed.\\n */\\nenum LpAction {\\n    ADD_LIQUIDITY,\\n    REMOVE_LIQUIDITY\\n}\\n\\n/**\\n * @title LpReceipt\\n * @notice The LpReceipt struct represents a receipt of an LP action performed.\\n */\\nstruct LpReceipt {\\n    /// @dev An identifier for the receipt\\n    uint256 id;\\n    /// @dev The oracle version associated with the action\\n    uint256 oracleVersion;\\n    /// @dev The amount involved in the action,\\n    ///      when the action is `ADD_LIQUIDITY`, this value represents the amount of settlement tokens\\n    ///      when the action is `REMOVE_LIQUIDITY`, this value represents the amount of CLB tokens\\n    uint256 amount;\\n    /// @dev The address of the recipient of the action\\n    address recipient;\\n    /// @dev An enumeration representing the type of LP action performed (ADD_LIQUIDITY or REMOVE_LIQUIDITY)\\n    LpAction action;\\n    /// @dev The trading fee rate associated with the LP action\\n    int16 tradingFeeRate;\\n}\\n\\nusing LpReceiptLib for LpReceipt global;\\n\\n/**\\n * @title LpReceiptLib\\n * @notice Provides functions that operate on the `LpReceipt` struct\\n */\\nlibrary LpReceiptLib {\\n    /**\\n     * @notice Computes the ID of the CLBToken contract based on the trading fee rate.\\n     * @param self The LpReceipt struct.\\n     * @return The ID of the CLBToken contract.\\n     */\\n    function clbTokenId(LpReceipt memory self) internal pure returns (uint256) {\\n        return CLBTokenLib.encodeId(self.tradingFeeRate);\\n    }\\n}\\n\",\"keccak256\":\"0x6273940c66b4be24987066a01490934163fda0f25b1b6bc4631472207a09e5e6\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {UFixed18} from \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {PositionUtil, QTY_LEVERAGE_PRECISION} from \\\"@chromatic-protocol/contracts/core/libraries/PositionUtil.sol\\\";\\nimport {LpContext} from \\\"@chromatic-protocol/contracts/core/libraries/LpContext.sol\\\";\\nimport {BinMargin} from \\\"@chromatic-protocol/contracts/core/libraries/BinMargin.sol\\\";\\n\\n/**\\n * @title Position\\n * @dev The Position struct represents a trading position.\\n */\\nstruct Position {\\n    /// @dev The position identifier\\n    uint256 id;\\n    /// @dev The version of the oracle when the position was opened\\n    uint256 openVersion;\\n    /// @dev The version of the oracle when the position was closed\\n    uint256 closeVersion;\\n    /// @dev The quantity of the position\\n    int224 qty;\\n    /// @dev The leverage applied to the position\\n    uint32 leverage;\\n    /// @dev The timestamp when the position was opened\\n    uint256 openTimestamp;\\n    /// @dev The timestamp when the position was closed\\n    uint256 closeTimestamp;\\n    /// @dev The amount of collateral that a trader must provide\\n    uint256 takerMargin;\\n    /// @dev The owner of the position, usually it is the account address of trader\\n    address owner;\\n    /// @dev The bin margins for the position, it represents the amount of collateral for each bin\\n    BinMargin[] _binMargins;\\n    /// @dev The protocol fee for the market\\n    uint8 _feeProtocol;\\n}\\n\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Provides functions that operate on the `Position` struct\\n */\\nlibrary PositionLib {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n\\n    /**\\n     * @notice Calculates the settle version for the position's entry\\n     * @param self The memory instance of the `Position` struct\\n     * @return utin256 The settle version for the position's entry\\n     */\\n    function entryVersion(Position memory self) internal pure returns (uint256) {\\n        return PositionUtil.settleVersion(self.openVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the settle version for the position's exit\\n     * @param self The memory instance of the `Position` struct\\n     * @return utin256 The settle version for the position's exit\\n     */\\n    function exitVersion(Position memory self) internal pure returns (uint256) {\\n        return PositionUtil.settleVersion(self.closeVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the leveraged quantity of the position\\n     *         based on the position's quantity and leverage\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return uint256 The leveraged quantity\\n     */\\n    function leveragedQty(\\n        Position memory self,\\n        LpContext memory ctx\\n    ) internal pure returns (int256) {\\n        int256 qty = self.qty;\\n        int256 leveraged = qty\\n            .abs()\\n            .mulDiv(self.leverage * ctx.tokenPrecision, QTY_LEVERAGE_PRECISION)\\n            .toInt256();\\n        return qty < 0 ? -leveraged : leveraged;\\n    }\\n\\n    /**\\n     * @notice Calculates the entry price of the position based on the position's open oracle version\\n     * @dev It fetches oracle price from `IOracleProvider`\\n     *      at the settle version calculated based on the position's open oracle version\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return UFixed18 The entry price\\n     */\\n    function entryPrice(\\n        Position memory self,\\n        LpContext memory ctx\\n    ) internal view returns (UFixed18) {\\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.openVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the exit price of the position based on the position's close oracle version\\n     * @dev It fetches oracle price from `IOracleProvider`\\n     *      at the settle version calculated based on the position's close oracle version\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return UFixed18 The exit price\\n     */\\n    function exitPrice(\\n        Position memory self,\\n        LpContext memory ctx\\n    ) internal view returns (UFixed18) {\\n        return PositionUtil.settlePrice(ctx.oracleProvider, self.closeVersion);\\n    }\\n\\n    /**\\n     * @notice Calculates the profit or loss of the position\\n     *         based on the close oracle version and the leveraged quantity\\n     * @param self The memory instance of the `Position` struct\\n     * @param ctx The context object for this transaction\\n     * @return int256 The profit or loss\\n     */\\n    function pnl(Position memory self, LpContext memory ctx) internal view returns (int256) {\\n        return\\n            self.closeVersion > self.openVersion\\n                ? PositionUtil.pnl(\\n                    self.leveragedQty(ctx),\\n                    self.entryPrice(ctx),\\n                    self.exitPrice(ctx)\\n                )\\n                : int256(0);\\n    }\\n\\n    /**\\n     * @notice Calculates the total margin required for the makers of the position\\n     * @dev The maker margin is calculated by summing up the amounts of all bin margins\\n     *      in the `_binMargins` array\\n     * @param self The memory instance of the `Position` struct\\n     * @return margin The maker margin\\n     */\\n    function makerMargin(Position memory self) internal pure returns (uint256 margin) {\\n        for (uint256 i = 0; i < self._binMargins.length; i++) {\\n            margin += self._binMargins[i].amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total trading fee for the position\\n     * @dev The trading fee is calculated by summing up the trading fees of all bin margins\\n     *      in the `_binMargins` array\\n     * @param self The memory instance of the `Position` struct\\n     * @return fee The trading fee\\n     */\\n    function tradingFee(Position memory self) internal pure returns (uint256 fee) {\\n        for (uint256 i = 0; i < self._binMargins.length; i++) {\\n            fee += self._binMargins[i].tradingFee(self._feeProtocol);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total protocol fee for a position.\\n     * @param self The Position struct representing the position.\\n     * @return fee The total protocol fee amount.\\n     */\\n    function protocolFee(Position memory self) internal pure returns (uint256 fee) {\\n        for (uint256 i = 0; i < self._binMargins.length; i++) {\\n            fee += self._binMargins[i].protocolFee(self._feeProtocol);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns an array of BinMargin instances\\n     *         representing the bin margins for the position\\n     * @param self The memory instance of the `Position` struct\\n     * @return margins The bin margins for the position\\n     */\\n    function binMargins(Position memory self) internal pure returns (BinMargin[] memory margins) {\\n        margins = self._binMargins;\\n    }\\n\\n    /**\\n     * @notice Sets the `_binMargins` array for the position\\n     * @param self The memory instance of the `Position` struct\\n     * @param margins The bin margins for the position\\n     */\\n    function setBinMargins(Position memory self, BinMargin[] memory margins) internal pure {\\n        self._binMargins = margins;\\n    }\\n\\n    /**\\n     * @notice Stores the memory values of the `Position` struct to the storage\\n     * @param self The memory instance of the `Position` struct\\n     * @param storedPosition The target storage\\n     */\\n    function storeTo(Position memory self, Position storage storedPosition) internal {\\n        storedPosition.id = self.id;\\n        storedPosition.openVersion = self.openVersion;\\n        storedPosition.closeVersion = self.closeVersion;\\n        storedPosition.qty = self.qty;\\n        storedPosition.openTimestamp = self.openTimestamp;\\n        storedPosition.closeTimestamp = self.closeTimestamp;\\n        storedPosition.leverage = self.leverage;\\n        storedPosition.takerMargin = self.takerMargin;\\n        storedPosition.owner = self.owner;\\n        storedPosition._feeProtocol = self._feeProtocol;\\n        // can not convert memory array to storage array\\n        delete storedPosition._binMargins;\\n        for (uint i = 0; i < self._binMargins.length; i++) {\\n            BinMargin memory binMargin = self._binMargins[i];\\n            if (binMargin.amount > 0) {\\n                storedPosition._binMargins.push(self._binMargins[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa3174f8d3ebc073754b57a20d4c77f10f1eacca1617c2134396fc6fc0d4b7680\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/PositionUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {Fixed18} from \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport {UFixed18, UFixed18Lib} from \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport {IOracleProvider} from \\\"@chromatic-protocol/contracts/oracle/interfaces/IOracleProvider.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\nuint256 constant QTY_DECIMALS = 4;\\nuint256 constant LEVERAGE_DECIMALS = 2;\\nuint256 constant QTY_PRECISION = 10 ** QTY_DECIMALS;\\nuint256 constant LEVERAGE_PRECISION = 10 ** LEVERAGE_DECIMALS;\\nuint256 constant QTY_LEVERAGE_PRECISION = QTY_PRECISION * LEVERAGE_PRECISION;\\n\\n/**\\n * @title PositionUtil\\n * @notice Provides utility functions for managing positions\\n */\\nlibrary PositionUtil {\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n\\n    /**\\n     * @notice Returns next oracle version to settle\\n     * @dev It adds 1 to the `oracleVersion`\\n     *      and ensures that the `oracleVersion` is greater than 0 using a require statement.\\n     *      If the `oracleVersion` is not valid,\\n     *      it will trigger an error with the message `INVALID_ORACLE_VERSION`.\\n     * @param oracleVersion Input oracle version\\n     * @return uint256 Next oracle version to settle\\n     */\\n    function settleVersion(uint256 oracleVersion) internal pure returns (uint256) {\\n        require(oracleVersion > 0, Errors.INVALID_ORACLE_VERSION);\\n        return oracleVersion + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\\n     * @dev It calls another overloaded `settlePrice` function\\n     *      with an additional `OracleVersion` parameter,\\n     *      passing the `currentVersion` obtained from the `provider`\\n     * @param provider The oracle provider\\n     * @param oracleVersion The oracle version of position\\n     * @return UFixed18 The calculated price to settle\\n     */\\n    function settlePrice(\\n        IOracleProvider provider,\\n        uint256 oracleVersion\\n    ) internal view returns (UFixed18) {\\n        return settlePrice(provider, oracleVersion, provider.currentVersion());\\n    }\\n\\n    /**\\n     * @notice Calculates the price of the position based on the `oracleVersion` to settle\\n     * @dev It calculates the price by considering the `settleVersion`\\n     *      and the `currentVersion` obtained from the `IOracleProvider`.\\n     *      It ensures that the settle version is not greater than the current version;\\n     *      otherwise, it triggers an error with the message `UNSETTLED_POSITION`.\\n     *      It retrieves the corresponding `OracleVersion` using `atVersion` from the `IOracleProvider`,\\n     *      and then calls `oraclePrice` to obtain the price.\\n     * @param provider The oracle provider\\n     * @param oracleVersion The oracle version of position\\n     * @param currentVersion The current oracle version\\n     * @return UFixed18 The calculated entry price to settle\\n     */\\n    function settlePrice(\\n        IOracleProvider provider,\\n        uint256 oracleVersion,\\n        IOracleProvider.OracleVersion memory currentVersion\\n    ) internal view returns (UFixed18) {\\n        uint256 _settleVersion = settleVersion(oracleVersion);\\n        require(_settleVersion <= currentVersion.version, Errors.UNSETTLED_POSITION);\\n\\n        IOracleProvider.OracleVersion memory _oracleVersion = _settleVersion ==\\n            currentVersion.version\\n            ? currentVersion\\n            : provider.atVersion(_settleVersion);\\n        return oraclePrice(_oracleVersion);\\n    }\\n\\n    /**\\n     * @notice Extracts the price value from an `OracleVersion` struct\\n     * @dev If the price is less than 0, it returns 0\\n     * @param oracleVersion The memory instance of `OracleVersion` struct\\n     * @return UFixed18 The price value of `oracleVersion`\\n     */\\n    function oraclePrice(\\n        IOracleProvider.OracleVersion memory oracleVersion\\n    ) internal pure returns (UFixed18) {\\n        return\\n            oracleVersion.price.sign() < 0\\n                ? UFixed18Lib.ZERO\\n                : UFixed18Lib.from(oracleVersion.price);\\n    }\\n\\n    /**\\n     * @notice Calculates the profit or loss (PnL) for a position\\n     *         based on the leveraged quantity, entry price, and exit price\\n     * @dev It first calculates the price difference (`delta`) between the exit price and the entry price.\\n     *      If the leveraged quantity is negative, indicating short position,\\n     *      it adjusts the `delta` to reflect a negative change.\\n     *      The function then calculates the absolute PnL\\n     *      by multiplying the absolute value of the leveraged quantity\\n     *      with the absolute value of the `delta`, divided by the entry price.\\n     *      Finally, if `delta` is negative, indicating a loss,\\n     *      the absolute PnL is negated to represent a negative value.\\n     * @param leveragedQty The leveraged quantity of the position\\n     * @param _entryPrice The entry price of the position\\n     * @param _exitPrice The exit price of the position\\n     * @return int256 The profit or loss\\n     */\\n    function pnl(\\n        int256 leveragedQty, // as token precision\\n        UFixed18 _entryPrice,\\n        UFixed18 _exitPrice\\n    ) internal pure returns (int256) {\\n        int256 delta = _exitPrice.gt(_entryPrice)\\n            ? UFixed18.unwrap(_exitPrice.sub(_entryPrice)).toInt256()\\n            : -UFixed18.unwrap(_entryPrice.sub(_exitPrice)).toInt256();\\n        if (leveragedQty < 0) delta *= -1;\\n\\n        int256 absPnl = leveragedQty\\n            .abs()\\n            .mulDiv(delta.abs(), UFixed18.unwrap(_entryPrice))\\n            .toInt256();\\n\\n        return delta < 0 ? -absPnl : absPnl;\\n    }\\n\\n    /**\\n     * @notice Verifies the validity of a position quantity added to the bin\\n     * @dev It ensures that the sign of the current quantity of the bin's position\\n     *      and the added quantity are same or zero.\\n     *      If the condition is not met, it triggers an error with the message `INVALID_POSITION_QTY`.\\n     * @param currentQty The current quantity of the bin's pending position\\n     * @param addedQty The position quantity added\\n     */\\n    function checkAddPositionQty(int256 currentQty, int256 addedQty) internal pure {\\n        require(\\n            !((currentQty > 0 && addedQty <= 0) || (currentQty < 0 && addedQty >= 0)),\\n            Errors.INVALID_POSITION_QTY\\n        );\\n    }\\n\\n    /**\\n     * @notice Verifies the validity of a position quantity removed from the bin\\n     * @dev It ensures that the sign of the current quantity of the bin's position\\n     *      and the removed quantity are same or zero,\\n     *      and the absolute removed quantity is not greater than the absolute current quantity.\\n     *      If the condition is not met, it triggers an error with the message `INVALID_POSITION_QTY`.\\n     * @param currentQty The current quantity of the bin's position\\n     * @param removeQty The position quantity removed\\n     */\\n    function checkRemovePositionQty(int256 currentQty, int256 removeQty) internal pure {\\n        require(\\n            !((currentQty == 0) ||\\n                (removeQty == 0) ||\\n                (currentQty > 0 && removeQty > currentQty) ||\\n                (currentQty < 0 && removeQty < currentQty)),\\n            Errors.INVALID_POSITION_QTY\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the transaction amount based on the leveraged quantity and price\\n     * @param leveragedQty The leveraged quantity of the position\\n     * @param price The price of the position\\n     * @return uint256 The transaction amount\\n     */\\n    function transactionAmount(\\n        int256 leveragedQty,\\n        UFixed18 price\\n    ) internal pure returns (uint256) {\\n        return leveragedQty.abs().mulDiv(UFixed18.unwrap(price), UFixed18.unwrap(UFixed18Lib.ONE));\\n    }\\n}\\n\",\"keccak256\":\"0xf2578ba5a0b9d9f18ae79e6e28c03aa4a4500a717a8a5539b56999e4bb080530\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\n\\ninterface IOracleProvider {\\n    /// @dev Error for invalid oracle round\\n    error InvalidOracleRound();\\n\\n    /// @dev A singular oracle version with its corresponding data\\n    struct OracleVersion {\\n        /// @dev The iterative version\\n        uint256 version;\\n        /// @dev the timestamp of the oracle update\\n        uint256 timestamp;\\n        /// @dev The oracle price of the corresponding version\\n        Fixed18 price;\\n    }\\n\\n    /**\\n     * @notice Checks for a new price and updates the internal phase annotation state accordingly\\n     * @dev `sync` is expected to be called soon after a phase update occurs in the underlying proxy.\\n     *      Phase updates should be detected using off-chain mechanism and should trigger a `sync` call\\n     *      This is feasible in the short term due to how infrequent phase updates are, but phase update\\n     *      and roundCount detection should eventually be implemented at the contract level.\\n     *      Reverts if there is more than 1 phase to update in a single sync because we currently cannot\\n     *      determine the startingRoundId for the intermediary phase.\\n     * @return The current oracle version after sync\\n     */\\n    function sync() external returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @return oracleVersion Current oracle version\\n     */\\n    function currentVersion() external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Returns the current oracle version\\n     * @param version The version of which to lookup\\n     * @return oracleVersion Oracle version at version `version`\\n     */\\n    function atVersion(uint256 version) external view returns (OracleVersion memory);\\n\\n    /**\\n     * @notice Retrieves the description of the Oracle Provider.\\n     * @return A string representing the description of the Oracle Provider.\\n     */\\n    function description() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf2e30383ce5fd655ef41c85262416fa82eb12dcdff9a72580316e78d5bee86d5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806386e21b9d1461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004610156565b610076565b6040516001600160a01b03909116815260200160405180910390f35b6040805180820182526001600160a01b03848116808352908416602092830181905286546001600160a01b031990811683178855600188018054909116821790558351808401929092528184015282518082038401815260609091019283905280519101206000916100e79061012d565b8190604051809103906000f5905080158015610107573d6000803e3d6000fd5b5084546001600160a01b0319908116865560019095018054909516909455509192915050565b615b428061019383390190565b80356001600160a01b038116811461015157600080fd5b919050565b60008060006060848603121561016b57600080fd5b8335925061017b6020850161013a565b91506101896040850161013a565b9050925092509256fe6101606040523480156200001257600080fd5b506001600090815533608081905260408051630890357360e41b81528151849392638903573092600480820193918290030181865afa1580156200005a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200008091906200032a565b6001600160a01b0380831660a052811660c05260408051631dd70c0360e21b8152905192945090925073__$d8ad837c5fad6e23d273c337957d503f23$__9163775c300c916004808201926020929091908290030181865af4158015620000eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000111919062000362565b6001600160a01b031660e0816001600160a01b0316815250506080516001600160a01b0316634046ebae6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200016b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000191919062000362565b6001600160a01b0316610100816001600160a01b0316815250506080516001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000212919062000362565b6001600160a01b0316610120816001600160a01b0316815250506080516001600160a01b0316635b5b52c06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200026d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000293919062000362565b6001600160a01b03166101405260405163aa1ea48d60e01b81526001600482015273__$bf32212455cf2c36e47e27f89c9f395cfb$__9063aa1ea48d9060240160006040518083038186803b158015620002ec57600080fd5b505af415801562000301573d6000803e3d6000fd5b50505050505062000387565b80516001600160a01b03811681146200032557600080fd5b919050565b600080604083850312156200033e57600080fd5b62000349836200030d565b915062000359602084016200030d565b90509250929050565b6000602082840312156200037557600080fd5b62000380826200030d565b9392505050565b60805160a05160c05160e05161010051610120516101405161562c62000516600039600061030801526000818161057f015281816107cb0152818161099e01528181610e6e015281816119b601528181611a8e01528181611b0101528181611bf30152818161291b01528181612cf0015281816132000152818161364e01528181613745015281816137ba01526139130152600081816102c101528181610d8a01528181610f15015281816114840152818161155c015281816125810152818161273201528181612857015281816129ce01526132fd0152600081816101ee015281816107030152818161103c015281816110c30152818161114b0152818161180a0152612d1f015260008181610397015281816119e101528181611a6c01528181611b30015281816122a101528181612d5d01528181612d8c015281816136790152818161372301526137e2015260008181610255015281816123730152612c9201526000818161048b01528181611ddb015281816122cc0152818161239e0152612cc1015261562c6000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c8063abfefb901161010f578063c99ca8f2116100a2578063e691975f11610071578063e691975f14610527578063f23a6e611461053a578063faf07bf31461055a578063fbfa77cf1461057a57600080fd5b8063c99ca8f2146104c0578063d22c7a45146104e0578063d59e2d23146104f3578063de7c8cc21461051457600080fd5b8063b86f6aef116100de578063b86f6aef14610438578063bc197c811461044b578063c45a015514610486578063c4f865b2146104ad57600080fd5b8063abfefb90146103ec578063b21837e0146103ff578063b613a14114610412578063b79711e11461042557600080fd5b80634046ebae1161018757806379bd1eac1161015657806379bd1eac1461037f5780637b9e618d146103925780638c4bdb3f146103b9578063a126d601146103d957600080fd5b80634046ebae146102bc5780634c723c28146102e35780635b5b52c0146103035780635cefa9fb1461032a57600080fd5b806311753f76116101c357806311753f761461027757806311da60b41461028c57806328b5bd1e1461029457806338085c3d146102a757600080fd5b806264041d146101e957806301ffc9a71461022d5780630aa7d2f914610250575b600080fd5b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61024061023b36600461437d565b6105a1565b6040519015158152602001610224565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b61028a6102853660046143ef565b6105d8565b005b61028a610911565b61028a6102a236600461443a565b610993565b6102af610a51565b604051610224919061445c565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6102f66102f136600461450a565b610ade565b6040516102249190614655565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b61033d6103383660046146c6565b610c9f565b6040516102249190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b61028a61038d366004614707565b610d5d565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6103cc6103c736600461473f565b610fd0565b60405161022491906147b9565b61028a6103e7366004614826565b611360565b61028a6103fa3660046143ef565b6116e9565b6103cc61040d36600461473f565b61198f565b61028a61042036600461484e565b611dd9565b6103cc610433366004614826565b611f2b565b610240610446366004614826565b611ff3565b61046d61045936600461486b565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b03199091168152602001610224565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6102406104bb366004614826565b612126565b6104d36104ce366004614929565b612256565b60405161022491906149bd565b61028a6104ee3660046149d0565b612645565b6105066105013660046149f8565b6127a8565b604051908152602001610224565b61028a610522366004614707565b61282a565b6105066105353660046149f8565b612a3f565b61046d610548366004614a15565b63f23a6e6160e01b9695505050505050565b61056d610568366004614b43565b612a84565b6040516102249190614bd6565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982166301ffc9a760e01b14806105d257506001600160e01b03198216630271189760e51b145b92915050565b6105e0612bac565b60006105eb84611f2b565b9050600181608001516001811115610605576106056147a3565b14610623576040516335c67ed160e01b815260040160405180910390fd5b600061062d612c05565b905061063881612e25565b6020820151610648908290612e95565b61066557604051633324c5c360e21b815260040160405180910390fd5b606082015160408084015160a085015160208601519251631a22c0ed60e31b81529192600092839273__$bf32212455cf2c36e47e27f89c9f395cfb$__9263d1160768926106bd926001928b928a9190600401614c95565b6040805180830381865af41580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd9190614ccc565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f242432a308661073b8a612eb4565b6107458689614d06565b604051806020016040528060008152506040518663ffffffff1660e01b8152600401610775959493929190614d5f565b600060405180830381600087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b5050604051630d1b028160e41b81526001600160a01b038781166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016925063d1b028109150604401600060405180830381600087803b15801561081157600080fd5b505af1158015610825573d6000803e3d6000fd5b50508751604051637c0bdb1360e11b815233935063f817b626925061085191908c908c90600401614dc2565b600060405180830381600087803b15801561086b57600080fd5b505af115801561087f573d6000803e3d6000fd5b50505060008a815260046020526040808220828155600181018390556002810192909255600390910180546001600160b81b03191690555182915083906001600160a01b038716907f289af695afe1fd4ac35f17b2947f962bca01483f3795da48d1940b28fa9c036e906108f4908b906147b9565b60405180910390a450505050505061090c6001600055565b505050565b600061091b612c05565b905061092681612e25565b604051635206f44160e01b815273__$bf32212455cf2c36e47e27f89c9f395cfb$__90635206f44190610960906001908590600401614ddc565b60006040518083038186803b15801561097857600080fd5b505af415801561098c573d6000803e3d6000fd5b5050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109dc57604051636c7e0fa560e01b815260040160405180910390fd5b60405163183f59c160e01b815260016004820152602481018390526044810182905273__$bf32212455cf2c36e47e27f89c9f395cfb$__9063183f59c19060640160006040518083038186803b158015610a3557600080fd5b505af4158015610a49573d6000803e3d6000fd5b505050505050565b606073__$bf32212455cf2c36e47e27f89c9f395cfb$__63723d4be96001610a77612c05565b6040518363ffffffff1660e01b8152600401610a94929190614ddc565b600060405180830381865af4158015610ab1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ad99190810190614df1565b905090565b6060816001600160401b03811115610af857610af8614a90565b604051908082528060200260200182016040528015610b3157816020015b610b1e614279565b815260200190600190039081610b165790505b50905060005b82811015610c985760036000858584818110610b5557610b55614eb9565b602090810292909201358352508181019290925260409081016000908120825161016081018452815481526001820154818601526002820154818501526003820154601b81900b6060830152600160e01b900463ffffffff166080820152600482015460a0820152600582015460c0820152600682015460e082015260078201546001600160a01b031661010082015260088201805485518188028101880190965280865291959294610120870194909391929184015b82821015610c4f5760008481526020908190206040805180820190915260028502909101805461ffff168252600190810154828401529083529092019101610c0c565b505050908252506009919091015460ff166020909101528251839083908110610c7a57610c7a614eb9565b60200260200101819052508080610c9090614ecf565b915050610b37565b5092915050565b610cd16040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051638768ae1360e01b815260016004820181905284900b60248201526044810183905273__$bf32212455cf2c36e47e27f89c9f395cfb$__90638768ae139060640160a060405180830381865af4158015610d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d569190614ee8565b9392505050565b610d65612bac565b6040805180820190915260038152624c495160e81b6020820152336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dd15760405162461bcd60e51b8152600401610dc89190614f57565b60405180910390fd5b506000610ddd84612ec3565b90508060400151600014610e04576040516319fe759960e11b815260040160405180910390fd5b6000610e0e612c05565b9050610e1981612e25565b600080610e268385612ff2565b9150915081610e385750505050610fc6565b60e0840151604051636a5ce5d960e01b81526001600160a01b0388811660048301526024820188905260448201929092526000917f00000000000000000000000000000000000000000000000000000000000000001690636a5ce5d9906064016020604051808303816000875af1158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190614f6a565b9050610eff8486848489610100015160405180602001604052806000815250613092565b6040516325be08ed60e21b8152600481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906396f823b490602401600060405180830381600087803b158015610f6157600080fd5b505af1158015610f75573d6000803e3d6000fd5b50505050808561010001516001600160a01b03167ff564ceddd4b4bd7876b0fd057b5c8182e252ea334473a4c3480213724b7ccdca87604051610fb891906149bd565b60405180910390a350505050505b61090c6001600055565b610fd86142e8565b610fe0612bac565b6000610fea612c05565b9050610ff581612e25565b600061100682600160008a8a613407565b9050600061101382612eb4565b604051627eeac760e11b8152306004820152602481018290529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e90604401602060405180830381865afa158015611082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a69190614f6a565b60405162b501c160e71b81529091503390635a80e080906110f1907f00000000000000000000000000000000000000000000000000000000000000009086908c908c90600401614f83565b600060405180830381600087803b15801561110b57600080fd5b505af115801561111f573d6000803e3d6000fd5b5050604051627eeac760e11b815230600482015260248101859052600092508391506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e90604401602060405180830381865afa158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b59190614f6a565b6111bf9190614d06565b9050806000036111e2576040516322313ae960e01b815260040160405180910390fd5b60405163c516ecc560e01b815273__$bf32212455cf2c36e47e27f89c9f395cfb$__9063c516ecc5906112209060019089908e908790600401614fab565b60006040518083038186803b15801561123857600080fd5b505af415801561124c573d6000803e3d6000fd5b505050506040808501828152855160009081526004602090815292902086518155918601516001808401919091559051600283015560608601516003830180546001600160a01b039092166001600160a01b0319831681178255608089015189959490936001600160a81b03191690911790600160a01b9084908111156112d5576112d56147a3565b021790555060a091909101516003909101805461ffff909216600160a81b0261ffff60a81b199092169190911790556040516001600160a01b038b16907fa9ebb8c63ee39babba544773300c8c3ec3d5152a0906add984d9b1c2ec79561e9061133f9087906147b9565b60405180910390a2509193505050506113586001600055565b949350505050565b6000818152600360205260408120805490910361139057604051632b48580b60e11b815260040160405180910390fd5b60078101546001600160a01b031633146113bd576040516339218f3b60e01b815260040160405180910390fd5b6002810154156113e0576040516319fe759960e11b815260040160405180910390fd5b60006113ea612c05565b90506113f581613481565b5160028301554260058301556040516313d6e96f60e31b815273__$bf32212455cf2c36e47e27f89c9f395cfb$__90639eb74b789061143d906001908590879060040161501c565b60006040518083038186803b15801561145557600080fd5b505af4158015611469573d6000803e3d6000fd5b505083546040516325be08ed60e21b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506396f823b49150602401600060405180830381600087803b1580156114d257600080fd5b505af11580156114e6573d6000803e3d6000fd5b50505060078301546040516001600160a01b0390911691507faf5a1d42ca5691622833f61731633c4d65ca08e6f8bc151d5f7f2f92213ee0329061152b9085906150e3565b60405180910390a28160010154826002015411156115c55781546040516301b9fd3b60e51b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063373fa76090602401600060405180830381600087803b1580156115a857600080fd5b505af11580156115bc573d6000803e3d6000fd5b50505050505050565b60408051610160810182528354815260018401546020808301919091526002850154828401526003850154601b81900b6060840152600160e01b900463ffffffff166080830152600485015460a0830152600585015460c0830152600685015460e083015260078501546001600160a01b031661010083015260088501805484518184028101840190955280855261090c948694938893610120860193909160009084015b828210156116ad5760008481526020908190206040805180820190915260028502909101805461ffff16825260019081015482840152908352909201910161166a565b505050908252506009919091015460ff16602091820152600786015460408051928301905260008083529182916001600160a01b031690613092565b6116f1612bac565b60006116fc84611f2b565b9050600081608001516001811115611716576117166147a3565b14611734576040516335c67ed160e01b815260040160405180910390fd5b600061173e612c05565b905061174981612e25565b6020820151611759908290612e95565b61177657604051631aa96cd160e31b815260040160405180910390fd5b60a08201516040808401516020850151915163017c358360e31b815260009373__$bf32212455cf2c36e47e27f89c9f395cfb$__93630be1ac18936117c5936001938993909291600401614c95565b602060405180830381865af41580156117e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118069190614f6a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f242432a30856060015161184687612eb4565b604080516020810182526000815290516001600160e01b031960e087901b168152611878949392918891600401614d5f565b600060405180830381600087803b15801561189257600080fd5b505af11580156118a6573d6000803e3d6000fd5b50508451604051633b23ff6760e01b8152339350633b23ff6792506118d2919089908990600401614dc2565b600060405180830381600087803b1580156118ec57600080fd5b505af1158015611900573d6000803e3d6000fd5b505050600087815260046020526040808220828155600181018390556002810192909255600390910180546001600160b81b0319169055606085015190518392506001600160a01b03909116907f41e1589cf9f660d48c65917f1f4f45d024f362319e6d8c8b450deacc356942989061197a9087906147b9565b60405180910390a350505061090c6001600055565b6119976142e8565b61199f612bac565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015611a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4e9190614f6a565b60405163970d1d6f60e01b8152909150339063970d1d6f90611aba907f0000000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000009089908990600401615187565b600060405180830381600087803b158015611ad457600080fd5b505af1158015611ae8573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600093508492507f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b9190614f6a565b611ba59190614d06565b90506103e88111611bc9576040516322313ae960e01b815260040160405180910390fd5b6000611bd3612c05565b9050611bde81612e25565b6040516249290f60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906249290f90602401600060405180830381600087803b158015611c3e57600080fd5b505af1158015611c52573d6000803e3d6000fd5b5050604051633768e42960e01b815273__$bf32212455cf2c36e47e27f89c9f395cfb$__9250633768e4299150611c949060019085908c908890600401614fab565b60006040518083038186803b158015611cac57600080fd5b505af4158015611cc0573d6000803e3d6000fd5b505050506000611cd4826000858c8c613407565b8051600090815260046020908152604091829020835181559083015160018083019190915591830151600282015560608301516003820180546001600160a01b039092166001600160a01b031983168117825560808601519596508695939491926001600160a81b0319161790600160a01b908490811115611d5857611d586147a3565b021790555060a091909101516003909101805461ffff909216600160a81b0261ffff60a81b199092169190911790556040516001600160a01b038a16907f3a2bfd34261bac973992f563094226558ab389a8508fa5c9949c5d14e50d081e90611dc29084906147b9565b60405180910390a293505050506113586001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634162169f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5b91906151b4565b6001600160a01b0316336001600160a01b0316146040518060400160405280600381526020016244414f60e81b81525090611ea95760405162461bcd60e51b8152600401610dc89190614f57565b5060ff81161580611ecd575060048160ff1610158015611ecd5750600a8160ff1611155b611ed657600080fd5b6005805460ff83811660ff1983168117909355604080519190921680825260208201939093527f7a8f5b6a3fe6312faf94330e829a331301dbd2ce6947e915be63bf67b473ed5f910160405180910390a15050565b611f336142e8565b600082815260046020908152604091829020825160c081018452815481526001808301549382019390935260028201549381019390935260038101546001600160a01b038116606085015290916080840191600160a01b900460ff1690811115611f9f57611f9f6147a3565b6001811115611fb057611fb06147a3565b815260039190910154600160a81b900460010b6020909101528051909150600003611fee57604051630188f66960e71b815260040160405180910390fd5b919050565b60008181526003602081815260408084208151610160810183528154815260018201548185015260028201548184015293810154601b81900b6060860152600160e01b900463ffffffff166080850152600481015460a0850152600581015460c0850152600681015460e085015260078101546001600160a01b0316610100850152600881018054835181860281018601909452808452869594929361012086019390929190879084015b828210156120e15760008481526020908190206040805180820190915260028502909101805461ffff16825260019081015482840152908352909201910161209e565b505050908252506009919091015460ff16602090910152805190915060000361210d5750600092915050565b61211e612118612c05565b82612ff2565b509392505050565b60008181526003602081815260408084208151610160810183528154815260018201548185015260028201548184015293810154601b81900b6060860152600160e01b900463ffffffff166080850152600481015460a0850152600581015460c0850152600681015460e085015260078101546001600160a01b0316610100850152600881018054835181860281018601909452808452869594929361012086019390929190879084015b828210156122145760008481526020908190206040805180820190915260028502909101805461ffff1682526001908101548284015290835290920191016121d1565b505050908252506009919091015460ff1660209091015280519091506000036122405750600092915050565b610d568160400151612250612c05565b90612e95565b61225e614279565b612266612bac565b87601b0b60000361228a57604051633a46402b60e11b815260040160405180910390fd5b6040516327633b5b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906327633b5b90602401602060405180830381865afa158015612315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123399190614f6a565b90508087101561235c5760405163c9b0568960e01b815260040160405180910390fd5b6040516313b0472f60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634ec11cbc90602401602060405180830381865afa1580156123e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240b91906151d1565b90506124196002600a6152d2565b6124256004600a6152d2565b61242f91906152de565b61243a8260016152f5565b61244590600a61530e565b60ff1661245291906152de565b8963ffffffff1611156124785760405163526366c560e11b815260040160405180910390fd5b6000612482612c05565b905061248d81612e25565b600061249b828d8d8d613526565b6060810151604051636df772cf60e01b815260016004820152601b9190910b6024820152604481018b9052606481018690529091506125409073__$bf32212455cf2c36e47e27f89c9f395cfb$__90636df772cf90608401600060405180830381865af4158015612510573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612538919081019061532a565b610120830152565b61254d82828a8a8a6135f3565b80516000908152600360205260409020612568908290613984565b80516040516311c59bed60e31b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e2cdf6890602401600060405180830381600087803b1580156125cd57600080fd5b505af11580156125e1573d6000803e3d6000fd5b505050508061010001516001600160a01b03167f27940f479e481d10f6de4cfebed495ffde86da82127bd98950b1d516c28f62238260405161262391906149bd565b60405180910390a2935050505061263a6001600055565b979650505050505050565b61264d612bac565b600061265885612ec3565b6101008101519091506001600160a01b03163314612689576040516339218f3b60e01b815260040160405180910390fd5b6000612693612c05565b905061269e81612e25565b60408201516126ae908290612e95565b6126cb576040516322b7621760e01b815260040160405180910390fd5b61271981836126da8183613ae4565b60008989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061309292505050565b815160405163139f34cf60e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063139f34cf90602401600060405180830381600087803b15801561277e57600080fd5b505af1158015612792573d6000803e3d6000fd5b5050505050506127a26001600055565b50505050565b604051632b160e3560e01b815260016004820181905282900b602482015260009073__$bf32212455cf2c36e47e27f89c9f395cfb$__90632b160e35906044015b602060405180830381865af4158015612806573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d29190614f6a565b612832612bac565b6040805180820190915260038152624c495160e81b6020820152336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146128955760405162461bcd60e51b8152600401610dc89190614f57565b5060006128a184612ec3565b905060006128ad612c05565b90506128b881612e25565b60408201516128c8908290612e95565b6128e5576040516322b7621760e01b815260040160405180910390fd5b60e0820151604051636a5ce5d960e01b81526001600160a01b0386811660048301526024820186905260448201929092526000917f00000000000000000000000000000000000000000000000000000000000000001690636a5ce5d9906064016020604051808303816000875af1158015612964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129889190614f6a565b90506129b582846129998183613ae4565b8487610100015160405180602001604052806000815250613092565b825160405163139f34cf60e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063139f34cf90602401600060405180830381600087803b158015612a1a57600080fd5b505af1158015612a2e573d6000803e3d6000fd5b5050505050505061090c6001600055565b604051632716343b60e11b815260016004820181905282900b602482015260009073__$bf32212455cf2c36e47e27f89c9f395cfb$__90634e2c6876906044016127e9565b60606000612a90612c05565b9050600083516001600160401b03811115612aad57612aad614a90565b604051908082528060200260200182016040528015612ad6578160200160208202803683370190505b50905060005b845181101561211e57600173__$bf32212455cf2c36e47e27f89c9f395cfb$__63dbcf64a39091878481518110612b1557612b15614eb9565b6020026020010151866040518463ffffffff1660e01b8152600401612b3c939291906153e5565b602060405180830381865af4158015612b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7d9190614f6a565b828281518110612b8f57612b8f614eb9565b602090810291909101015280612ba481614ecf565b915050612adc565b600260005403612bfe5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610dc8565b6002600055565b612c6060408051610100810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905284519081018552828152908101829052928301529060e082015290565b612c8460405180606001604052806000815260200160008152602001600081525090565b6040518061010001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0c91906151d1565b612e1790600a615404565b815260200191909152919050565b80600001516001600160a01b031663fff6cae96040518163ffffffff1660e01b81526004016060604051808303816000875af1158015612e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8d9190615413565b60e090910152565b60008082118015610d565750612eaa83613481565b5190911092915050565b60006105d28260a00151613b1d565b612ecb614279565b60008281526003602081815260408084208151610160810183528154815260018201548185015260028201548184015293810154601b81900b6060860152600160e01b900463ffffffff166080850152600481015460a0850152600581015460c0850152600681015460e085015260078101546001600160a01b0316610100850152600881018054835181860281018601909452808452949591946101208701949192909184015b82821015612fb65760008481526020908190206040805180820190915260028502909101805461ffff168252600190810154828401529083529092019101612f73565b505050908252506009919091015460ff166020909101528051909150600003611fee57604051632b48580b60e11b815260040160405180910390fd5b600080600061301161300385613b44565b60a086015187919042613b9e565b905061301c81613c4b565b6130496130298688613cb9565b6130338789613d38565b61304461303f8a613481565b613d4c565b613d7b565b613053919061546e565b9150600061306083613e0c565b9050600083131561307e5761307485613b44565b8110159350613089565b8460e0015181101593505b50509250929050565b600061309d86613b44565b90506000848760e001516130b19190614d06565b60a088015190915081906000906130cc908b90869042613b9e565b905060006130d982613c4b565b6130e3908a61546e565b905060006130f082613e0c565b90506000821315613129578581111561311f5761310c86613c4b565b9150613118868561548e565b935061315b565b613118818561548e565b8481111561314e5761313a85613c4b565b613143906154a1565b91506000935061315b565b6131588185614d06565b93505b600173__$bf32212455cf2c36e47e27f89c9f395cfb$__637f0ea92b90918e8e866040518563ffffffff1660e01b815260040161319b94939291906154bd565b60006040518083038186803b1580156131b357600080fd5b505af41580156131c7573d6000803e3d6000fd5b50508c516040516331ebdab960e11b815260048101919091526001600160a01b038b8116602483015260448201899052606482018890527f00000000000000000000000000000000000000000000000000000000000000001692506363d7b5729150608401600060405180830381600087803b15801561324657600080fd5b505af115801561325a573d6000803e3d6000fd5b505050506101008b01518b51604051633eabb14360e01b81526001600160a01b0390921691633eabb14391613293918b906004016154f8565b600060405180830381600087803b1580156132ad57600080fd5b505af19250505080156132be575060015b61333d573d8080156132ec576040519150601f19603f3d011682016040523d82523d6000602084013e6132f1565b606091505b50336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461333b57604051633d2fc2df60e11b815260040160405180910390fd5b505b8a516000908152600360208190526040822082815560018101839055600281018390559081018290556004810182905560058101829055600681018290556007810180546001600160a01b03191690559061339b6008830182614338565b6009820160006101000a81549060ff02191690555050828a8c61010001516001600160a01b03167fb132abbf1f38fa65fee3098033fbaa2928cbe9753942c690c3c8745ae7e0849c8e6040516133f191906149bd565b60405180910390a4505050505050505050505050565b61340f6142e8565b6040518060c0016040528060076000815461342990614ecf565b9182905550815260200161343c88613481565b518152602081018690526001600160a01b038516604082015260600186600181111561346a5761346a6147a3565b81526020018360010b815250905095945050505050565b6134a560405180606001604052806000815260200160008152602001600081525090565b60e08201515160000361351e5781600001516001600160a01b0316639d888e866040518163ffffffff1660e01b8152600401606060405180830381865afa1580156134f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135189190615413565b60e08301525b5060e0015190565b61352e614279565b60405180610160016040528060066000815461354990614ecf565b9182905550815260200161355c87613481565b51815260006020808301829052601b88900b60408085019190915263ffffffff8816606085015242608085015260a0840183905260c084018790523360e08501528051838152918201905261010090920191906135db565b60408051808201909152600080825260208201528152602001906001900390816135b45790505b50815260055460ff1660209091015295945050505050565b60006135fe85613e1f565b9050600061360b86613e85565b905084613618828461548e565b11156136375760405163444f42ff60e01b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa1580156136c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e69190614f6a565b9050600083838960e001516136fb919061548e565b613705919061548e565b6040516370cf319960e11b8152909150339063e19e633290613773907f0000000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000009086908c908c90600401615511565b600060405180830381600087803b15801561378d57600080fd5b505af11580156137a1573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f00000000000000000000000000000000000000000000000000000000000000001692506370a082319150602401602060405180830381865afa15801561382b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384f9190614f6a565b613859828461548e565b10156138785760405163f498cdd960e01b815260040160405180910390fd5b604051633950206560e01b815273__$bf32212455cf2c36e47e27f89c9f395cfb$__906339502065906138b4906001908d908d90600401615545565b60006040518083038186803b1580156138cc57600080fd5b505af41580156138e0573d6000803e3d6000fd5b5050895160e08b0151604051635464187560e01b81526004810192909252602482015260448101879052606481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063546418759150608401600060405180830381600087803b15801561396157600080fd5b505af1158015613975573d6000803e3d6000fd5b50505050505050505050505050565b815181556020820151600182015560408201516002820155606082015160a0830151600483015560c08301516005830155608083015163ffffffff16600160e01b026001600160e01b0390911617600382015560e082015160068201556101008201516007820180546001600160a01b039092166001600160a01b031990921691909117905561014082015160098201805460ff90921660ff19909216919091179055613a35600882016000614338565b60005b8261012001515181101561090c5760008361012001518281518110613a5f57613a5f614eb9565b60200260200101519050600081602001511115613ad157826008018461012001518381518110613a9157613a91614eb9565b6020908102919091018101518254600180820185556000948552938390208251600290920201805461ffff191661ffff9092169190911781559101519101555b5080613adc81614ecf565b915050613a38565b60008260200151836040015111613afc576000610d56565b610d56613b098484613cb9565b613b138585613d38565b6130448686613eeb565b6000600182900b8112610d5681613b3c57613b378461556d565b613b3e565b835b82613eff565b6000805b82610120015151811015613b98578261012001518181518110613b6d57613b6d614eb9565b60200260200101516020015182613b84919061548e565b915080613b9081614ecf565b915050613b48565b50919050565b6000831580613bad5750818310155b613c3f57602085015160a086015160405163382d8b8760e11b81526001600160a01b03918216600482015260248101879052604481018690526064810185905291169063705b170e90608401602060405180830381865afa158015613c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c3a9190614f6a565b613c42565b60005b95945050505050565b60006001600160ff1b03821115613cb55760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610dc8565b5090565b6000808360600151601b0b90506000613d1f613d1a8560c00151876080015163ffffffff16613ce891906152de565b613cf46002600a6152d2565b613d006004600a6152d2565b613d0a91906152de565b613d1386613e0c565b9190613f27565b613c4b565b905060008212613d2f5780613c42565b613c42816154a1565b6000610d5682600001518460200151613fd6565b600080613d5c8360400151614044565b12613d7357613d6e8260400151614068565b6105d2565b600092915050565b600080613d88838561408f565b613da757613d99613d1a85856140a5565b613da2906154a1565b613db4565b613db4613d1a84866140a5565b90506000851215613dce57613dcb6000198261558e565b90505b6000613de9613d1a613ddf84613e0c565b87613d138a613e0c565b905060008212613df95780613e02565b613e02816154a1565b9695505050505050565b600080821215613cb557816000036105d2565b6000805b82610120015151811015613b9857613e678361014001518461012001518381518110613e5157613e51614eb9565b60200260200101516140b190919063ffffffff16565b613e71908361548e565b915080613e7d81614ecf565b915050613e23565b6000805b82610120015151811015613b9857613ecd8361014001518461012001518381518110613eb757613eb7614eb9565b60200260200101516140e390919063ffffffff16565b613ed7908361548e565b915080613ee381614ecf565b915050613e89565b6000610d5682600001518460400151613fd6565b600081613f1e57613f196402540be40061ffff851661548e565b610d56565b505061ffff1690565b6000808060001985870985870292508281108382030391505080600003613f6157838281613f5757613f576155be565b0492505050610d56565b808411613f6d57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000610d568383856001600160a01b0316639d888e866040518163ffffffff1660e01b8152600401606060405180830381865afa15801561401b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061403f9190615413565b614107565b60008082131561405657506001919050565b6000821215613d735750600019919050565b600081818112156105d25760405163280f944f60e11b815260048101829052602401610dc8565b600061409b83836141d9565b6002149392505050565b6000610d568284614d06565b8151602083015160009182916140cd9161ffff16612710613f27565b90506140d9818461420e565b6113589082614d06565b81516020830151600091610d56916141019161ffff16612710613f27565b8361420e565b6000806141138461422e565b835160408051808201909152600381526205553560ec1b60208201529192508211156141525760405162461bcd60e51b8152600401610dc89190614f57565b50825160009082146141cc57604051637ece075d60e01b8152600481018390526001600160a01b03871690637ece075d90602401606060405180830381865afa1580156141a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141c79190615413565b6141ce565b835b9050613e0281613d4c565b60008282808211156141f0576002925050506105d2565b80821015614203576000925050506105d2565b506001949350505050565b6000808260ff1611614221576000610d56565b610d5660ff8316846155d4565b60008082116040518060400160405280600381526020016224a7ab60e91b8152509061426d5760405162461bcd60e51b8152600401610dc89190614f57565b506105d282600161548e565b6040518061016001604052806000815260200160008152602001600081526020016000601b0b8152602001600063ffffffff16815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160608152602001600060ff1681525090565b6040518060c0016040528060008152602001600081526020016000815260200160006001600160a01b031681526020016000600181111561432b5761432b6147a3565b8152600060209091015290565b5080546000825560020290600052602060002090810190614359919061435c565b50565b5b80821115613cb557805461ffff191681556000600182015560020161435d565b60006020828403121561438f57600080fd5b81356001600160e01b031981168114610d5657600080fd5b60008083601f8401126143b957600080fd5b5081356001600160401b038111156143d057600080fd5b6020830191508360208285010111156143e857600080fd5b9250929050565b60008060006040848603121561440457600080fd5b8335925060208401356001600160401b0381111561442157600080fd5b61442d868287016143a7565b9497909650939450505050565b6000806040838503121561444d57600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b828110156144b95781518051855286810151878601528581015186860152606090810151600190810b918601919091526080909401939186019101614479565b5091979650505050505050565b60008083601f8401126144d857600080fd5b5081356001600160401b038111156144ef57600080fd5b6020830191508360208260051b85010111156143e857600080fd5b6000806020838503121561451d57600080fd5b82356001600160401b0381111561453357600080fd5b61453f858286016144c6565b90969095509350505050565b600081518084526020808501945080840160005b8381101561458a578151805161ffff168852830151838801526040909601959082019060010161455f565b509495945050505050565b600061016082518452602083015160208501526040830151604085015260608301516145c66060860182601b0b9052565b5060808301516145de608086018263ffffffff169052565b5060a083015160a085015260c083015160c085015260e083015160e085015261010080840151614618828701826001600160a01b03169052565b50506101208084015182828701526146328387018261454b565b925050506101408084015161464b8287018260ff169052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156146aa57603f19888603018452614698858351614595565b9450928501929085019060010161467c565b5092979650505050505050565b8060010b811461435957600080fd5b600080604083850312156146d957600080fd5b82356146e4816146b7565b946020939093013593505050565b6001600160a01b038116811461435957600080fd5b60008060006060848603121561471c57600080fd5b83359250602084013561472e816146f2565b929592945050506040919091013590565b6000806000806060858703121561475557600080fd5b8435614760816146f2565b93506020850135614770816146b7565b925060408501356001600160401b0381111561478b57600080fd5b614797878288016143a7565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b8151815260208083015190820152604080830151908201526060808301516001600160a01b031690820152608082015160c08201906002811061480c57634e487b7160e01b600052602160045260246000fd5b8060808401525060a083015160010b60a083015292915050565b60006020828403121561483857600080fd5b5035919050565b60ff8116811461435957600080fd5b60006020828403121561486057600080fd5b8135610d568161483f565b60008060008060008060008060a0898b03121561488757600080fd5b8835614892816146f2565b975060208901356148a2816146f2565b965060408901356001600160401b03808211156148be57600080fd5b6148ca8c838d016144c6565b909850965060608b01359150808211156148e357600080fd5b6148ef8c838d016144c6565b909650945060808b013591508082111561490857600080fd5b506149158b828c016143a7565b999c989b5096995094979396929594505050565b600080600080600080600060c0888a03121561494457600080fd5b873580601b0b811461495557600080fd5b9650602088013563ffffffff8116811461496e57600080fd5b955060408801359450606088013593506080880135925060a08801356001600160401b0381111561499e57600080fd5b6149aa8a828b016143a7565b989b979a50959850939692959293505050565b602081526000610d566020830184614595565b600080600080606085870312156149e657600080fd5b843593506020850135614770816146f2565b600060208284031215614a0a57600080fd5b8135610d56816146b7565b60008060008060008060a08789031215614a2e57600080fd5b8635614a39816146f2565b95506020870135614a49816146f2565b9450604087013593506060870135925060808701356001600160401b03811115614a7257600080fd5b614a7e89828a016143a7565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715614ac857614ac8614a90565b60405290565b604080519081016001600160401b0381118282101715614ac857614ac8614a90565b604051601f8201601f191681016001600160401b0381118282101715614b1857614b18614a90565b604052919050565b60006001600160401b03821115614b3957614b39614a90565b5060051b60200190565b60006020808385031215614b5657600080fd5b82356001600160401b03811115614b6c57600080fd5b8301601f81018513614b7d57600080fd5b8035614b90614b8b82614b20565b614af0565b81815260059190911b82018301908381019087831115614baf57600080fd5b928401925b8284101561263a578335614bc7816146b7565b82529284019290840190614bb4565b6020808252825182820181905260009190848201906040850190845b81811015614c0e57835183529284019291840191600101614bf2565b50909695505050505050565b60018060a01b038082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a08401525060c081015160c083015260e0810151805160e084015260208101516101008401526040810151610120840152505050565b8581526101c08101614caa6020830187614c1a565b8460010b61016083015283610180830152826101a08301529695505050505050565b60008060408385031215614cdf57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b818103818111156105d2576105d2614cf0565b6000815180845260005b81811015614d3f57602081850181015186830182015201614d23565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061263a90830184614d19565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000613c42604083018486614d99565b8281526101608101610d566020830184614c1a565b60006020808385031215614e0457600080fd5b82516001600160401b03811115614e1a57600080fd5b8301601f81018513614e2b57600080fd5b8051614e39614b8b82614b20565b81815260079190911b82018301908381019087831115614e5857600080fd5b928401925b8284101561263a5760808489031215614e765760008081fd5b614e7e614aa6565b84518152858501518682015260408086015190820152606080860151614ea3816146b7565b9082015282526080939093019290840190614e5d565b634e487b7160e01b600052603260045260246000fd5b600060018201614ee157614ee1614cf0565b5060010190565b600060a08284031215614efa57600080fd5b60405160a081018181106001600160401b0382111715614f1c57614f1c614a90565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b602081526000610d566020830184614d19565b600060208284031215614f7c57600080fd5b5051919050565b60018060a01b0385168152836020820152606060408201526000613e02606083018486614d99565b8481526101a08101614fc06020830186614c1a565b60019390930b610160820152610180015292915050565b6000815480845260208085019450836000528060002060005b8381101561458a57815461ffff1687526001808301548489015260409097019660029092019101614ff0565b60006101808583526150316020840186614c1a565b610160818185015284548285015260018501546101a085015260028501546101c08501526003850154915061506f6101e0850183601b0b601b0b9052565b60e09190911c61020084015260048401546102208401526005840154610240840152600684015461026084015260078401546001600160a01b03166102808401526102a08301526150c76102e0830160088501614fd7565b600984015460ff1660ff81166102c08501525095945050505050565b602081528154602082015260018201546040820152600282015460608201526000600383015461511b6080840182601b0b601b0b9052565b60e090811c60a0840152600484015460c0840152600584015490830152600683015461010083015260078301546001600160a01b03166101208301526101606101408301819052615173610180840160088601614fd7565b6009949094015460ff169201919091525090565b6001600160a01b03858116825284166020820152606060408201819052600090613e029083018486614d99565b6000602082840312156151c657600080fd5b8151610d56816146f2565b6000602082840312156151e357600080fd5b8151610d568161483f565b600181815b8085111561522957816000190482111561520f5761520f614cf0565b8085161561521c57918102915b93841c93908002906151f3565b509250929050565b600082615240575060016105d2565b8161524d575060006105d2565b8160018114615263576002811461526d57615289565b60019150506105d2565b60ff84111561527e5761527e614cf0565b50506001821b6105d2565b5060208310610133831016604e8410600b84101617156152ac575081810a6105d2565b6152b683836151ee565b80600019048211156152ca576152ca614cf0565b029392505050565b6000610d568383615231565b80820281158282048414176105d2576105d2614cf0565b60ff81811683821601908111156105d2576105d2614cf0565b60ff8181168382160290811690818114610c9857610c98614cf0565b6000602080838503121561533d57600080fd5b82516001600160401b0381111561535357600080fd5b8301601f8101851361536457600080fd5b8051615372614b8b82614b20565b81815260069190911b8201830190838101908783111561539157600080fd5b928401925b8284101561263a57604084890312156153af5760008081fd5b6153b7614ace565b845161ffff811681146153ca5760008081fd5b81528486015186820152825260409093019290840190615396565b838152600183900b602082015261018081016113586040830184614c1a565b6000610d5660ff841683615231565b60006060828403121561542557600080fd5b604051606081018181106001600160401b038211171561544757615447614a90565b80604052508251815260208301516020820152604083015160408201528091505092915050565b8181036000831280158383131683831282161715610c9857610c98614cf0565b808201808211156105d2576105d2614cf0565b6000600160ff1b82016154b6576154b6614cf0565b5060000390565b60006101a08683526154d26020840187614c1a565b806101608401526154e581840186614595565b9150508261018083015295945050505050565b8281526040602082015260006113586040830184614d19565b6001600160a01b038681168252851660208201526040810184905260806060820181905260009061263a9083018486614d99565b600061018085835261555a6020840186614c1a565b80610160840152613e0281840185614595565b60008160010b617fff19810361558557615585614cf0565b60000392915050565b80820260008212600160ff1b841416156155aa576155aa614cf0565b81810583148215176105d2576105d2614cf0565b634e487b7160e01b600052601260045260246000fd5b6000826155f157634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212209f6e908d54d80b9a8cde4911d7a5233b2c66aebf221fba70e69d53960bc26e4d64736f6c63430008130033a2646970667358221220116d363cff0f1975981b497a87c4ba24a12d3c234147dbe515923cee7fe115cc64736f6c63430008130033",
  "libraries": {
    "LiquidityPoolLib": "0x780B728cD7faDD535DD925b6e5522E16b85e0C54",
    "CLBTokenDeployerLib": "0x6ea6afe50240ED0Cb0360e902e3311A191df970f"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(MarketDeployer storage,address,address)": {
        "params": {
          "oracleProvider": "The address of the oracle provider",
          "self": "The MarketDeployer storage",
          "settlementToken": "The address of the settlement token"
        },
        "returns": {
          "market": "The address of the deployed ChromaticMarket contract"
        }
      }
    },
    "title": "MarketDeployerLib",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(MarketDeployer storage,address,address)": {
        "notice": "Deploys a ChromaticMarket contract"
      }
    },
    "notice": "Library for deploying a ChromaticMarket contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}