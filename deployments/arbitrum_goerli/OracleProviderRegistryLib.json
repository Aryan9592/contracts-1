{
  "address": "0xF37B361BdE0c44280136B4d82AB6593AC9AE7353",
  "abi": [],
  "transactionHash": "0x09e7f2cc60fd8424366544e10fad02a81c9b5eb133b691dc42907b67964d8e58",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0xF37B361BdE0c44280136B4d82AB6593AC9AE7353",
    "transactionIndex": 1,
    "gasUsed": "375785",
    "logsBloom": "0x
    "blockHash": "0xf36160835c63d366aa3837771033083a2603323bec0891d0cb72a91600aadba0",
    "transactionHash": "0x09e7f2cc60fd8424366544e10fad02a81c9b5eb133b691dc42907b67964d8e58",
    "logs": [],
    "blockNumber": 27636919,
    "cumulativeGasUsed": "375785",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6fec6a133006e784ffb2b008df2bee79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getOracleProviderLevel(OracleProviderRegistry storage,address)\":{\"params\":{\"oracleProvider\":\"The address of the oracle provider.\",\"self\":\"The storage reference to the OracleProviderRegistry.\"},\"returns\":{\"_0\":\"The level of the oracle provider.\"}},\"isRegistered(OracleProviderRegistry storage,address)\":{\"params\":{\"oracleProvider\":\"The address of the oracle provider to check.\",\"self\":\"The OracleProviderRegistry storage.\"},\"returns\":{\"_0\":\"bool Whether the oracle provider is registered.\"}},\"oracleProviders(OracleProviderRegistry storage)\":{\"params\":{\"self\":\"The OracleProviderRegistry storage.\"},\"returns\":{\"_0\":\"oracleProviders An array of addresses representing the registered oracle providers.\"}},\"register(OracleProviderRegistry storage,address)\":{\"details\":\"Throws an error if the oracle provider is already registered.\",\"params\":{\"oracleProvider\":\"The address of the oracle provider to register.\",\"self\":\"The OracleProviderRegistry storage.\"}},\"setOracleProviderLevel(OracleProviderRegistry storage,address,uint8)\":{\"details\":\"The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\",\"params\":{\"level\":\"The new level to be set for the oracle provider.\",\"oracleProvider\":\"The address of the oracle provider.\",\"self\":\"The storage reference to the OracleProviderRegistry.\"}},\"unregister(OracleProviderRegistry storage,address)\":{\"params\":{\"oracleProvider\":\"The address of the oracle provider to unregister.\",\"self\":\"The OracleProviderRegistry storage.\"}}},\"title\":\"OracleProviderRegistryLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getOracleProviderLevel(OracleProviderRegistry storage,address)\":{\"notice\":\"Retrieves the level of an oracle provider in the registry.\"},\"isRegistered(OracleProviderRegistry storage,address)\":{\"notice\":\"Checks if an oracle provider is registered in the registry.\"},\"oracleProviders(OracleProviderRegistry storage)\":{\"notice\":\"Returns an array of all registered oracle providers.\"},\"register(OracleProviderRegistry storage,address)\":{\"notice\":\"Registers an oracle provider in the registry.\"},\"setOracleProviderLevel(OracleProviderRegistry storage,address,uint8)\":{\"notice\":\"Sets the level of an oracle provider in the registry.\"},\"unregister(OracleProviderRegistry storage,address)\":{\"notice\":\"Unregisters an oracle provider from the registry.\"}},\"notice\":\"Library for managing a registry of oracle providers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/external/registry/OracleProviderRegistry.sol\":\"OracleProviderRegistryLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/core/external/registry/OracleProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title OracleProviderRegistry\\n * @dev A registry for managing oracle providers.\\n */\\nstruct OracleProviderRegistry {\\n    /// @dev Set of registered oracle providers\\n    EnumerableSet.AddressSet _oracleProviders;\\n    mapping(address => uint8) _oracleProviderLevels;\\n}\\n\\n/**\\n * @title OracleProviderRegistryLib\\n * @notice Library for managing a registry of oracle providers.\\n */\\nlibrary OracleProviderRegistryLib {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Registers an oracle provider in the registry.\\n     * @dev Throws an error if the oracle provider is already registered.\\n     * @param self The OracleProviderRegistry storage.\\n     * @param oracleProvider The address of the oracle provider to register.\\n     */\\n    function register(OracleProviderRegistry storage self, address oracleProvider) external {\\n        require(\\n            !self._oracleProviders.contains(oracleProvider),\\n            Errors.ALREADY_REGISTERED_ORACLE_PROVIDER\\n        );\\n\\n        self._oracleProviders.add(oracleProvider);\\n    }\\n\\n    /**\\n     * @notice Unregisters an oracle provider from the registry.\\n     * @param self The OracleProviderRegistry storage.\\n     * @param oracleProvider The address of the oracle provider to unregister.\\n     */\\n    function unregister(OracleProviderRegistry storage self, address oracleProvider) external {\\n        self._oracleProviders.remove(oracleProvider);\\n    }\\n\\n    /**\\n     * @notice Returns an array of all registered oracle providers.\\n     * @param self The OracleProviderRegistry storage.\\n     * @return oracleProviders An array of addresses representing the registered oracle providers.\\n     */\\n    function oracleProviders(\\n        OracleProviderRegistry storage self\\n    ) external view returns (address[] memory) {\\n        return self._oracleProviders.values();\\n    }\\n\\n    /**\\n     * @notice Checks if an oracle provider is registered in the registry.\\n     * @param self The OracleProviderRegistry storage.\\n     * @param oracleProvider The address of the oracle provider to check.\\n     * @return bool Whether the oracle provider is registered.\\n     */\\n    function isRegistered(\\n        OracleProviderRegistry storage self,\\n        address oracleProvider\\n    ) external view returns (bool) {\\n        return self._oracleProviders.contains(oracleProvider);\\n    }\\n\\n    /**\\n     * @notice Retrieves the level of an oracle provider in the registry.\\n     * @param self The storage reference to the OracleProviderRegistry.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @return The level of the oracle provider.\\n     */\\n    function getOracleProviderLevel(\\n        OracleProviderRegistry storage self,\\n        address oracleProvider\\n    ) external view returns (uint8) {\\n        return self._oracleProviderLevels[oracleProvider];\\n    }\\n\\n    /**\\n     * @notice Sets the level of an oracle provider in the registry.\\n     * @dev The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\\n     * @param self The storage reference to the OracleProviderRegistry.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param level The new level to be set for the oracle provider.\\n     */\\n    function setOracleProviderLevel(\\n        OracleProviderRegistry storage self,\\n        address oracleProvider,\\n        uint8 level\\n    ) external {\\n        self._oracleProviderLevels[oracleProvider] = level;\\n    }\\n}\\n\",\"keccak256\":\"0x1df226e3b54beba88372d006ab26eed5f3abef0bc2c62333371aa2e25926e085\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Errors {\\n    string constant ONLY_DAO_CAN_ACCESS = \\\"DAO\\\";\\n    string constant ONLY_VAULT_CAN_ACCESS = \\\"VLT\\\";\\n    string constant ONLY_DEDICATED_MSG_SENDER_CAN_ACCESS = \\\"DMS\\\";\\n    string constant ONLY_LIQUIDATOR_CAN_ACCESS = \\\"LIQ\\\";\\n    string constant ONLY_FUNDS_OWNER_CAN_WITHDRAW_FUNDS = \\\"FOW\\\";\\n    string constant ETH_TRANSFER_FAILED = \\\"ETF\\\";\\n    string constant INVALID_SWAP_VALUE = \\\"ISV\\\";\\n    string constant NOT_ENOUGH_FREE_LIQUIDITY = \\\"NEFL\\\";\\n    string constant TOO_SMALL_AMOUNT = \\\"TSA\\\";\\n    string constant INVALID_ORACLE_VERSION = \\\"IOV\\\";\\n    string constant EXCEED_MARGIN_RANGE = \\\"IOV\\\";\\n    string constant UNSUPPORTED_TRADING_FEE_RATE = \\\"UTFR\\\";\\n    string constant ALREADY_REGISTERED_ORACLE_PROVIDER = \\\"ARO\\\";\\n    string constant ALREADY_REGISTERED_TOKEN = \\\"ART\\\";\\n    string constant UNREGISTERED_TOKEN = \\\"URT\\\";\\n    string constant INTEREST_RATE_NOT_INITIALIZED = \\\"IRNI\\\";\\n    string constant INTEREST_RATE_OVERFLOW = \\\"IROF\\\";\\n    string constant INTEREST_RATE_PAST_TIMESTAMP = \\\"IRPT\\\";\\n    string constant INTEREST_RATE_NOT_APPENDABLE = \\\"IRNA\\\";\\n    string constant INTEREST_RATE_ALREADY_APPLIED = \\\"IRAA\\\";\\n    string constant UNSETTLED_POSITION = \\\"USP\\\";\\n    string constant INVALID_POSITION_QTY = \\\"IPQ\\\";\\n}\\n\",\"keccak256\":\"0x42f8a4ee21e7d9a19a21dd1cad50631fe43f7d07bf56886be52413b6b55b7525\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6105d661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c8063294f2c2814610071578063377efa131461009a578063458288ef146100bd5780634f146e09146100df57806371f9ad5f14610121578063c2635fc814610141575b600080fd5b61008461007f366004610411565b61018e565b604051610091919061042a565b60405180910390f35b6100ad6100a8366004610493565b61019f565b6040519015158152602001610091565b8180156100c957600080fd5b506100dd6100d8366004610493565b6101b2565b005b61010f6100ed366004610493565b6001600160a01b03166000908152600291909101602052604090205460ff1690565b60405160ff9091168152602001610091565b81801561012d57600080fd5b506100dd61013c366004610493565b6101c1565b81801561014d57600080fd5b506100dd61015c3660046104bf565b6001600160a01b03909116600090815260029092016020526040909120805460ff90921660ff19909216919091179055565b60606101998261021a565b92915050565b60006101ab8383610227565b9392505050565b6101bc8282610249565b505050565b6101cb8282610227565b156040518060400160405280600381526020016241524f60e81b8152509061020f5760405162461bcd60e51b81526004016102069190610505565b60405180910390fd5b506101bc828261025e565b606060006101ab83610273565b6001600160a01b038116600090815260018301602052604081205415156101ab565b60006101ab836001600160a01b0384166102cf565b60006101ab836001600160a01b0384166103c2565b6060816000018054806020026020016040519081016040528092919081815260200182805480156102c357602002820191906000526020600020905b8154815260200190600101908083116102af575b50505050509050919050565b600081815260018301602052604081205480156103b85760006102f3600183610553565b855490915060009061030790600190610553565b905081811461036c57600086600001828154811061032757610327610574565b906000526020600020015490508087600001848154811061034a5761034a610574565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061037d5761037d61058a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610199565b6000915050610199565b600081815260018301602052604081205461040957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610199565b506000610199565b60006020828403121561042357600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561046b5783516001600160a01b031683529284019291840191600101610446565b50909695505050505050565b80356001600160a01b038116811461048e57600080fd5b919050565b600080604083850312156104a657600080fd5b823591506104b660208401610477565b90509250929050565b6000806000606084860312156104d457600080fd5b833592506104e460208501610477565b9150604084013560ff811681146104fa57600080fd5b809150509250925092565b600060208083528351808285015260005b8181101561053257858101830151858201604001528201610516565b506000604082860101526040601f19601f8301168501019250505092915050565b8181038181111561019957634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212208efbb61757b349d562df31e9714fa9dd180d121668b9cddbcc7a9f9e92f0321b64736f6c63430008130033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c8063294f2c2814610071578063377efa131461009a578063458288ef146100bd5780634f146e09146100df57806371f9ad5f14610121578063c2635fc814610141575b600080fd5b61008461007f366004610411565b61018e565b604051610091919061042a565b60405180910390f35b6100ad6100a8366004610493565b61019f565b6040519015158152602001610091565b8180156100c957600080fd5b506100dd6100d8366004610493565b6101b2565b005b61010f6100ed366004610493565b6001600160a01b03166000908152600291909101602052604090205460ff1690565b60405160ff9091168152602001610091565b81801561012d57600080fd5b506100dd61013c366004610493565b6101c1565b81801561014d57600080fd5b506100dd61015c3660046104bf565b6001600160a01b03909116600090815260029092016020526040909120805460ff90921660ff19909216919091179055565b60606101998261021a565b92915050565b60006101ab8383610227565b9392505050565b6101bc8282610249565b505050565b6101cb8282610227565b156040518060400160405280600381526020016241524f60e81b8152509061020f5760405162461bcd60e51b81526004016102069190610505565b60405180910390fd5b506101bc828261025e565b606060006101ab83610273565b6001600160a01b038116600090815260018301602052604081205415156101ab565b60006101ab836001600160a01b0384166102cf565b60006101ab836001600160a01b0384166103c2565b6060816000018054806020026020016040519081016040528092919081815260200182805480156102c357602002820191906000526020600020905b8154815260200190600101908083116102af575b50505050509050919050565b600081815260018301602052604081205480156103b85760006102f3600183610553565b855490915060009061030790600190610553565b905081811461036c57600086600001828154811061032757610327610574565b906000526020600020015490508087600001848154811061034a5761034a610574565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061037d5761037d61058a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610199565b6000915050610199565b600081815260018301602052604081205461040957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610199565b506000610199565b60006020828403121561042357600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561046b5783516001600160a01b031683529284019291840191600101610446565b50909695505050505050565b80356001600160a01b038116811461048e57600080fd5b919050565b600080604083850312156104a657600080fd5b823591506104b660208401610477565b90509250929050565b6000806000606084860312156104d457600080fd5b833592506104e460208501610477565b9150604084013560ff811681146104fa57600080fd5b809150509250925092565b600060208083528351808285015260005b8181101561053257858101830151858201604001528201610516565b506000604082860101526040601f19601f8301168501019250505092915050565b8181038181111561019957634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212208efbb61757b349d562df31e9714fa9dd180d121668b9cddbcc7a9f9e92f0321b64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getOracleProviderLevel(OracleProviderRegistry storage,address)": {
        "params": {
          "oracleProvider": "The address of the oracle provider.",
          "self": "The storage reference to the OracleProviderRegistry."
        },
        "returns": {
          "_0": "The level of the oracle provider."
        }
      },
      "isRegistered(OracleProviderRegistry storage,address)": {
        "params": {
          "oracleProvider": "The address of the oracle provider to check.",
          "self": "The OracleProviderRegistry storage."
        },
        "returns": {
          "_0": "bool Whether the oracle provider is registered."
        }
      },
      "oracleProviders(OracleProviderRegistry storage)": {
        "params": {
          "self": "The OracleProviderRegistry storage."
        },
        "returns": {
          "_0": "oracleProviders An array of addresses representing the registered oracle providers."
        }
      },
      "register(OracleProviderRegistry storage,address)": {
        "details": "Throws an error if the oracle provider is already registered.",
        "params": {
          "oracleProvider": "The address of the oracle provider to register.",
          "self": "The OracleProviderRegistry storage."
        }
      },
      "setOracleProviderLevel(OracleProviderRegistry storage,address,uint8)": {
        "details": "The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.",
        "params": {
          "level": "The new level to be set for the oracle provider.",
          "oracleProvider": "The address of the oracle provider.",
          "self": "The storage reference to the OracleProviderRegistry."
        }
      },
      "unregister(OracleProviderRegistry storage,address)": {
        "params": {
          "oracleProvider": "The address of the oracle provider to unregister.",
          "self": "The OracleProviderRegistry storage."
        }
      }
    },
    "title": "OracleProviderRegistryLib",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getOracleProviderLevel(OracleProviderRegistry storage,address)": {
        "notice": "Retrieves the level of an oracle provider in the registry."
      },
      "isRegistered(OracleProviderRegistry storage,address)": {
        "notice": "Checks if an oracle provider is registered in the registry."
      },
      "oracleProviders(OracleProviderRegistry storage)": {
        "notice": "Returns an array of all registered oracle providers."
      },
      "register(OracleProviderRegistry storage,address)": {
        "notice": "Registers an oracle provider in the registry."
      },
      "setOracleProviderLevel(OracleProviderRegistry storage,address,uint8)": {
        "notice": "Sets the level of an oracle provider in the registry."
      },
      "unregister(OracleProviderRegistry storage,address)": {
        "notice": "Unregisters an oracle provider from the registry."
      }
    },
    "notice": "Library for managing a registry of oracle providers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}