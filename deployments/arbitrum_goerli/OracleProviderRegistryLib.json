{
  "address": "0x2319bD8Bbcb566DD761726Caac27FF8AfAcFE36b",
  "abi": [],
  "transactionHash": "0x6068e4e8d38556807b5db90e2c6bfa5ecf213083ca8d96b31b3fec39b3727a0b",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0x2319bD8Bbcb566DD761726Caac27FF8AfAcFE36b",
    "transactionIndex": 1,
    "gasUsed": "534229",
    "logsBloom": "0x
    "blockHash": "0x0c41ff52955c5aa3b7886e48edcbb918618942c0c78a5a38376c893874045e73",
    "transactionHash": "0x6068e4e8d38556807b5db90e2c6bfa5ecf213083ca8d96b31b3fec39b3727a0b",
    "logs": [],
    "blockNumber": 29540094,
    "cumulativeGasUsed": "534229",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "49b61eb4e7263aa196b43daffecb2095",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getOracleProviderProperties(OracleProviderRegistry storage,address)\":{\"params\":{\"oracleProvider\":\"The address of the oracle provider.\",\"self\":\"The OracleProviderRegistry storage.\"},\"returns\":{\"leverageLevel\":\"The leverage level of the oracle provider.\",\"maxStopLossBPS\":\"The maximum stop-loss basis points.\",\"maxTakeProfitBPS\":\"The maximum take-profit basis points.\",\"minStopLossBPS\":\"The minimum stop-loss basis points.\",\"minTakeProfitBPS\":\"The minimum take-profit basis points.\"}},\"isRegistered(OracleProviderRegistry storage,address)\":{\"params\":{\"oracleProvider\":\"The address of the oracle provider to check.\",\"self\":\"The OracleProviderRegistry storage.\"},\"returns\":{\"_0\":\"bool Whether the oracle provider is registered.\"}},\"oracleProviders(OracleProviderRegistry storage)\":{\"params\":{\"self\":\"The OracleProviderRegistry storage.\"},\"returns\":{\"_0\":\"oracleProviders An array of addresses representing the registered oracle providers.\"}},\"register(OracleProviderRegistry storage,address,uint32,uint32,uint32,uint32,uint8)\":{\"details\":\"Throws an error if the oracle provider is already registered.\",\"params\":{\"leverageLevel\":\"The leverage level of the oracle provider.\",\"maxStopLossBPS\":\"The maximum stop-loss basis points.\",\"maxTakeProfitBPS\":\"The maximum take-profit basis points.\",\"minStopLossBPS\":\"The minimum stop-loss basis points.\",\"minTakeProfitBPS\":\"The minimum take-profit basis points.\",\"oracleProvider\":\"The address of the oracle provider to register.\",\"self\":\"The OracleProviderRegistry storage.\"}},\"setLeverageLevel(OracleProviderRegistry storage,address,uint8)\":{\"details\":\"The leverage level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\",\"params\":{\"leverageLevel\":\"The new leverage level to be set for the oracle provider.\",\"oracleProvider\":\"The address of the oracle provider.\",\"self\":\"The storage reference to the OracleProviderRegistry.\"}},\"setStopLossBPSRange(OracleProviderRegistry storage,address,uint32,uint32)\":{\"params\":{\"maxStopLossBPS\":\"The maximum stop-loss basis points.\",\"minStopLossBPS\":\"The minimum stop-loss basis points.\",\"oracleProvider\":\"The address of the oracle provider.\",\"self\":\"The OracleProviderRegistry storage.\"}},\"setTakeProfitBPSRange(OracleProviderRegistry storage,address,uint32,uint32)\":{\"params\":{\"maxTakeProfitBPS\":\"The maximum take-profit basis points.\",\"minTakeProfitBPS\":\"The minimum take-profit basis points.\",\"oracleProvider\":\"The address of the oracle provider.\",\"self\":\"The OracleProviderRegistry storage.\"}},\"unregister(OracleProviderRegistry storage,address)\":{\"params\":{\"oracleProvider\":\"The address of the oracle provider to unregister.\",\"self\":\"The OracleProviderRegistry storage.\"}}},\"title\":\"OracleProviderRegistryLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getOracleProviderProperties(OracleProviderRegistry storage,address)\":{\"notice\":\"Retrieves the properties of an oracle provider.\"},\"isRegistered(OracleProviderRegistry storage,address)\":{\"notice\":\"Checks if an oracle provider is registered in the registry.\"},\"oracleProviders(OracleProviderRegistry storage)\":{\"notice\":\"Returns an array of all registered oracle providers.\"},\"register(OracleProviderRegistry storage,address,uint32,uint32,uint32,uint32,uint8)\":{\"notice\":\"Registers an oracle provider in the registry.\"},\"setLeverageLevel(OracleProviderRegistry storage,address,uint8)\":{\"notice\":\"Sets the leverage level of an oracle provider in the registry.\"},\"setStopLossBPSRange(OracleProviderRegistry storage,address,uint32,uint32)\":{\"notice\":\"Sets the range for stop-loss basis points for an oracle provider.\"},\"setTakeProfitBPSRange(OracleProviderRegistry storage,address,uint32,uint32)\":{\"notice\":\"Sets the range for take-profit basis points for an oracle provider.\"},\"unregister(OracleProviderRegistry storage,address)\":{\"notice\":\"Unregisters an oracle provider from the registry.\"}},\"notice\":\"Library for managing a registry of oracle providers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/external/registry/OracleProviderRegistry.sol\":\"OracleProviderRegistryLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/core/external/registry/OracleProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title OracleProviderRegistry\\n * @dev A registry for managing oracle providers.\\n */\\nstruct OracleProviderRegistry {\\n    /// @dev Set of registered oracle providers\\n    EnumerableSet.AddressSet _oracleProviders;\\n    mapping(address => uint32) _minStopLossBPSs;\\n    mapping(address => uint32) _maxStopLossBPSs;\\n    mapping(address => uint32) _minTakeProfitBPSs;\\n    mapping(address => uint32) _maxTakeProfitBPSs;\\n    mapping(address => uint8) _leverageLevels;\\n}\\n\\n/**\\n * @title OracleProviderRegistryLib\\n * @notice Library for managing a registry of oracle providers.\\n */\\nlibrary OracleProviderRegistryLib {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Registers an oracle provider in the registry.\\n     * @dev Throws an error if the oracle provider is already registered.\\n     * @param self The OracleProviderRegistry storage.\\n     * @param oracleProvider The address of the oracle provider to register.\\n     * @param minStopLossBPS The minimum stop-loss basis points.\\n     * @param maxStopLossBPS The maximum stop-loss basis points.\\n     * @param minTakeProfitBPS The minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The maximum take-profit basis points.\\n     * @param leverageLevel The leverage level of the oracle provider.\\n     */\\n    function register(\\n        OracleProviderRegistry storage self,\\n        address oracleProvider,\\n        uint32 minStopLossBPS,\\n        uint32 maxStopLossBPS,\\n        uint32 minTakeProfitBPS,\\n        uint32 maxTakeProfitBPS,\\n        uint8 leverageLevel\\n    ) external {\\n        require(\\n            !self._oracleProviders.contains(oracleProvider),\\n            Errors.ALREADY_REGISTERED_ORACLE_PROVIDER\\n        );\\n\\n        self._oracleProviders.add(oracleProvider);\\n        self._minStopLossBPSs[oracleProvider] = minStopLossBPS;\\n        self._maxStopLossBPSs[oracleProvider] = maxStopLossBPS;\\n        self._minTakeProfitBPSs[oracleProvider] = minTakeProfitBPS;\\n        self._maxTakeProfitBPSs[oracleProvider] = maxTakeProfitBPS;\\n        self._leverageLevels[oracleProvider] = leverageLevel;\\n    }\\n\\n    /**\\n     * @notice Unregisters an oracle provider from the registry.\\n     * @param self The OracleProviderRegistry storage.\\n     * @param oracleProvider The address of the oracle provider to unregister.\\n     */\\n    function unregister(OracleProviderRegistry storage self, address oracleProvider) external {\\n        self._oracleProviders.remove(oracleProvider);\\n    }\\n\\n    /**\\n     * @notice Returns an array of all registered oracle providers.\\n     * @param self The OracleProviderRegistry storage.\\n     * @return oracleProviders An array of addresses representing the registered oracle providers.\\n     */\\n    function oracleProviders(\\n        OracleProviderRegistry storage self\\n    ) external view returns (address[] memory) {\\n        return self._oracleProviders.values();\\n    }\\n\\n    /**\\n     * @notice Checks if an oracle provider is registered in the registry.\\n     * @param self The OracleProviderRegistry storage.\\n     * @param oracleProvider The address of the oracle provider to check.\\n     * @return bool Whether the oracle provider is registered.\\n     */\\n    function isRegistered(\\n        OracleProviderRegistry storage self,\\n        address oracleProvider\\n    ) external view returns (bool) {\\n        return self._oracleProviders.contains(oracleProvider);\\n    }\\n\\n    /**\\n     * @notice Retrieves the properties of an oracle provider.\\n     * @param self The OracleProviderRegistry storage.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @return minStopLossBPS The minimum stop-loss basis points.\\n     * @return maxStopLossBPS The maximum stop-loss basis points.\\n     * @return minTakeProfitBPS The minimum take-profit basis points.\\n     * @return maxTakeProfitBPS The maximum take-profit basis points.\\n     * @return leverageLevel The leverage level of the oracle provider.\\n     */\\n    function getOracleProviderProperties(\\n        OracleProviderRegistry storage self,\\n        address oracleProvider\\n    )\\n        external\\n        view\\n        returns (\\n            uint32 minStopLossBPS,\\n            uint32 maxStopLossBPS,\\n            uint32 minTakeProfitBPS,\\n            uint32 maxTakeProfitBPS,\\n            uint8 leverageLevel\\n        )\\n    {\\n        minStopLossBPS = self._minStopLossBPSs[oracleProvider];\\n        maxStopLossBPS = self._maxStopLossBPSs[oracleProvider];\\n        minTakeProfitBPS = self._minTakeProfitBPSs[oracleProvider];\\n        maxTakeProfitBPS = self._maxTakeProfitBPSs[oracleProvider];\\n        leverageLevel = self._leverageLevels[oracleProvider];\\n    }\\n\\n    /**\\n     * @notice Sets the range for stop-loss basis points for an oracle provider.\\n     * @param self The OracleProviderRegistry storage.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minStopLossBPS The minimum stop-loss basis points.\\n     * @param maxStopLossBPS The maximum stop-loss basis points.\\n     */\\n    function setStopLossBPSRange(\\n        OracleProviderRegistry storage self,\\n        address oracleProvider,\\n        uint32 minStopLossBPS,\\n        uint32 maxStopLossBPS\\n    ) external {\\n        self._minStopLossBPSs[oracleProvider] = minStopLossBPS;\\n        self._maxStopLossBPSs[oracleProvider] = maxStopLossBPS;\\n    }\\n\\n    /**\\n     * @notice Sets the range for take-profit basis points for an oracle provider.\\n     * @param self The OracleProviderRegistry storage.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param minTakeProfitBPS The minimum take-profit basis points.\\n     * @param maxTakeProfitBPS The maximum take-profit basis points.\\n     */\\n    function setTakeProfitBPSRange(\\n        OracleProviderRegistry storage self,\\n        address oracleProvider,\\n        uint32 minTakeProfitBPS,\\n        uint32 maxTakeProfitBPS\\n    ) external {\\n        self._minTakeProfitBPSs[oracleProvider] = minTakeProfitBPS;\\n        self._maxTakeProfitBPSs[oracleProvider] = maxTakeProfitBPS;\\n    }\\n\\n    /**\\n     * @notice Sets the leverage level of an oracle provider in the registry.\\n     * @dev The leverage level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.\\n     * @param self The storage reference to the OracleProviderRegistry.\\n     * @param oracleProvider The address of the oracle provider.\\n     * @param leverageLevel The new leverage level to be set for the oracle provider.\\n     */\\n    function setLeverageLevel(\\n        OracleProviderRegistry storage self,\\n        address oracleProvider,\\n        uint8 leverageLevel\\n    ) external {\\n        self._leverageLevels[oracleProvider] = leverageLevel;\\n    }\\n}\\n\",\"keccak256\":\"0x75f48fc59797ffb5752f9c76930fdd6d38136d711c0d1e120a319f40781afe10\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Errors {\\n    string constant NOT_ENOUGH_FREE_LIQUIDITY = \\\"NEFL\\\";\\n    string constant TOO_SMALL_AMOUNT = \\\"TSA\\\";\\n    string constant INVALID_ORACLE_VERSION = \\\"IOV\\\";\\n    string constant EXCEED_MARGIN_RANGE = \\\"IOV\\\";\\n    string constant UNSUPPORTED_TRADING_FEE_RATE = \\\"UTFR\\\";\\n    string constant ALREADY_REGISTERED_ORACLE_PROVIDER = \\\"ARO\\\";\\n    string constant ALREADY_REGISTERED_TOKEN = \\\"ART\\\";\\n    string constant UNREGISTERED_TOKEN = \\\"URT\\\";\\n    string constant INTEREST_RATE_NOT_INITIALIZED = \\\"IRNI\\\";\\n    string constant INTEREST_RATE_OVERFLOW = \\\"IROF\\\";\\n    string constant INTEREST_RATE_PAST_TIMESTAMP = \\\"IRPT\\\";\\n    string constant INTEREST_RATE_NOT_APPENDABLE = \\\"IRNA\\\";\\n    string constant INTEREST_RATE_ALREADY_APPLIED = \\\"IRAA\\\";\\n    string constant UNSETTLED_POSITION = \\\"USP\\\";\\n    string constant INVALID_POSITION_QTY = \\\"IPQ\\\";\\n}\\n\",\"keccak256\":\"0x8f069bf6e7f249df60a7076f9451266ce86f5675280160764078a8a314f5b1d6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6108b361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100925760003560e01c80638037abff116100655780638037abff146101ac57806390e07e8b14610213578063b2fe94a214610233578063c21d360f1461029a57600080fd5b80631961a6ea14610097578063294f2c2814610147578063377efa1314610167578063458288ef1461018a575b600080fd5b6101086100a5366004610623565b6001600160a01b031660009081526002820160209081526040808320546003850183528184205460048601845282852054600587018552838620546006909701909452919093205463ffffffff9384169591841694928416939092169160ff1690565b6040805163ffffffff9687168152948616602086015292851692840192909252909216606082015260ff909116608082015260a0015b60405180910390f35b61015a61015536600461064f565b6102e7565b60405161013e9190610668565b61017a610175366004610623565b6102f8565b604051901515815260200161013e565b81801561019657600080fd5b506101aa6101a5366004610623565b61030b565b005b8180156101b857600080fd5b506101aa6101c73660046106c9565b6001600160a01b039290921660009081526002840160209081526040808320805463ffffffff1990811663ffffffff968716179091556003909601909152902080549093169116179055565b81801561021f57600080fd5b506101aa61022e366004610727565b61031a565b81801561023f57600080fd5b506101aa61024e3660046106c9565b6001600160a01b039290921660009081526004840160209081526040808320805463ffffffff1990811663ffffffff968716179091556005909601909152902080549093169116179055565b8180156102a657600080fd5b506101aa6102b53660046107a6565b6001600160a01b03909116600090815260069092016020526040909120805460ff90921660ff19909216919091179055565b60606102f282610410565b92915050565b6000610304838361041d565b9392505050565b610315828261043f565b505050565b610324878761041d565b156040518060400160405280600381526020016241524f60e81b815250906103685760405162461bcd60e51b815260040161035f91906107e2565b60405180910390fd5b506103738787610454565b506001600160a01b039590951660009081526002870160209081526040808320805463ffffffff1990811663ffffffff998a161790915560038a0183528184208054821697891697909717909655600489018252808320805487169588169590951790945560058801815283822080549095169290951691909117909255600690940190915291909120805460ff191660ff909216919091179055565b6060600061030483610469565b6001600160a01b03811660009081526001830160205260408120541515610304565b6000610304836001600160a01b0384166104c5565b6000610304836001600160a01b0384166105b8565b6060816000018054806020026020016040519081016040528092919081815260200182805480156104b957602002820191906000526020600020905b8154815260200190600101908083116104a5575b50505050509050919050565b600081815260018301602052604081205480156105ae5760006104e9600183610830565b85549091506000906104fd90600190610830565b905081811461056257600086600001828154811061051d5761051d610851565b906000526020600020015490508087600001848154811061054057610540610851565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061057357610573610867565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102f2565b60009150506102f2565b60008181526001830160205260408120546105ff575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102f2565b5060006102f2565b80356001600160a01b038116811461061e57600080fd5b919050565b6000806040838503121561063657600080fd5b8235915061064660208401610607565b90509250929050565b60006020828403121561066157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156106a95783516001600160a01b031683529284019291840191600101610684565b50909695505050505050565b803563ffffffff8116811461061e57600080fd5b600080600080608085870312156106df57600080fd5b843593506106ef60208601610607565b92506106fd604086016106b5565b915061070b606086016106b5565b905092959194509250565b803560ff8116811461061e57600080fd5b600080600080600080600060e0888a03121561074257600080fd5b8735965061075260208901610607565b9550610760604089016106b5565b945061076e606089016106b5565b935061077c608089016106b5565b925061078a60a089016106b5565b915061079860c08901610716565b905092959891949750929550565b6000806000606084860312156107bb57600080fd5b833592506107cb60208501610607565b91506107d960408501610716565b90509250925092565b600060208083528351808285015260005b8181101561080f578581018301518582016040015282016107f3565b506000604082860101526040601f19601f8301168501019250505092915050565b818103818111156102f257634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c8438f00def24bbbc325a1e0918610f80ebbe64fd3355c9b48ea7bbd2206107b64736f6c63430008130033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100925760003560e01c80638037abff116100655780638037abff146101ac57806390e07e8b14610213578063b2fe94a214610233578063c21d360f1461029a57600080fd5b80631961a6ea14610097578063294f2c2814610147578063377efa1314610167578063458288ef1461018a575b600080fd5b6101086100a5366004610623565b6001600160a01b031660009081526002820160209081526040808320546003850183528184205460048601845282852054600587018552838620546006909701909452919093205463ffffffff9384169591841694928416939092169160ff1690565b6040805163ffffffff9687168152948616602086015292851692840192909252909216606082015260ff909116608082015260a0015b60405180910390f35b61015a61015536600461064f565b6102e7565b60405161013e9190610668565b61017a610175366004610623565b6102f8565b604051901515815260200161013e565b81801561019657600080fd5b506101aa6101a5366004610623565b61030b565b005b8180156101b857600080fd5b506101aa6101c73660046106c9565b6001600160a01b039290921660009081526002840160209081526040808320805463ffffffff1990811663ffffffff968716179091556003909601909152902080549093169116179055565b81801561021f57600080fd5b506101aa61022e366004610727565b61031a565b81801561023f57600080fd5b506101aa61024e3660046106c9565b6001600160a01b039290921660009081526004840160209081526040808320805463ffffffff1990811663ffffffff968716179091556005909601909152902080549093169116179055565b8180156102a657600080fd5b506101aa6102b53660046107a6565b6001600160a01b03909116600090815260069092016020526040909120805460ff90921660ff19909216919091179055565b60606102f282610410565b92915050565b6000610304838361041d565b9392505050565b610315828261043f565b505050565b610324878761041d565b156040518060400160405280600381526020016241524f60e81b815250906103685760405162461bcd60e51b815260040161035f91906107e2565b60405180910390fd5b506103738787610454565b506001600160a01b039590951660009081526002870160209081526040808320805463ffffffff1990811663ffffffff998a161790915560038a0183528184208054821697891697909717909655600489018252808320805487169588169590951790945560058801815283822080549095169290951691909117909255600690940190915291909120805460ff191660ff909216919091179055565b6060600061030483610469565b6001600160a01b03811660009081526001830160205260408120541515610304565b6000610304836001600160a01b0384166104c5565b6000610304836001600160a01b0384166105b8565b6060816000018054806020026020016040519081016040528092919081815260200182805480156104b957602002820191906000526020600020905b8154815260200190600101908083116104a5575b50505050509050919050565b600081815260018301602052604081205480156105ae5760006104e9600183610830565b85549091506000906104fd90600190610830565b905081811461056257600086600001828154811061051d5761051d610851565b906000526020600020015490508087600001848154811061054057610540610851565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061057357610573610867565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102f2565b60009150506102f2565b60008181526001830160205260408120546105ff575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102f2565b5060006102f2565b80356001600160a01b038116811461061e57600080fd5b919050565b6000806040838503121561063657600080fd5b8235915061064660208401610607565b90509250929050565b60006020828403121561066157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156106a95783516001600160a01b031683529284019291840191600101610684565b50909695505050505050565b803563ffffffff8116811461061e57600080fd5b600080600080608085870312156106df57600080fd5b843593506106ef60208601610607565b92506106fd604086016106b5565b915061070b606086016106b5565b905092959194509250565b803560ff8116811461061e57600080fd5b600080600080600080600060e0888a03121561074257600080fd5b8735965061075260208901610607565b9550610760604089016106b5565b945061076e606089016106b5565b935061077c608089016106b5565b925061078a60a089016106b5565b915061079860c08901610716565b905092959891949750929550565b6000806000606084860312156107bb57600080fd5b833592506107cb60208501610607565b91506107d960408501610716565b90509250925092565b600060208083528351808285015260005b8181101561080f578581018301518582016040015282016107f3565b506000604082860101526040601f19601f8301168501019250505092915050565b818103818111156102f257634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c8438f00def24bbbc325a1e0918610f80ebbe64fd3355c9b48ea7bbd2206107b64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getOracleProviderProperties(OracleProviderRegistry storage,address)": {
        "params": {
          "oracleProvider": "The address of the oracle provider.",
          "self": "The OracleProviderRegistry storage."
        },
        "returns": {
          "leverageLevel": "The leverage level of the oracle provider.",
          "maxStopLossBPS": "The maximum stop-loss basis points.",
          "maxTakeProfitBPS": "The maximum take-profit basis points.",
          "minStopLossBPS": "The minimum stop-loss basis points.",
          "minTakeProfitBPS": "The minimum take-profit basis points."
        }
      },
      "isRegistered(OracleProviderRegistry storage,address)": {
        "params": {
          "oracleProvider": "The address of the oracle provider to check.",
          "self": "The OracleProviderRegistry storage."
        },
        "returns": {
          "_0": "bool Whether the oracle provider is registered."
        }
      },
      "oracleProviders(OracleProviderRegistry storage)": {
        "params": {
          "self": "The OracleProviderRegistry storage."
        },
        "returns": {
          "_0": "oracleProviders An array of addresses representing the registered oracle providers."
        }
      },
      "register(OracleProviderRegistry storage,address,uint32,uint32,uint32,uint32,uint8)": {
        "details": "Throws an error if the oracle provider is already registered.",
        "params": {
          "leverageLevel": "The leverage level of the oracle provider.",
          "maxStopLossBPS": "The maximum stop-loss basis points.",
          "maxTakeProfitBPS": "The maximum take-profit basis points.",
          "minStopLossBPS": "The minimum stop-loss basis points.",
          "minTakeProfitBPS": "The minimum take-profit basis points.",
          "oracleProvider": "The address of the oracle provider to register.",
          "self": "The OracleProviderRegistry storage."
        }
      },
      "setLeverageLevel(OracleProviderRegistry storage,address,uint8)": {
        "details": "The leverage level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.",
        "params": {
          "leverageLevel": "The new leverage level to be set for the oracle provider.",
          "oracleProvider": "The address of the oracle provider.",
          "self": "The storage reference to the OracleProviderRegistry."
        }
      },
      "setStopLossBPSRange(OracleProviderRegistry storage,address,uint32,uint32)": {
        "params": {
          "maxStopLossBPS": "The maximum stop-loss basis points.",
          "minStopLossBPS": "The minimum stop-loss basis points.",
          "oracleProvider": "The address of the oracle provider.",
          "self": "The OracleProviderRegistry storage."
        }
      },
      "setTakeProfitBPSRange(OracleProviderRegistry storage,address,uint32,uint32)": {
        "params": {
          "maxTakeProfitBPS": "The maximum take-profit basis points.",
          "minTakeProfitBPS": "The minimum take-profit basis points.",
          "oracleProvider": "The address of the oracle provider.",
          "self": "The OracleProviderRegistry storage."
        }
      },
      "unregister(OracleProviderRegistry storage,address)": {
        "params": {
          "oracleProvider": "The address of the oracle provider to unregister.",
          "self": "The OracleProviderRegistry storage."
        }
      }
    },
    "title": "OracleProviderRegistryLib",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getOracleProviderProperties(OracleProviderRegistry storage,address)": {
        "notice": "Retrieves the properties of an oracle provider."
      },
      "isRegistered(OracleProviderRegistry storage,address)": {
        "notice": "Checks if an oracle provider is registered in the registry."
      },
      "oracleProviders(OracleProviderRegistry storage)": {
        "notice": "Returns an array of all registered oracle providers."
      },
      "register(OracleProviderRegistry storage,address,uint32,uint32,uint32,uint32,uint8)": {
        "notice": "Registers an oracle provider in the registry."
      },
      "setLeverageLevel(OracleProviderRegistry storage,address,uint8)": {
        "notice": "Sets the leverage level of an oracle provider in the registry."
      },
      "setStopLossBPSRange(OracleProviderRegistry storage,address,uint32,uint32)": {
        "notice": "Sets the range for stop-loss basis points for an oracle provider."
      },
      "setTakeProfitBPSRange(OracleProviderRegistry storage,address,uint32,uint32)": {
        "notice": "Sets the range for take-profit basis points for an oracle provider."
      },
      "unregister(OracleProviderRegistry storage,address)": {
        "notice": "Unregisters an oracle provider from the registry."
      }
    },
    "notice": "Library for managing a registry of oracle providers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}