{
  "address": "0xd71696D8822453ED3376A8aD8cE60b5023cd66D8",
  "abi": [],
  "transactionHash": "0x746c3f30e1057d57f2f051be772530d6e25cdc213d7865f5d147f2d1ac469a38",
  "receipt": {
    "to": null,
    "from": "0x3bD0496CA35b200FCc21CAc644208F7b11838EF6",
    "contractAddress": "0xd71696D8822453ED3376A8aD8cE60b5023cd66D8",
    "transactionIndex": 1,
    "gasUsed": "1048747",
    "logsBloom": "0x
    "blockHash": "0x9386c5983af7b5e87fe4b768fa3799f6a74c5fdfbcada408cf6c459b12e58bf4",
    "transactionHash": "0x746c3f30e1057d57f2f051be772530d6e25cdc213d7865f5d147f2d1ac469a38",
    "logs": [],
    "blockNumber": 28265012,
    "cumulativeGasUsed": "1048747",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "89c49b8c2acc273e61affc3424ccf8f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"appendInterestRateRecord(SettlementTokenRegistry storage,address,uint256,uint256)\":{\"details\":\"Throws an error if the settlement token is not registered.\",\"params\":{\"annualRateBPS\":\"The annual interest rate in basis points.\",\"beginTimestamp\":\"The timestamp when the interest rate begins.\",\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\"}},\"calculateInterest(SettlementTokenRegistry storage,address,uint256,uint256,uint256)\":{\"details\":\"Throws an error if the token is not registered.\",\"params\":{\"amount\":\"The amount of settlement tokens to calculate interest for.\",\"from\":\"The starting timestamp of the interest calculation (inclusive).\",\"self\":\"The SettlementTokenRegistry storage.\",\"to\":\"The ending timestamp of the interest calculation (exclusive).\",\"token\":\"The address of the settlement token.\"},\"returns\":{\"_0\":\"uint256 The calculated interest amount.\"}},\"currentInterestRate(SettlementTokenRegistry storage,address)\":{\"details\":\"Throws an error if the settlement token is not registered.\",\"params\":{\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\"},\"returns\":{\"annualRateBPS\":\"The current annual interest rate in basis points.\"}},\"getEarningDistributionThreshold(SettlementTokenRegistry storage,address)\":{\"params\":{\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\"},\"returns\":{\"_0\":\"uint256 The earning distribution threshold for the token.\"}},\"getFlashLoanFeeRate(SettlementTokenRegistry storage,address)\":{\"params\":{\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\"},\"returns\":{\"_0\":\"uint256 The flash loan fee rate for the settlement token.\"}},\"getInterestRateRecords(SettlementTokenRegistry storage,address)\":{\"params\":{\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\"},\"returns\":{\"_0\":\"The array of interest rate records.\"}},\"getMinimumMargin(SettlementTokenRegistry storage,address)\":{\"params\":{\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the asettlement token.\"},\"returns\":{\"_0\":\"uint256 The minimum margin for the asettlement token.\"}},\"getUniswapFeeTier(SettlementTokenRegistry storage,address)\":{\"params\":{\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\"},\"returns\":{\"_0\":\"uint24 The Uniswap fee tier for the settlement token.\"}},\"isRegistered(SettlementTokenRegistry storage,address)\":{\"params\":{\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the token to check.\"},\"returns\":{\"_0\":\"bool Whether the token is registered.\"}},\"register(SettlementTokenRegistry storage,address,uint256,uint256,uint256,uint256,uint24)\":{\"details\":\"Throws an error if the token is already registered.\",\"params\":{\"earningDistributionThreshold\":\"The earning distribution threshold for the token.\",\"flashLoanFeeRate\":\"The flash loan fee rate for the token.\",\"interestRate\":\"The initial interest rate for the token.\",\"minimumMargin\":\"The minimum margin for the token.\",\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the token to register.\",\"uniswapFeeTier\":\"The Uniswap fee tier for the token.\"}},\"removeLastInterestRateRecord(SettlementTokenRegistry storage,address)\":{\"details\":\"The current time must be less than the begin timestamp of the last record.      Otherwise throws an error with the message `INTEREST_RATE_ALREADY_APPLIED`.Throws an error if the settlement token is not registered.\",\"params\":{\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\"},\"returns\":{\"record\":\"The removed interest rate record.\",\"removed\":\"Whether the removal was successful\"}},\"setEarningDistributionThreshold(SettlementTokenRegistry storage,address,uint256)\":{\"params\":{\"earningDistributionThreshold\":\"The new earning distribution threshold for the settlement token.\",\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\"}},\"setFlashLoanFeeRate(SettlementTokenRegistry storage,address,uint256)\":{\"params\":{\"flashLoanFeeRate\":\"The new flash loan fee rate for the settlement token.\",\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\"}},\"setMinimumMargin(SettlementTokenRegistry storage,address,uint256)\":{\"params\":{\"minimumMargin\":\"The new minimum margin for the settlement token.\",\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\"}},\"setUniswapFeeTier(SettlementTokenRegistry storage,address,uint24)\":{\"params\":{\"self\":\"The SettlementTokenRegistry storage.\",\"token\":\"The address of the settlement token.\",\"uniswapFeeTier\":\"The new Uniswap fee tier for the settlement token.\"}},\"settlementTokens(SettlementTokenRegistry storage)\":{\"params\":{\"self\":\"The SettlementTokenRegistry storage.\"},\"returns\":{\"_0\":\"An array of addresses representing the registered settlement tokens.\"}}},\"title\":\"SettlementTokenRegistryLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"appendInterestRateRecord(SettlementTokenRegistry storage,address,uint256,uint256)\":{\"notice\":\"Appends an interest rate record for a settlement token.\"},\"calculateInterest(SettlementTokenRegistry storage,address,uint256,uint256,uint256)\":{\"notice\":\"Calculates the interest accrued for a settlement token within a specified time range.\"},\"currentInterestRate(SettlementTokenRegistry storage,address)\":{\"notice\":\"Retrieves the current interest rate for a settlement token.\"},\"getEarningDistributionThreshold(SettlementTokenRegistry storage,address)\":{\"notice\":\"Retrieves the earning distribution threshold for a settlement token.\"},\"getFlashLoanFeeRate(SettlementTokenRegistry storage,address)\":{\"notice\":\"Retrieves the flash loan fee rate for a settlement token.\"},\"getInterestRateRecords(SettlementTokenRegistry storage,address)\":{\"notice\":\"Retrieves the array of interest rate records for a settlement token.\"},\"getMinimumMargin(SettlementTokenRegistry storage,address)\":{\"notice\":\"Retrieves the minimum margin for a asettlement token.\"},\"getUniswapFeeTier(SettlementTokenRegistry storage,address)\":{\"notice\":\"Retrieves the Uniswap fee tier for a settlement token.\"},\"isRegistered(SettlementTokenRegistry storage,address)\":{\"notice\":\"Checks if a token is registered in the settlement token registry.\"},\"register(SettlementTokenRegistry storage,address,uint256,uint256,uint256,uint256,uint24)\":{\"notice\":\"Registers a token in the settlement token registry.\"},\"removeLastInterestRateRecord(SettlementTokenRegistry storage,address)\":{\"notice\":\"Removes the last interest rate record for a settlement token.\"},\"setEarningDistributionThreshold(SettlementTokenRegistry storage,address,uint256)\":{\"notice\":\"Sets the earning distribution threshold for a settlement token.\"},\"setFlashLoanFeeRate(SettlementTokenRegistry storage,address,uint256)\":{\"notice\":\"Sets the flash loan fee rate for a settlement token.\"},\"setMinimumMargin(SettlementTokenRegistry storage,address,uint256)\":{\"notice\":\"Sets the minimum margin for asettlement token.\"},\"setUniswapFeeTier(SettlementTokenRegistry storage,address,uint24)\":{\"notice\":\"Sets the Uniswap fee tier for a settlement token.\"},\"settlementTokens(SettlementTokenRegistry storage)\":{\"notice\":\"Returns an array of all registered settlement tokens.\"}},\"notice\":\"Library for managing the settlement token registry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/external/registry/SettlementTokenRegistry.sol\":\"SettlementTokenRegistryLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chromatic-protocol/contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/core/external/registry/SettlementTokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {InterestRate} from \\\"@chromatic-protocol/contracts/core/libraries/InterestRate.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title SettlementTokenRegistry\\n * @dev A registry for managing settlement tokens and their associated parameters.\\n */\\nstruct SettlementTokenRegistry {\\n    /// @dev Set of registered settlement tokens\\n    EnumerableSet.AddressSet _tokens;\\n    /// @dev Mapping of settlement tokens to their interest rate records\\n    mapping(address => InterestRate.Record[]) _interestRateRecords;\\n    /// @dev Mapping of settlement tokens to their minimum margins\\n    mapping(address => uint256) _minimumMargins;\\n    /// @dev Mapping of settlement tokens to their flash loan fee rates\\n    mapping(address => uint256) _flashLoanFeeRates;\\n    /// @dev Mapping of settlement tokens to their earning distribution thresholds\\n    mapping(address => uint256) _earningDistributionThresholds;\\n    /// @dev Mapping of settlement tokens to their Uniswap fee tiers\\n    mapping(address => uint24) _uniswapFeeTiers;\\n}\\n\\n/**\\n * @title SettlementTokenRegistryLib\\n * @notice Library for managing the settlement token registry.\\n */\\nlibrary SettlementTokenRegistryLib {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using InterestRate for InterestRate.Record[];\\n\\n    /**\\n     * @notice Modifier to check if a token is registered in the settlement token registry.\\n     * @dev Throws an error if the token is not registered.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the token to check.\\n     */\\n    modifier registeredOnly(SettlementTokenRegistry storage self, address token) {\\n        require(self._tokens.contains(token), Errors.UNREGISTERED_TOKEN);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Registers a token in the settlement token registry.\\n     * @dev Throws an error if the token is already registered.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the token to register.\\n     * @param minimumMargin The minimum margin for the token.\\n     * @param interestRate The initial interest rate for the token.\\n     * @param flashLoanFeeRate The flash loan fee rate for the token.\\n     * @param earningDistributionThreshold The earning distribution threshold for the token.\\n     * @param uniswapFeeTier The Uniswap fee tier for the token.\\n     */\\n    function register(\\n        SettlementTokenRegistry storage self,\\n        address token,\\n        uint256 minimumMargin,\\n        uint256 interestRate,\\n        uint256 flashLoanFeeRate,\\n        uint256 earningDistributionThreshold,\\n        uint24 uniswapFeeTier\\n    ) external {\\n        require(self._tokens.add(token), Errors.ALREADY_REGISTERED_TOKEN);\\n\\n        self._interestRateRecords[token].initialize(interestRate);\\n        self._minimumMargins[token] = minimumMargin;\\n        self._flashLoanFeeRates[token] = flashLoanFeeRate;\\n        self._earningDistributionThresholds[token] = earningDistributionThreshold;\\n        self._uniswapFeeTiers[token] = uniswapFeeTier;\\n    }\\n\\n    /**\\n     * @notice Returns an array of all registered settlement tokens.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @return An array of addresses representing the registered settlement tokens.\\n     */\\n    function settlementTokens(\\n        SettlementTokenRegistry storage self\\n    ) external view returns (address[] memory) {\\n        return self._tokens.values();\\n    }\\n\\n    /**\\n     * @notice Checks if a token is registered in the settlement token registry.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the token to check.\\n     * @return bool Whether the token is registered.\\n     */\\n    function isRegistered(\\n        SettlementTokenRegistry storage self,\\n        address token\\n    ) external view returns (bool) {\\n        return self._tokens.contains(token);\\n    }\\n\\n    /**\\n     * @notice Retrieves the minimum margin for a asettlement token.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the asettlement token.\\n     * @return uint256 The minimum margin for the asettlement token.\\n     */\\n    function getMinimumMargin(\\n        SettlementTokenRegistry storage self,\\n        address token\\n    ) external view returns (uint256) {\\n        return self._minimumMargins[token];\\n    }\\n\\n    /**\\n     * @notice Sets the minimum margin for asettlement token.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @param minimumMargin The new minimum margin for the settlement token.\\n     */\\n    function setMinimumMargin(\\n        SettlementTokenRegistry storage self,\\n        address token,\\n        uint256 minimumMargin\\n    ) external {\\n        self._minimumMargins[token] = minimumMargin;\\n    }\\n\\n    /**\\n     * @notice Retrieves the flash loan fee rate for a settlement token.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @return uint256 The flash loan fee rate for the settlement token.\\n     */\\n    function getFlashLoanFeeRate(\\n        SettlementTokenRegistry storage self,\\n        address token\\n    ) external view returns (uint256) {\\n        return self._flashLoanFeeRates[token];\\n    }\\n\\n    /**\\n     * @notice Sets the flash loan fee rate for a settlement token.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.\\n     */\\n    function setFlashLoanFeeRate(\\n        SettlementTokenRegistry storage self,\\n        address token,\\n        uint256 flashLoanFeeRate\\n    ) external {\\n        self._flashLoanFeeRates[token] = flashLoanFeeRate;\\n    }\\n\\n    /**\\n     * @notice Retrieves the earning distribution threshold for a settlement token.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @return uint256 The earning distribution threshold for the token.\\n     */\\n    function getEarningDistributionThreshold(\\n        SettlementTokenRegistry storage self,\\n        address token\\n    ) external view returns (uint256) {\\n        return self._earningDistributionThresholds[token];\\n    }\\n\\n    /**\\n     * @notice Sets the earning distribution threshold for a settlement token.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.\\n     */\\n    function setEarningDistributionThreshold(\\n        SettlementTokenRegistry storage self,\\n        address token,\\n        uint256 earningDistributionThreshold\\n    ) external {\\n        self._earningDistributionThresholds[token] = earningDistributionThreshold;\\n    }\\n\\n    /**\\n     * @notice Retrieves the Uniswap fee tier for a settlement token.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @return uint24 The Uniswap fee tier for the settlement token.\\n     */\\n    function getUniswapFeeTier(\\n        SettlementTokenRegistry storage self,\\n        address token\\n    ) external view returns (uint24) {\\n        return self._uniswapFeeTiers[token];\\n    }\\n\\n    /**\\n     * @notice Sets the Uniswap fee tier for a settlement token.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.\\n     */\\n    function setUniswapFeeTier(\\n        SettlementTokenRegistry storage self,\\n        address token,\\n        uint24 uniswapFeeTier\\n    ) external {\\n        self._uniswapFeeTiers[token] = uniswapFeeTier;\\n    }\\n\\n    /**\\n     * @notice Appends an interest rate record for a settlement token.\\n     * @dev Throws an error if the settlement token is not registered.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @param annualRateBPS The annual interest rate in basis points.\\n     * @param beginTimestamp The timestamp when the interest rate begins.\\n     */\\n    function appendInterestRateRecord(\\n        SettlementTokenRegistry storage self,\\n        address token,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) external registeredOnly(self, token) {\\n        getInterestRateRecords(self, token).appendRecord(annualRateBPS, beginTimestamp);\\n    }\\n\\n    /**\\n     * @notice Removes the last interest rate record for a settlement token.\\n     * @dev The current time must be less than the begin timestamp of the last record.\\n     *      Otherwise throws an error with the message `INTEREST_RATE_ALREADY_APPLIED`.\\n     * @dev Throws an error if the settlement token is not registered.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @return removed Whether the removal was successful\\n     * @return record The removed interest rate record.\\n     */\\n    function removeLastInterestRateRecord(\\n        SettlementTokenRegistry storage self,\\n        address token\\n    )\\n        external\\n        registeredOnly(self, token)\\n        returns (bool removed, InterestRate.Record memory record)\\n    {\\n        (removed, record) = getInterestRateRecords(self, token).removeLastRecord();\\n    }\\n\\n    /**\\n     * @notice Retrieves the current interest rate for a settlement token.\\n     * @dev Throws an error if the settlement token is not registered.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @return annualRateBPS The current annual interest rate in basis points.\\n     */\\n    function currentInterestRate(\\n        SettlementTokenRegistry storage self,\\n        address token\\n    ) external view registeredOnly(self, token) returns (uint256 annualRateBPS) {\\n        (InterestRate.Record memory record, ) = getInterestRateRecords(self, token).findRecordAt(\\n            block.timestamp\\n        );\\n        return record.annualRateBPS;\\n    }\\n\\n    /**\\n     * @notice Calculates the interest accrued for a settlement token within a specified time range.\\n     * @dev Throws an error if the token is not registered.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @param amount The amount of settlement tokens to calculate interest for.\\n     * @param from The starting timestamp of the interest calculation (inclusive).\\n     * @param to The ending timestamp of the interest calculation (exclusive).\\n     * @return uint256 The calculated interest amount.\\n     */\\n    function calculateInterest(\\n        SettlementTokenRegistry storage self,\\n        address token,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) external view registeredOnly(self, token) returns (uint256) {\\n        return getInterestRateRecords(self, token).calculateInterest(amount, from, to);\\n    }\\n\\n    /**\\n     * @notice Retrieves the array of interest rate records for a settlement token.\\n     * @param self The SettlementTokenRegistry storage.\\n     * @param token The address of the settlement token.\\n     * @return The array of interest rate records.\\n     */\\n    function getInterestRateRecords(\\n        SettlementTokenRegistry storage self,\\n        address token\\n    ) public view returns (InterestRate.Record[] storage) {\\n        return self._interestRateRecords[token];\\n    }\\n}\\n\",\"keccak256\":\"0x187d84574585f740d9bbff9672cb90c934b9ddd8cddbd82c9eae3401c6d6de52\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nuint256 constant BPS = 10000;\\nuint256 constant FEE_RATES_LENGTH = 36;\\n\",\"keccak256\":\"0x7090514076115048f25329d3a18a07456d07e1630c7e3ad13df01cb9f89e59de\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Errors {\\n    string constant NOT_ENOUGH_FREE_LIQUIDITY = \\\"NEFL\\\";\\n    string constant TOO_SMALL_AMOUNT = \\\"TSA\\\";\\n    string constant INVALID_ORACLE_VERSION = \\\"IOV\\\";\\n    string constant EXCEED_MARGIN_RANGE = \\\"IOV\\\";\\n    string constant UNSUPPORTED_TRADING_FEE_RATE = \\\"UTFR\\\";\\n    string constant ALREADY_REGISTERED_ORACLE_PROVIDER = \\\"ARO\\\";\\n    string constant ALREADY_REGISTERED_TOKEN = \\\"ART\\\";\\n    string constant UNREGISTERED_TOKEN = \\\"URT\\\";\\n    string constant INTEREST_RATE_NOT_INITIALIZED = \\\"IRNI\\\";\\n    string constant INTEREST_RATE_OVERFLOW = \\\"IROF\\\";\\n    string constant INTEREST_RATE_PAST_TIMESTAMP = \\\"IRPT\\\";\\n    string constant INTEREST_RATE_NOT_APPENDABLE = \\\"IRNA\\\";\\n    string constant INTEREST_RATE_ALREADY_APPLIED = \\\"IRAA\\\";\\n    string constant UNSETTLED_POSITION = \\\"USP\\\";\\n    string constant INVALID_POSITION_QTY = \\\"IPQ\\\";\\n}\\n\",\"keccak256\":\"0x8f069bf6e7f249df60a7076f9451266ce86f5675280160764078a8a314f5b1d6\",\"license\":\"BUSL-1.1\"},\"contracts/core/libraries/InterestRate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {BPS} from \\\"@chromatic-protocol/contracts/core/libraries/Constants.sol\\\";\\nimport {Errors} from \\\"@chromatic-protocol/contracts/core/libraries/Errors.sol\\\";\\n\\n/**\\n * @title InterestRate\\n * @notice Provides functions for managing interest rates.\\n * @dev The library allows for the initialization, appending, and removal of interest rate records,\\n *      as well as calculating interest based on these records.\\n */\\nlibrary InterestRate {\\n    using Math for uint256;\\n\\n    /// @dev Record type\\n    struct Record {\\n        /// @dev Annual interest rate in BPS\\n        uint256 annualRateBPS;\\n        /// @dev Timestamp when the interest rate becomes effective\\n        uint256 beginTimestamp;\\n    }\\n\\n    uint256 private constant MAX_RATE_BPS = BPS; // max interest rate is 100%\\n    uint256 private constant YEAR = 365 * 24 * 3600;\\n\\n    /**\\n     * @dev Ensure that the interest rate records have been initialized before certain functions can be called.\\n     *      It checks whether the length of the Record array is greater than 0.\\n     */\\n    modifier initialized(Record[] storage self) {\\n        require(self.length > 0, Errors.INTEREST_RATE_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the interest rate records.\\n     * @param self The stored record array\\n     * @param initialInterestRate The initial interest rate\\n     */\\n    function initialize(Record[] storage self, uint256 initialInterestRate) internal {\\n        self.push(Record({annualRateBPS: initialInterestRate, beginTimestamp: 0}));\\n    }\\n\\n    /**\\n     * @notice Add a new interest rate record to the array.\\n     * @dev Annual rate is not greater than the maximum rate and that the begin timestamp is in the future,\\n     *      and the new record's begin timestamp is greater than the previous record's timestamp.\\n     * @param self The stored record array\\n     * @param annualRateBPS The annual interest rate in BPS\\n     * @param beginTimestamp Begin timestamp of this record\\n     */\\n    function appendRecord(\\n        Record[] storage self,\\n        uint256 annualRateBPS,\\n        uint256 beginTimestamp\\n    ) internal initialized(self) {\\n        require(annualRateBPS <= MAX_RATE_BPS, Errors.INTEREST_RATE_OVERFLOW);\\n        require(beginTimestamp > block.timestamp, Errors.INTEREST_RATE_PAST_TIMESTAMP);\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        require(beginTimestamp > lastRecord.beginTimestamp, Errors.INTEREST_RATE_NOT_APPENDABLE);\\n\\n        self.push(Record({annualRateBPS: annualRateBPS, beginTimestamp: beginTimestamp}));\\n    }\\n\\n    /**\\n     * @notice Remove the last interest rate record from the array.\\n     * @dev The current time must be less than the begin timestamp of the last record.\\n     *      If the array has only one record, it returns false along with an empty record.\\n     *      Otherwise, it removes the last record from the array and returns true along with the removed record.\\n     * @param self The stored record array\\n     * @return removed Whether the last record is removed\\n     * @return record The removed record\\n     */\\n    function removeLastRecord(\\n        Record[] storage self\\n    ) internal initialized(self) returns (bool removed, Record memory record) {\\n        if (self.length <= 1) {\\n            // empty\\n            return (false, Record(0, 0));\\n        }\\n\\n        Record memory lastRecord = self[self.length - 1];\\n        require(block.timestamp < lastRecord.beginTimestamp, Errors.INTEREST_RATE_ALREADY_APPLIED);\\n\\n        self.pop();\\n\\n        return (true, lastRecord);\\n    }\\n\\n    /**\\n     * @notice Find the interest rate record that applies to a given timestamp.\\n     * @dev It iterates through the array from the end to the beginning\\n     *      and returns the first record with a begin timestamp less than or equal to the provided timestamp.\\n     * @param self The stored record array\\n     * @param timestamp Given timestamp\\n     * @return interestRate The record which is found\\n     * @return index The index of record\\n     */\\n    function findRecordAt(\\n        Record[] storage self,\\n        uint256 timestamp\\n    ) internal view initialized(self) returns (Record memory interestRate, uint256 index) {\\n        for (uint256 i = self.length; i > 0; i--) {\\n            index = i - 1;\\n            interestRate = self[index];\\n\\n            if (interestRate.beginTimestamp <= timestamp) {\\n                return (interestRate, index);\\n            }\\n        }\\n\\n        return (self[0], 0); // empty result (this line is not reachable)\\n    }\\n\\n    /**\\n     * @notice Calculate the interest\\n     * @param self The stored record array\\n     * @param amount Token amount\\n     * @param from Begin timestamp (inclusive)\\n     * @param to End timestamp (exclusive)\\n     */\\n    function calculateInterest(\\n        Record[] storage self,\\n        uint256 amount,\\n        uint256 from, // timestamp (inclusive)\\n        uint256 to // timestamp (exclusive)\\n    ) internal view initialized(self) returns (uint256) {\\n        if (from >= to) {\\n            return 0;\\n        }\\n\\n        uint256 interest = 0;\\n\\n        uint256 endTimestamp = type(uint256).max;\\n        for (uint256 idx = self.length; idx > 0; idx--) {\\n            Record memory record = self[idx - 1];\\n            if (endTimestamp <= from) {\\n                break;\\n            }\\n\\n            interest += _interest(\\n                amount,\\n                record.annualRateBPS,\\n                Math.min(to, endTimestamp) - Math.max(from, record.beginTimestamp)\\n            );\\n            endTimestamp = record.beginTimestamp;\\n        }\\n        return interest;\\n    }\\n\\n    function _interest(\\n        uint256 amount,\\n        uint256 rateBPS, // annual rate\\n        uint256 period // in seconds\\n    ) private pure returns (uint256) {\\n        return amount.mulDiv(rateBPS * period, BPS * YEAR, Math.Rounding.Up);\\n    }\\n}\\n\",\"keccak256\":\"0x1f6bd79aefc6a5ac831cc3156d22761b99df09c73c37d200ee8972f3d7813f22\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x61119d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061010a5760003560e01c80638c925047116100a1578063ca1e414611610070578063ca1e414614610319578063dbd75b6e1461035f578063de878b291461037f578063f7abca06146103d057600080fd5b80638c92504714610270578063ba75204e14610290578063c0e97a38146102cb578063c4a61d1a146102de57600080fd5b80634fbb9ca2116100dd5780634fbb9ca2146101a55780635beda3a2146101e957806364d7dae114610216578063844edba61461024357600080fd5b8063017d72641461010f5780630e84cb1c14610131578063109f15b01461015757806333e0edd614610192575b600080fd5b81801561011b57600080fd5b5061012f61012a366004610e5d565b6103f3565b005b61014461013f366004610e98565b610461565b6040519081526020015b60405180910390f35b81801561016357600080fd5b5061012f610172366004610ec4565b6001600160a01b0390911660009081526004909201602052604090912055565b6101446101a0366004610ef9565b610482565b8180156101b157600080fd5b506101c56101c0366004610e98565b6104ef565b6040805192151583528151602080850191909152909101519082015260600161014e565b6101446101f7366004610e98565b6001600160a01b03166000908152600591909101602052604090205490565b610144610224366004610e98565b6001600160a01b03166000908152600491909101602052604090205490565b610144610251366004610e98565b6001600160a01b03166000908152600391909101602052604090205490565b81801561027c57600080fd5b5061012f61028b366004610f52565b610574565b81801561029c57600080fd5b5061012f6102ab366004610ec4565b6001600160a01b0390911660009081526005909201602052604090912055565b6101446102d9366004610e98565b610656565b8180156102ea57600080fd5b5061012f6102f9366004610ec4565b6001600160a01b0390911660009081526003909201602052604090912055565b61034b610327366004610e98565b6001600160a01b03166000908152600691909101602052604090205462ffffff1690565b60405162ffffff909116815260200161014e565b61037261036d366004610fb5565b6106c1565b60405161014e9190610fce565b81801561038b57600080fd5b5061012f61039a36600461101b565b6001600160a01b03909116600090815260069092016020526040909120805462ffffff90921662ffffff19909216919091179055565b6103e36103de366004610e98565b6106cc565b604051901515815260200161014e565b83836103ff82826106df565b6040518060400160405280600381526020016215549560ea1b815250906104425760405162461bcd60e51b81526004016104399190611057565b60405180910390fd5b5061045984846104528989610461565b9190610701565b505050505050565b6001600160a01b038116600090815260028301602052604090205b92915050565b6000858561049082826106df565b6040518060400160405280600381526020016215549560ea1b815250906104ca5760405162461bcd60e51b81526004016104399190611057565b506104e38686866104db8c8c610461565b92919061088a565b98975050505050505050565b600061050e604051806040016040528060008152602001600081525090565b838361051a82826106df565b6040518060400160405280600381526020016215549560ea1b815250906105545760405162461bcd60e51b81526004016104399190611057565b506105676105628787610461565b6109ab565b9097909650945050505050565b61057e8787610b05565b6040518060400160405280600381526020016210549560ea1b815250906105b85760405162461bcd60e51b81526004016104399190611057565b506001600160a01b03959095166000818152600288810160209081526040808420815180830183529889528883018581528154600180820184559287528487209a51950290990193845597519290970191909155918152600388018252848120959095556004870181528385209290925560058601825282842055600690940190935291909120805462ffffff191662ffffff909216919091179055565b6000828261066482826106df565b6040518060400160405280600381526020016215549560ea1b8152509061069e5760405162461bcd60e51b81526004016104399190611057565b5060006106b5426106af8888610461565b90610b1a565b50519695505050505050565b606061047c82610c27565b60006106d883836106df565b9392505050565b6001600160a01b038116600090815260018301602052604081205415156106d8565b825460408051808201909152600481526349524e4960e01b6020820152849161073d5760405162461bcd60e51b81526004016104399190611057565b5060408051808201909152600481526324a927a360e11b602082015261271084111561077c5760405162461bcd60e51b81526004016104399190611057565b506040805180820190915260048152631254941560e21b60208201524283116107b85760405162461bcd60e51b81526004016104399190611057565b50835460009085906107cc906001906110bb565b815481106107dc576107dc6110ce565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050806020015183116040518060400160405280600481526020016349524e4160e01b8152509061084d5760405162461bcd60e51b81526004016104399190611057565b5050604080518082019091529283525060208083019182528354600181810186556000958652919094209251600290940290920192835551910155565b835460408051808201909152600481526349524e4960e01b60208201526000918691906108ca5760405162461bcd60e51b81526004016104399190611057565b508284106108db57600091506109a2565b8554600090600019905b801561099c576000896108f96001846110bb565b81548110610909576109096110ce565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050878311610945575061099c565b61097589826000015161095c8b8560200151610c34565b6109668b88610c4a565b61097091906110bb565b610c59565b61097f90856110e4565b935080602001519250508080610994906110f7565b9150506108e5565b50909250505b50949350505050565b60006109ca604051806040016040528060008152602001600081525090565b825460408051808201909152600481526349524e4960e01b60208201528491610a065760405162461bcd60e51b81526004016104399190611057565b508354600110610a32576000604051806040016040528060008152602001600081525092509250610aff565b83546000908590610a45906001906110bb565b81548110610a5557610a556110ce565b906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050905080602001514210604051806040016040528060048152602001634952414160e01b81525090610ac65760405162461bcd60e51b81526004016104399190611057565b5084805480610ad757610ad761110e565b6000828152602081206002600019909301928302018181556001908101919091559155935091505b50915091565b60006106d8836001600160a01b038416610c8a565b6040805180820190915260008082526020820152825460408051808201909152600481526349524e4960e01b6020820152600091859190610b6e5760405162461bcd60e51b81526004016104399190611057565b5084545b8015610be057610b836001826110bb565b9250858381548110610b9757610b976110ce565b600091825260209182902060408051808201909152600290920201805482526001015491810182905294508510610bce5750610c1f565b80610bd8816110f7565b915050610b72565b5084600081548110610bf457610bf46110ce565b6000918252602080832060408051808201909152600290930201805483526001015490820152935091505b509250929050565b606060006106d883610cd9565b6000818311610c4357816106d8565b5090919050565b6000818310610c4357816106d8565b6000610c82610c688385611124565b610c786301e13380612710611124565b8691906001610d35565b949350505050565b6000818152600183016020526040812054610cd15750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561047c565b50600061047c565b606081600001805480602002602001604051908101604052809291908181526020018280548015610d2957602002820191906000526020600020905b815481526020019060010190808311610d15575b50505050509050919050565b600080610d43868686610d92565b90506001836002811115610d5957610d5961113b565b148015610d76575060008480610d7157610d71611151565b868809115b15610d8957610d866001826110e4565b90505b95945050505050565b6000808060001985870985870292508281108382030391505080600003610dcc57838281610dc257610dc2611151565b04925050506106d8565b808411610dd857600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b80356001600160a01b0381168114610e5857600080fd5b919050565b60008060008060808587031215610e7357600080fd5b84359350610e8360208601610e41565b93969395505050506040820135916060013590565b60008060408385031215610eab57600080fd5b82359150610ebb60208401610e41565b90509250929050565b600080600060608486031215610ed957600080fd5b83359250610ee960208501610e41565b9150604084013590509250925092565b600080600080600060a08688031215610f1157600080fd5b85359450610f2160208701610e41565b94979496505050506040830135926060810135926080909101359150565b803562ffffff81168114610e5857600080fd5b600080600080600080600060e0888a031215610f6d57600080fd5b87359650610f7d60208901610e41565b955060408801359450606088013593506080880135925060a08801359150610fa760c08901610f3f565b905092959891949750929550565b600060208284031215610fc757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561100f5783516001600160a01b031683529284019291840191600101610fea565b50909695505050505050565b60008060006060848603121561103057600080fd5b8335925061104060208501610e41565b915061104e60408501610f3f565b90509250925092565b600060208083528351808285015260005b8181101561108457858101830151858201604001528201611068565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561047c5761047c6110a5565b634e487b7160e01b600052603260045260246000fd5b8082018082111561047c5761047c6110a5565b600081611106576111066110a5565b506000190190565b634e487b7160e01b600052603160045260246000fd5b808202811582820484141761047c5761047c6110a5565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220ae3312dea8eccf82d35bbc7620fadd50a3d5a295167b2aefe6ddfecce21ca9e964736f6c63430008130033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061010a5760003560e01c80638c925047116100a1578063ca1e414611610070578063ca1e414614610319578063dbd75b6e1461035f578063de878b291461037f578063f7abca06146103d057600080fd5b80638c92504714610270578063ba75204e14610290578063c0e97a38146102cb578063c4a61d1a146102de57600080fd5b80634fbb9ca2116100dd5780634fbb9ca2146101a55780635beda3a2146101e957806364d7dae114610216578063844edba61461024357600080fd5b8063017d72641461010f5780630e84cb1c14610131578063109f15b01461015757806333e0edd614610192575b600080fd5b81801561011b57600080fd5b5061012f61012a366004610e5d565b6103f3565b005b61014461013f366004610e98565b610461565b6040519081526020015b60405180910390f35b81801561016357600080fd5b5061012f610172366004610ec4565b6001600160a01b0390911660009081526004909201602052604090912055565b6101446101a0366004610ef9565b610482565b8180156101b157600080fd5b506101c56101c0366004610e98565b6104ef565b6040805192151583528151602080850191909152909101519082015260600161014e565b6101446101f7366004610e98565b6001600160a01b03166000908152600591909101602052604090205490565b610144610224366004610e98565b6001600160a01b03166000908152600491909101602052604090205490565b610144610251366004610e98565b6001600160a01b03166000908152600391909101602052604090205490565b81801561027c57600080fd5b5061012f61028b366004610f52565b610574565b81801561029c57600080fd5b5061012f6102ab366004610ec4565b6001600160a01b0390911660009081526005909201602052604090912055565b6101446102d9366004610e98565b610656565b8180156102ea57600080fd5b5061012f6102f9366004610ec4565b6001600160a01b0390911660009081526003909201602052604090912055565b61034b610327366004610e98565b6001600160a01b03166000908152600691909101602052604090205462ffffff1690565b60405162ffffff909116815260200161014e565b61037261036d366004610fb5565b6106c1565b60405161014e9190610fce565b81801561038b57600080fd5b5061012f61039a36600461101b565b6001600160a01b03909116600090815260069092016020526040909120805462ffffff90921662ffffff19909216919091179055565b6103e36103de366004610e98565b6106cc565b604051901515815260200161014e565b83836103ff82826106df565b6040518060400160405280600381526020016215549560ea1b815250906104425760405162461bcd60e51b81526004016104399190611057565b60405180910390fd5b5061045984846104528989610461565b9190610701565b505050505050565b6001600160a01b038116600090815260028301602052604090205b92915050565b6000858561049082826106df565b6040518060400160405280600381526020016215549560ea1b815250906104ca5760405162461bcd60e51b81526004016104399190611057565b506104e38686866104db8c8c610461565b92919061088a565b98975050505050505050565b600061050e604051806040016040528060008152602001600081525090565b838361051a82826106df565b6040518060400160405280600381526020016215549560ea1b815250906105545760405162461bcd60e51b81526004016104399190611057565b506105676105628787610461565b6109ab565b9097909650945050505050565b61057e8787610b05565b6040518060400160405280600381526020016210549560ea1b815250906105b85760405162461bcd60e51b81526004016104399190611057565b506001600160a01b03959095166000818152600288810160209081526040808420815180830183529889528883018581528154600180820184559287528487209a51950290990193845597519290970191909155918152600388018252848120959095556004870181528385209290925560058601825282842055600690940190935291909120805462ffffff191662ffffff909216919091179055565b6000828261066482826106df565b6040518060400160405280600381526020016215549560ea1b8152509061069e5760405162461bcd60e51b81526004016104399190611057565b5060006106b5426106af8888610461565b90610b1a565b50519695505050505050565b606061047c82610c27565b60006106d883836106df565b9392505050565b6001600160a01b038116600090815260018301602052604081205415156106d8565b825460408051808201909152600481526349524e4960e01b6020820152849161073d5760405162461bcd60e51b81526004016104399190611057565b5060408051808201909152600481526324a927a360e11b602082015261271084111561077c5760405162461bcd60e51b81526004016104399190611057565b506040805180820190915260048152631254941560e21b60208201524283116107b85760405162461bcd60e51b81526004016104399190611057565b50835460009085906107cc906001906110bb565b815481106107dc576107dc6110ce565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050806020015183116040518060400160405280600481526020016349524e4160e01b8152509061084d5760405162461bcd60e51b81526004016104399190611057565b5050604080518082019091529283525060208083019182528354600181810186556000958652919094209251600290940290920192835551910155565b835460408051808201909152600481526349524e4960e01b60208201526000918691906108ca5760405162461bcd60e51b81526004016104399190611057565b508284106108db57600091506109a2565b8554600090600019905b801561099c576000896108f96001846110bb565b81548110610909576109096110ce565b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050878311610945575061099c565b61097589826000015161095c8b8560200151610c34565b6109668b88610c4a565b61097091906110bb565b610c59565b61097f90856110e4565b935080602001519250508080610994906110f7565b9150506108e5565b50909250505b50949350505050565b60006109ca604051806040016040528060008152602001600081525090565b825460408051808201909152600481526349524e4960e01b60208201528491610a065760405162461bcd60e51b81526004016104399190611057565b508354600110610a32576000604051806040016040528060008152602001600081525092509250610aff565b83546000908590610a45906001906110bb565b81548110610a5557610a556110ce565b906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050905080602001514210604051806040016040528060048152602001634952414160e01b81525090610ac65760405162461bcd60e51b81526004016104399190611057565b5084805480610ad757610ad761110e565b6000828152602081206002600019909301928302018181556001908101919091559155935091505b50915091565b60006106d8836001600160a01b038416610c8a565b6040805180820190915260008082526020820152825460408051808201909152600481526349524e4960e01b6020820152600091859190610b6e5760405162461bcd60e51b81526004016104399190611057565b5084545b8015610be057610b836001826110bb565b9250858381548110610b9757610b976110ce565b600091825260209182902060408051808201909152600290920201805482526001015491810182905294508510610bce5750610c1f565b80610bd8816110f7565b915050610b72565b5084600081548110610bf457610bf46110ce565b6000918252602080832060408051808201909152600290930201805483526001015490820152935091505b509250929050565b606060006106d883610cd9565b6000818311610c4357816106d8565b5090919050565b6000818310610c4357816106d8565b6000610c82610c688385611124565b610c786301e13380612710611124565b8691906001610d35565b949350505050565b6000818152600183016020526040812054610cd15750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561047c565b50600061047c565b606081600001805480602002602001604051908101604052809291908181526020018280548015610d2957602002820191906000526020600020905b815481526020019060010190808311610d15575b50505050509050919050565b600080610d43868686610d92565b90506001836002811115610d5957610d5961113b565b148015610d76575060008480610d7157610d71611151565b868809115b15610d8957610d866001826110e4565b90505b95945050505050565b6000808060001985870985870292508281108382030391505080600003610dcc57838281610dc257610dc2611151565b04925050506106d8565b808411610dd857600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b80356001600160a01b0381168114610e5857600080fd5b919050565b60008060008060808587031215610e7357600080fd5b84359350610e8360208601610e41565b93969395505050506040820135916060013590565b60008060408385031215610eab57600080fd5b82359150610ebb60208401610e41565b90509250929050565b600080600060608486031215610ed957600080fd5b83359250610ee960208501610e41565b9150604084013590509250925092565b600080600080600060a08688031215610f1157600080fd5b85359450610f2160208701610e41565b94979496505050506040830135926060810135926080909101359150565b803562ffffff81168114610e5857600080fd5b600080600080600080600060e0888a031215610f6d57600080fd5b87359650610f7d60208901610e41565b955060408801359450606088013593506080880135925060a08801359150610fa760c08901610f3f565b905092959891949750929550565b600060208284031215610fc757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561100f5783516001600160a01b031683529284019291840191600101610fea565b50909695505050505050565b60008060006060848603121561103057600080fd5b8335925061104060208501610e41565b915061104e60408501610f3f565b90509250925092565b600060208083528351808285015260005b8181101561108457858101830151858201604001528201611068565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561047c5761047c6110a5565b634e487b7160e01b600052603260045260246000fd5b8082018082111561047c5761047c6110a5565b600081611106576111066110a5565b506000190190565b634e487b7160e01b600052603160045260246000fd5b808202811582820484141761047c5761047c6110a5565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220ae3312dea8eccf82d35bbc7620fadd50a3d5a295167b2aefe6ddfecce21ca9e964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "appendInterestRateRecord(SettlementTokenRegistry storage,address,uint256,uint256)": {
        "details": "Throws an error if the settlement token is not registered.",
        "params": {
          "annualRateBPS": "The annual interest rate in basis points.",
          "beginTimestamp": "The timestamp when the interest rate begins.",
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token."
        }
      },
      "calculateInterest(SettlementTokenRegistry storage,address,uint256,uint256,uint256)": {
        "details": "Throws an error if the token is not registered.",
        "params": {
          "amount": "The amount of settlement tokens to calculate interest for.",
          "from": "The starting timestamp of the interest calculation (inclusive).",
          "self": "The SettlementTokenRegistry storage.",
          "to": "The ending timestamp of the interest calculation (exclusive).",
          "token": "The address of the settlement token."
        },
        "returns": {
          "_0": "uint256 The calculated interest amount."
        }
      },
      "currentInterestRate(SettlementTokenRegistry storage,address)": {
        "details": "Throws an error if the settlement token is not registered.",
        "params": {
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token."
        },
        "returns": {
          "annualRateBPS": "The current annual interest rate in basis points."
        }
      },
      "getEarningDistributionThreshold(SettlementTokenRegistry storage,address)": {
        "params": {
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token."
        },
        "returns": {
          "_0": "uint256 The earning distribution threshold for the token."
        }
      },
      "getFlashLoanFeeRate(SettlementTokenRegistry storage,address)": {
        "params": {
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token."
        },
        "returns": {
          "_0": "uint256 The flash loan fee rate for the settlement token."
        }
      },
      "getInterestRateRecords(SettlementTokenRegistry storage,address)": {
        "params": {
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token."
        },
        "returns": {
          "_0": "The array of interest rate records."
        }
      },
      "getMinimumMargin(SettlementTokenRegistry storage,address)": {
        "params": {
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the asettlement token."
        },
        "returns": {
          "_0": "uint256 The minimum margin for the asettlement token."
        }
      },
      "getUniswapFeeTier(SettlementTokenRegistry storage,address)": {
        "params": {
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token."
        },
        "returns": {
          "_0": "uint24 The Uniswap fee tier for the settlement token."
        }
      },
      "isRegistered(SettlementTokenRegistry storage,address)": {
        "params": {
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the token to check."
        },
        "returns": {
          "_0": "bool Whether the token is registered."
        }
      },
      "register(SettlementTokenRegistry storage,address,uint256,uint256,uint256,uint256,uint24)": {
        "details": "Throws an error if the token is already registered.",
        "params": {
          "earningDistributionThreshold": "The earning distribution threshold for the token.",
          "flashLoanFeeRate": "The flash loan fee rate for the token.",
          "interestRate": "The initial interest rate for the token.",
          "minimumMargin": "The minimum margin for the token.",
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the token to register.",
          "uniswapFeeTier": "The Uniswap fee tier for the token."
        }
      },
      "removeLastInterestRateRecord(SettlementTokenRegistry storage,address)": {
        "details": "The current time must be less than the begin timestamp of the last record.      Otherwise throws an error with the message `INTEREST_RATE_ALREADY_APPLIED`.Throws an error if the settlement token is not registered.",
        "params": {
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token."
        },
        "returns": {
          "record": "The removed interest rate record.",
          "removed": "Whether the removal was successful"
        }
      },
      "setEarningDistributionThreshold(SettlementTokenRegistry storage,address,uint256)": {
        "params": {
          "earningDistributionThreshold": "The new earning distribution threshold for the settlement token.",
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token."
        }
      },
      "setFlashLoanFeeRate(SettlementTokenRegistry storage,address,uint256)": {
        "params": {
          "flashLoanFeeRate": "The new flash loan fee rate for the settlement token.",
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token."
        }
      },
      "setMinimumMargin(SettlementTokenRegistry storage,address,uint256)": {
        "params": {
          "minimumMargin": "The new minimum margin for the settlement token.",
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token."
        }
      },
      "setUniswapFeeTier(SettlementTokenRegistry storage,address,uint24)": {
        "params": {
          "self": "The SettlementTokenRegistry storage.",
          "token": "The address of the settlement token.",
          "uniswapFeeTier": "The new Uniswap fee tier for the settlement token."
        }
      },
      "settlementTokens(SettlementTokenRegistry storage)": {
        "params": {
          "self": "The SettlementTokenRegistry storage."
        },
        "returns": {
          "_0": "An array of addresses representing the registered settlement tokens."
        }
      }
    },
    "title": "SettlementTokenRegistryLib",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "appendInterestRateRecord(SettlementTokenRegistry storage,address,uint256,uint256)": {
        "notice": "Appends an interest rate record for a settlement token."
      },
      "calculateInterest(SettlementTokenRegistry storage,address,uint256,uint256,uint256)": {
        "notice": "Calculates the interest accrued for a settlement token within a specified time range."
      },
      "currentInterestRate(SettlementTokenRegistry storage,address)": {
        "notice": "Retrieves the current interest rate for a settlement token."
      },
      "getEarningDistributionThreshold(SettlementTokenRegistry storage,address)": {
        "notice": "Retrieves the earning distribution threshold for a settlement token."
      },
      "getFlashLoanFeeRate(SettlementTokenRegistry storage,address)": {
        "notice": "Retrieves the flash loan fee rate for a settlement token."
      },
      "getInterestRateRecords(SettlementTokenRegistry storage,address)": {
        "notice": "Retrieves the array of interest rate records for a settlement token."
      },
      "getMinimumMargin(SettlementTokenRegistry storage,address)": {
        "notice": "Retrieves the minimum margin for a asettlement token."
      },
      "getUniswapFeeTier(SettlementTokenRegistry storage,address)": {
        "notice": "Retrieves the Uniswap fee tier for a settlement token."
      },
      "isRegistered(SettlementTokenRegistry storage,address)": {
        "notice": "Checks if a token is registered in the settlement token registry."
      },
      "register(SettlementTokenRegistry storage,address,uint256,uint256,uint256,uint256,uint24)": {
        "notice": "Registers a token in the settlement token registry."
      },
      "removeLastInterestRateRecord(SettlementTokenRegistry storage,address)": {
        "notice": "Removes the last interest rate record for a settlement token."
      },
      "setEarningDistributionThreshold(SettlementTokenRegistry storage,address,uint256)": {
        "notice": "Sets the earning distribution threshold for a settlement token."
      },
      "setFlashLoanFeeRate(SettlementTokenRegistry storage,address,uint256)": {
        "notice": "Sets the flash loan fee rate for a settlement token."
      },
      "setMinimumMargin(SettlementTokenRegistry storage,address,uint256)": {
        "notice": "Sets the minimum margin for asettlement token."
      },
      "setUniswapFeeTier(SettlementTokenRegistry storage,address,uint24)": {
        "notice": "Sets the Uniswap fee tier for a settlement token."
      },
      "settlementTokens(SettlementTokenRegistry storage)": {
        "notice": "Returns an array of all registered settlement tokens."
      }
    },
    "notice": "Library for managing the settlement token registry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}